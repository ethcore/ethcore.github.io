var searchIndex = {};
searchIndex['ethcore'] = {"items":[[0,"common","ethcore","TODO [Gav Wood] Please document me",null,null],[0,"basic_types","","TODO [Tomusdrw] Please document me",null,null],[4,"Seal","ethcore::basic_types","TODO [Gav Wood] Please document me",null,null],[13,"With","","TODO [Gav Wood] Please document me",0,null],[13,"Without","","TODO [Gav Wood] Please document me",0,null],[6,"LogBloom","","Type for a 2048-bit log-bloom, as used by our blocks.",null,null],[7,"ZERO_LOGBLOOM","","Constant 2048-bit datum for 0. Often used as a default.",null,null],[0,"evm","ethcore","Ethereum virtual machine.",null,null],[0,"ext","ethcore::evm","Interface for Evm externalities.",null,null],[4,"ContractCreateResult","ethcore::evm::ext","Result of externalities create function.",null,null],[13,"Created","","Returned when creation was successfull.\nContains an address of newly created contract and gas left.",1,null],[13,"Failed","","Returned when contract creation failed.\nVM doesn't have to know the reason.",1,null],[4,"MessageCallResult","","Result of externalities call function.",null,null],[13,"Success","","Returned when message call was successfull.\nContains gas left.",2,null],[13,"Failed","","Returned when message call failed.\nVM doesn't have to know the reason.",2,null],[8,"Ext","","TODO [debris] Please document me",null,null],[10,"storage_at","","Returns a value for given key.",3,{"inputs":[{"name":"ext"},{"name":"h256"}],"output":{"name":"h256"}}],[10,"set_storage","","Stores a value for given key.",3,{"inputs":[{"name":"ext"},{"name":"h256"},{"name":"h256"}],"output":null}],[10,"exists","","Determine whether an account exists.",3,{"inputs":[{"name":"ext"},{"name":"address"}],"output":{"name":"bool"}}],[10,"balance","","Returns address balance.",3,{"inputs":[{"name":"ext"},{"name":"address"}],"output":{"name":"u256"}}],[10,"blockhash","","Returns the hash of one of the 256 most recent complete blocks.",3,{"inputs":[{"name":"ext"},{"name":"u256"}],"output":{"name":"h256"}}],[10,"create","","Creates new contract.",3,null],[10,"call","","Message call.",3,null],[10,"extcode","","Returns code at given address",3,{"inputs":[{"name":"ext"},{"name":"address"}],"output":{"name":"bytes"}}],[10,"log","","Creates log entry with given topics and data",3,null],[10,"ret","","Should be called when transaction calls `RETURN` opcode.\nReturns gas_left if cost of returning the data is not too high.",3,null],[10,"suicide","","Should be called when contract commits suicide.\nAddress to which funds should be refunded.",3,{"inputs":[{"name":"ext"},{"name":"address"}],"output":null}],[10,"schedule","","Returns schedule.",3,{"inputs":[{"name":"ext"}],"output":{"name":"schedule"}}],[10,"env_info","","Returns environment info.",3,{"inputs":[{"name":"ext"}],"output":{"name":"envinfo"}}],[10,"depth","","Returns current depth of execution.",3,{"inputs":[{"name":"ext"}],"output":{"name":"usize"}}],[10,"inc_sstore_clears","","Increments sstore refunds count by 1.",3,{"inputs":[{"name":"ext"}],"output":null}],[0,"evm","ethcore::evm","Evm interface.",null,null],[4,"Error","ethcore::evm::evm","Evm errors.",null,null],[13,"OutOfGas","","`OutOfGas` is returned when transaction execution runs out of gas.\nThe state should be reverted to the state from before the\ntransaction execution. But it does not mean that transaction\nwas invalid. Balance still should be transfered and nonce\nshould be increased.",4,null],[13,"BadJumpDestination","","`BadJumpDestination` is returned when execution tried to move\nto position that wasn't marked with JUMPDEST instruction",4,null],[12,"destination","ethcore::evm::evm::Error","TODO [Tomusdrw] Please document me",4,null],[13,"BadInstruction","ethcore::evm::evm","`BadInstructions` is returned when given instruction is not supported",4,null],[12,"instruction","ethcore::evm::evm::Error","TODO [Tomusdrw] Please document me",4,null],[13,"StackUnderflow","ethcore::evm::evm","`StackUnderflow` when there is not enough stack elements to execute instruction\nFirst parameter says how many elements were needed and the second how many were actually on Stack",4,null],[12,"instruction","ethcore::evm::evm::Error","TODO [Tomusdrw] Please document me",4,null],[12,"wanted","","TODO [Tomusdrw] Please document me",4,null],[12,"on_stack","","TODO [Tomusdrw] Please document me",4,null],[13,"OutOfStack","ethcore::evm::evm","When execution would exceed defined Stack Limit",4,null],[12,"instruction","ethcore::evm::evm::Error","TODO [Tomusdrw] Please document me",4,null],[12,"wanted","","TODO [Tomusdrw] Please document me",4,null],[12,"limit","","TODO [Tomusdrw] Please document me",4,null],[13,"Internal","ethcore::evm::evm","Returned on evm internal error. Should never be ignored during development.\nLikely to cause consensus issues.",4,null],[6,"Result","","Evm result.",null,null],[8,"Evm","","Evm interface.",null,null],[10,"exec","","This function should be used to execute transaction.",5,{"inputs":[{"name":"evm"},{"name":"actionparams"},{"name":"ext"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"interpreter","ethcore::evm","TODO [Tomusdrw] Please document me",null,null],[3,"Interpreter","ethcore::evm::interpreter","Intepreter EVM implementation",null,null],[11,"exec","","",6,{"inputs":[{"name":"interpreter"},{"name":"actionparams"},{"name":"ext"}],"output":{"name":"result"}}],[0,"factory","ethcore::evm","Evm factory.",null,null],[3,"Factory","ethcore::evm::factory","Evm factory. Creates appropriate Evm.",null,null],[4,"VMType","","TODO [Tomusdrw] Please document me",null,null],[13,"Jit","","TODO [Tomusdrw] Please document me",7,null],[13,"Interpreter","","TODO [Tomusdrw] Please document me",7,null],[11,"clone","","",7,{"inputs":[{"name":"vmtype"}],"output":{"name":"vmtype"}}],[11,"fmt","","",7,{"inputs":[{"name":"vmtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"all","","Return all possible VMs (Interpreter)",7,{"inputs":[{"name":"vmtype"}],"output":{"name":"vec"}}],[11,"create","","Create fresh instance of VM",8,{"inputs":[{"name":"factory"}],"output":{"name":"box"}}],[11,"new","","Create new instance of specific `VMType` factory",8,{"inputs":[{"name":"factory"},{"name":"vmtype"}],"output":{"name":"factory"}}],[11,"default","","Returns native rust evm factory",8,{"inputs":[{"name":"factory"}],"output":{"name":"factory"}}],[0,"schedule","ethcore::evm","Cost schedule and other parameterisations for the EVM.",null,null],[3,"Schedule","ethcore::evm::schedule","Definition of the cost schedule and other parameterisations for the EVM.",null,null],[12,"exceptional_failed_code_deposit","","TODO [Gav Wood] Please document me",9,null],[12,"have_delegate_call","","TODO [Gav Wood] Please document me",9,null],[12,"stack_limit","","TODO [Tomusdrw] Please document me",9,null],[12,"max_depth","","TODO [Gav Wood] Please document me",9,null],[12,"tier_step_gas","","TODO [Gav Wood] Please document me",9,null],[12,"exp_gas","","TODO [Gav Wood] Please document me",9,null],[12,"exp_byte_gas","","TODO [Gav Wood] Please document me",9,null],[12,"sha3_gas","","TODO [Gav Wood] Please document me",9,null],[12,"sha3_word_gas","","TODO [Gav Wood] Please document me",9,null],[12,"sload_gas","","TODO [Gav Wood] Please document me",9,null],[12,"sstore_set_gas","","TODO [Gav Wood] Please document me",9,null],[12,"sstore_reset_gas","","TODO [Gav Wood] Please document me",9,null],[12,"sstore_refund_gas","","TODO [Gav Wood] Please document me",9,null],[12,"jumpdest_gas","","TODO [Gav Wood] Please document me",9,null],[12,"log_gas","","TODO [Gav Wood] Please document me",9,null],[12,"log_data_gas","","TODO [Gav Wood] Please document me",9,null],[12,"log_topic_gas","","TODO [Gav Wood] Please document me",9,null],[12,"create_gas","","TODO [Gav Wood] Please document me",9,null],[12,"call_gas","","TODO [Gav Wood] Please document me",9,null],[12,"call_stipend","","TODO [Gav Wood] Please document me",9,null],[12,"call_value_transfer_gas","","TODO [Gav Wood] Please document me",9,null],[12,"call_new_account_gas","","TODO [Gav Wood] Please document me",9,null],[12,"suicide_refund_gas","","TODO [Gav Wood] Please document me",9,null],[12,"memory_gas","","TODO [Gav Wood] Please document me",9,null],[12,"quad_coeff_div","","TODO [Gav Wood] Please document me",9,null],[12,"create_data_gas","","TODO [Gav Wood] Please document me",9,null],[12,"tx_gas","","TODO [Gav Wood] Please document me",9,null],[12,"tx_create_gas","","TODO [Gav Wood] Please document me",9,null],[12,"tx_data_zero_gas","","TODO [Gav Wood] Please document me",9,null],[12,"tx_data_non_zero_gas","","TODO [Gav Wood] Please document me",9,null],[12,"copy_gas","","TODO [Gav Wood] Please document me",9,null],[11,"new_frontier","","Schedule for the Frontier-era of the Ethereum main net.",9,{"inputs":[{"name":"schedule"}],"output":{"name":"schedule"}}],[11,"new_homestead","","Schedule for the Homestead-era of the Ethereum main net.",9,{"inputs":[{"name":"schedule"}],"output":{"name":"schedule"}}],[0,"error","ethcore","General error types for use in ethcore.",null,null],[3,"Mismatch","ethcore::error","TODO [Gav Wood] Please document me",null,null],[12,"expected","","TODO [Gav Wood] Please document me",10,null],[12,"found","","TODO [Gav Wood] Please document me",10,null],[3,"OutOfBounds","","TODO [Gav Wood] Please document me",null,null],[12,"min","","TODO [Gav Wood] Please document me",11,null],[12,"max","","TODO [Gav Wood] Please document me",11,null],[12,"found","","TODO [Gav Wood] Please document me",11,null],[4,"ExecutionError","","Result of executing the transaction.",null,null],[13,"NotEnoughBaseGas","","Returned when there gas paid for transaction execution is\nlower than base gas required.\nTODO [Gav Wood] Please document me",12,null],[12,"required","ethcore::error::ExecutionError","TODO [Gav Wood] Please document me",12,null],[12,"got","","TODO [Gav Wood] Please document me",12,null],[13,"BlockGasLimitReached","ethcore::error","Returned when block (gas_used + gas) > gas_limit.",12,null],[12,"gas_limit","ethcore::error::ExecutionError","TODO [Gav Wood] Please document me",12,null],[12,"gas_used","","TODO [Gav Wood] Please document me",12,null],[12,"gas","","TODO [Gav Wood] Please document me",12,null],[13,"InvalidNonce","ethcore::error","Returned when transaction nonce does not match state nonce.",12,null],[12,"expected","ethcore::error::ExecutionError","TODO [Gav Wood] Please document me",12,null],[12,"got","","TODO [Gav Wood] Please document me",12,null],[13,"NotEnoughCash","ethcore::error","Returned when cost of transaction (value + gas_price * gas) exceeds\ncurrent sender balance.",12,null],[12,"required","ethcore::error::ExecutionError","TODO [Gav Wood] Please document me",12,null],[12,"got","","TODO [Gav Wood] Please document me",12,null],[13,"Internal","ethcore::error","Returned when internal evm error occurs.",12,null],[4,"TransactionError","","TODO [Gav Wood] Please document me",null,null],[13,"InvalidGasLimit","","TODO [Gav Wood] Please document me",13,null],[4,"BlockError","","TODO [arkpar] Please document me",null,null],[13,"TooManyUncles","","TODO [Gav Wood] Please document me",14,null],[13,"UncleWrongGeneration","","TODO [Gav Wood] Please document me",14,null],[13,"ExtraDataOutOfBounds","","TODO [Gav Wood] Please document me",14,null],[13,"InvalidSealArity","","TODO [arkpar] Please document me",14,null],[13,"TooMuchGasUsed","","TODO [arkpar] Please document me",14,null],[13,"InvalidUnclesHash","","TODO [arkpar] Please document me",14,null],[13,"UncleTooOld","","TODO [arkpar] Please document me",14,null],[13,"UncleIsBrother","","TODO [arkpar] Please document me",14,null],[13,"UncleInChain","","TODO [arkpar] Please document me",14,null],[13,"UncleParentNotInChain","","TODO [arkpar] Please document me",14,null],[13,"InvalidStateRoot","","TODO [arkpar] Please document me",14,null],[13,"InvalidGasUsed","","TODO [arkpar] Please document me",14,null],[13,"InvalidTransactionsRoot","","TODO [arkpar] Please document me",14,null],[13,"InvalidDifficulty","","TODO [arkpar] Please document me",14,null],[13,"InvalidGasLimit","","TODO [arkpar] Please document me",14,null],[13,"InvalidReceiptsStateRoot","","TODO [arkpar] Please document me",14,null],[13,"InvalidTimestamp","","TODO [arkpar] Please document me",14,null],[13,"InvalidLogBloom","","TODO [arkpar] Please document me",14,null],[13,"InvalidEthashDifficulty","","TODO [arkpar] Please document me",14,null],[13,"InvalidBlockNonce","","TODO [arkpar] Please document me",14,null],[13,"InvalidParentHash","","TODO [arkpar] Please document me",14,null],[13,"InvalidNumber","","TODO [arkpar] Please document me",14,null],[13,"UnknownParent","","TODO [arkpar] Please document me",14,null],[13,"UnknownUncleParent","","TODO [Gav Wood] Please document me",14,null],[4,"ImportError","","TODO [arkpar] Please document me",null,null],[13,"Bad","","TODO [arkpar] Please document me",15,null],[13,"AlreadyInChain","","TODO [arkpar] Please document me",15,null],[13,"AlreadyQueued","","TODO [arkpar] Please document me",15,null],[4,"Error","","General error type which should be capable of representing all errors in ethcore.",null,null],[13,"Util","","TODO [Gav Wood] Please document me",16,null],[13,"Block","","TODO [Gav Wood] Please document me",16,null],[13,"UnknownEngineName","","TODO [Gav Wood] Please document me",16,null],[13,"Execution","","TODO [Gav Wood] Please document me",16,null],[13,"Transaction","","TODO [Gav Wood] Please document me",16,null],[6,"ImportResult","","Result of import block operation.",null,null],[11,"eq","","",10,{"inputs":[{"name":"mismatch"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"mismatch"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"mismatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"outofbounds"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"outofbounds"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"outofbounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"executionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"executionerror"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"executionerror"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"transactionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"blockerror"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"blockerror"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"blockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"importerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"importerror"},{"name":"error"}],"output":{"name":"importerror"}}],[11,"fmt","","",16,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"error"},{"name":"transactionerror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"},{"name":"blockerror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"},{"name":"executionerror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"},{"name":"cryptoerror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"},{"name":"decodererror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"},{"name":"utilerror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"},{"name":"ioerror"}],"output":{"name":"error"}}],[0,"log_entry","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"LogEntry","ethcore::log_entry","A single log's entry.",null,null],[12,"address","","TODO [Gav Wood] Please document me",17,null],[12,"topics","","TODO [Gav Wood] Please document me",17,null],[12,"data","","TODO [Gav Wood] Please document me",17,null],[11,"eq","","",17,{"inputs":[{"name":"logentry"},{"name":"logentry"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"logentry"},{"name":"logentry"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"logentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rlp_append","","",17,{"inputs":[{"name":"logentry"},{"name":"rlpstream"}],"output":null}],[11,"new","","Create a new log entry.",17,{"inputs":[{"name":"logentry"},{"name":"address"},{"name":"vec"},{"name":"bytes"}],"output":{"name":"logentry"}}],[11,"address","","Returns reference to address.",17,{"inputs":[{"name":"logentry"}],"output":{"name":"address"}}],[11,"topics","","Returns reference to topics.",17,{"inputs":[{"name":"logentry"}],"output":{"name":"vec"}}],[11,"data","","Returns reference to data.",17,{"inputs":[{"name":"logentry"}],"output":{"name":"bytes"}}],[11,"bloom","","Calculates the bloom of this log entry.",17,{"inputs":[{"name":"logentry"}],"output":{"name":"logbloom"}}],[11,"from_json","","Convert given JSON object to a LogEntry.",17,{"inputs":[{"name":"logentry"},{"name":"json"}],"output":{"name":"logentry"}}],[0,"env_info","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"EnvInfo","ethcore::env_info","Information concerning the execution environment for a message-call/contract-creation.",null,null],[12,"number","","The block number.",18,null],[12,"author","","The block author.",18,null],[12,"timestamp","","The block timestamp.",18,null],[12,"difficulty","","The block difficulty.",18,null],[12,"gas_limit","","The block gas limit.",18,null],[12,"last_hashes","","The last 256 block hashes.",18,null],[12,"gas_used","","The gas used.",18,null],[6,"LastHashes","","Simple vector of hashes, should be at most 256 items large, can be smaller if being used\nfor a block whose number is less than 257.",null,null],[11,"fmt","","",18,{"inputs":[{"name":"envinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create empty env_info initialized with zeros",18,{"inputs":[{"name":"envinfo"}],"output":{"name":"envinfo"}}],[11,"default","","",18,{"inputs":[{"name":"envinfo"}],"output":{"name":"self"}}],[11,"from_json","","",18,{"inputs":[{"name":"envinfo"},{"name":"json"}],"output":{"name":"envinfo"}}],[0,"pod_account","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"PodAccount","ethcore::pod_account","Genesis account data. Does not have a DB overlay cache.",null,null],[12,"balance","","TODO [Gav Wood] Please document me",19,null],[12,"nonce","","TODO [Gav Wood] Please document me",19,null],[12,"code","","TODO [Gav Wood] Please document me",19,null],[12,"storage","","TODO [Gav Wood] Please document me",19,null],[11,"eq","","",19,{"inputs":[{"name":"podaccount"},{"name":"podaccount"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"podaccount"},{"name":"podaccount"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"podaccount"}],"output":{"name":"podaccount"}}],[11,"fmt","","",19,{"inputs":[{"name":"podaccount"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct new object.",19,{"inputs":[{"name":"podaccount"},{"name":"u256"},{"name":"u256"},{"name":"bytes"},{"name":"btreemap"}],"output":{"name":"podaccount"}}],[11,"from_account","","Convert Account to a PodAccount.\nNOTE: This will silently fail unless the account is fully cached.",19,{"inputs":[{"name":"podaccount"},{"name":"account"}],"output":{"name":"podaccount"}}],[11,"rlp","","TODO [Gav Wood] Please document me",19,{"inputs":[{"name":"podaccount"}],"output":{"name":"bytes"}}],[11,"fmt","","",19,{"inputs":[{"name":"podaccount"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"pod_state","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"PodState","ethcore::pod_state","TODO [Gav Wood] Please document me",null,null],[11,"eq","","",20,{"inputs":[{"name":"podstate"},{"name":"podstate"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"podstate"},{"name":"podstate"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"podstate"}],"output":{"name":"podstate"}}],[11,"fmt","","",20,{"inputs":[{"name":"podstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Contruct a new object from the `m`.",20,{"inputs":[{"name":"podstate"},{"name":"btreemap"}],"output":{"name":"podstate"}}],[11,"get","","Get the underlying map.",20,{"inputs":[{"name":"podstate"}],"output":{"name":"btreemap"}}],[11,"drain","","Drain object to get the underlying map.",20,{"inputs":[{"name":"podstate"}],"output":{"name":"btreemap"}}],[11,"from_json","","Translate the JSON object into a hash map of account information ready for insertion into State.",20,{"inputs":[{"name":"podstate"},{"name":"json"}],"output":{"name":"podstate"}}],[11,"fmt","","",20,{"inputs":[{"name":"podstate"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"account_diff","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"AccountDiff","ethcore::account_diff","TODO [Gav Wood] Please document me",null,null],[12,"balance","","TODO [Gav Wood] Please document me",21,null],[12,"nonce","","TODO [Gav Wood] Please document me",21,null],[12,"code","","TODO [Gav Wood] Please document me",21,null],[12,"storage","","TODO [Gav Wood] Please document me",21,null],[4,"Existance","","Change in existance type.",null,null],[13,"Born","","TODO [Gav Wood] Please document me",22,null],[13,"Alive","","TODO [Gav Wood] Please document me",22,null],[13,"Died","","TODO [Gav Wood] Please document me",22,null],[11,"eq","","",22,{"inputs":[{"name":"existance"},{"name":"existance"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"existance"},{"name":"existance"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"existance"}],"output":{"name":"existance"}}],[11,"fmt","","",22,{"inputs":[{"name":"existance"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"existance"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"accountdiff"},{"name":"accountdiff"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"accountdiff"},{"name":"accountdiff"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"accountdiff"}],"output":{"name":"accountdiff"}}],[11,"fmt","","",21,{"inputs":[{"name":"accountdiff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"existance","","TODO [Gav Wood] Please document me",21,{"inputs":[{"name":"accountdiff"}],"output":{"name":"existance"}}],[11,"diff_pod","","TODO [Gav Wood] Please document me",21,{"inputs":[{"name":"accountdiff"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"accountdiff"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"state_diff","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"StateDiff","ethcore::state_diff","TODO [Gav Wood] Please document me",null,null],[11,"eq","","",23,{"inputs":[{"name":"statediff"},{"name":"statediff"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"statediff"},{"name":"statediff"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"statediff"}],"output":{"name":"statediff"}}],[11,"fmt","","",23,{"inputs":[{"name":"statediff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"diff_pod","","Calculate and return diff between `pre` state and `post` state.",23,{"inputs":[{"name":"statediff"},{"name":"podstate"},{"name":"podstate"}],"output":{"name":"statediff"}}],[11,"fmt","","",23,{"inputs":[{"name":"statediff"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"engine","ethcore","TODO [Gav Wood] Please document me",null,null],[8,"Engine","ethcore::engine","A consensus mechanism for the chain. Generally either proof-of-work or proof-of-stake-based.\nProvides hooks into each of the major parts of block import.",null,null],[10,"name","","The name of this engine.",24,{"inputs":[{"name":"engine"}],"output":{"name":"str"}}],[11,"version","","The version of this engine. Should be of the form",24,{"inputs":[{"name":"engine"}],"output":{"name":"semanticversion"}}],[11,"seal_fields","","The number of additional header fields required for this engine.",24,{"inputs":[{"name":"engine"}],"output":{"name":"usize"}}],[11,"seal_rlp","","Default values of the additional fields RLP-encoded in a raw (non-list) harness.",24,{"inputs":[{"name":"engine"}],"output":{"name":"bytes"}}],[11,"extra_info","","Additional engine-specific information for the user/developer concerning `header`.",24,{"inputs":[{"name":"engine"},{"name":"header"}],"output":{"name":"hashmap"}}],[10,"spec","","Get the general parameters of the chain.",24,{"inputs":[{"name":"engine"}],"output":{"name":"spec"}}],[10,"vm_factory","","Get current EVM factory",24,{"inputs":[{"name":"engine"}],"output":{"name":"factory"}}],[10,"schedule","","Get the EVM schedule for the given `env_info`.",24,{"inputs":[{"name":"engine"},{"name":"envinfo"}],"output":{"name":"schedule"}}],[11,"maximum_extra_data_size","","Some intrinsic operation parameters; by default they take their value from the `spec()`'s `engine_params`.",24,{"inputs":[{"name":"engine"}],"output":{"name":"usize"}}],[11,"maximum_uncle_count","","TODO [Gav Wood] Please document me",24,{"inputs":[{"name":"engine"}],"output":{"name":"usize"}}],[11,"account_start_nonce","","TODO [Gav Wood] Please document me",24,{"inputs":[{"name":"engine"}],"output":{"name":"u256"}}],[11,"on_new_block","","Block transformation functions, before and after the transactions.",24,{"inputs":[{"name":"engine"},{"name":"block"}],"output":null}],[11,"on_close_block","","TODO [Gav Wood] Please document me",24,{"inputs":[{"name":"engine"},{"name":"block"}],"output":null}],[11,"verify_block_basic","","Phase 1 quick block verification. Only does checks that are cheap. `block` (the header's full block)\nmay be provided for additional checks. Returns either a null `Ok` or a general error detailing the problem with import.",24,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_unordered","","Phase 2 verification. Perform costly checks such as transaction signatures. `block` (the header's full block)\nmay be provided for additional checks. Returns either a null `Ok` or a general error detailing the problem with import.",24,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_family","","Phase 3 verification. Check block information against parent and uncles. `block` (the header's full block)\nmay be provided for additional checks. Returns either a null `Ok` or a general error detailing the problem with import.",24,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_transaction_basic","","Additional verification for transactions in blocks.",24,{"inputs":[{"name":"engine"},{"name":"transaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"verify_transaction","","TODO [Gav Wood] Please document me",24,{"inputs":[{"name":"engine"},{"name":"transaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"populate_from_parent","","Don't forget to call Super::populateFromParent when subclassing & overriding.",24,{"inputs":[{"name":"engine"},{"name":"header"},{"name":"header"}],"output":null}],[11,"is_builtin","","TODO [Gav Wood] Please document me",24,{"inputs":[{"name":"engine"},{"name":"address"}],"output":{"name":"bool"}}],[11,"cost_of_builtin","","TODO [Gav Wood] Please document me",24,null],[11,"execute_builtin","","TODO [Gav Wood] Please document me",24,null],[0,"state","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"State","ethcore::state","Representation of the entire state of all accounts in the system.",null,null],[6,"ApplyResult","","TODO [Gav Wood] Please document me",null,null],[11,"clone","","",25,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"new","","Creates new state with empty state root",25,{"inputs":[{"name":"state"},{"name":"journaldb"},{"name":"u256"}],"output":{"name":"state"}}],[11,"from_existing","","Creates new state with existing state root",25,{"inputs":[{"name":"state"},{"name":"journaldb"},{"name":"h256"},{"name":"u256"}],"output":{"name":"state"}}],[11,"new_temp","","Create temporary state object",25,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"drop","","Destroy the current object and return root and database.",25,null],[11,"root","","Return reference to root",25,{"inputs":[{"name":"state"}],"output":{"name":"h256"}}],[11,"db","","Expose the underlying database; good to use for calling `state.db().commit()`.",25,{"inputs":[{"name":"state"}],"output":{"name":"journaldb"}}],[11,"new_contract","","Create a new contract at address `contract`. If there is already an account at the address\nit will have its code reset, ready for `init_code()`.",25,{"inputs":[{"name":"state"},{"name":"address"}],"output":null}],[11,"kill_account","","Remove an existing account.",25,{"inputs":[{"name":"state"},{"name":"address"}],"output":null}],[11,"exists","","Determine whether an account exists.",25,{"inputs":[{"name":"state"},{"name":"address"}],"output":{"name":"bool"}}],[11,"balance","","Get the balance of account `a`.",25,{"inputs":[{"name":"state"},{"name":"address"}],"output":{"name":"u256"}}],[11,"nonce","","Get the nonce of account `a`.",25,{"inputs":[{"name":"state"},{"name":"address"}],"output":{"name":"u256"}}],[11,"storage_at","","Mutate storage of account `a` so that it is `value` for `key`.",25,{"inputs":[{"name":"state"},{"name":"address"},{"name":"h256"}],"output":{"name":"h256"}}],[11,"code","","Mutate storage of account `a` so that it is `value` for `key`.",25,{"inputs":[{"name":"state"},{"name":"address"}],"output":{"name":"option"}}],[11,"add_balance","","Add `incr` to the balance of account `a`.",25,{"inputs":[{"name":"state"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"sub_balance","","Subtract `decr` from the balance of account `a`.",25,{"inputs":[{"name":"state"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"transfer_balance","","Subtracts `by` from the balance of `from` and adds it to that of `to`.",25,{"inputs":[{"name":"state"},{"name":"address"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"inc_nonce","","Increment the nonce of account `a` by 1.",25,{"inputs":[{"name":"state"},{"name":"address"}],"output":null}],[11,"set_storage","","Mutate storage of account `a` so that it is `value` for `key`.",25,{"inputs":[{"name":"state"},{"name":"address"},{"name":"h256"},{"name":"h256"}],"output":null}],[11,"init_code","","Initialise the code of account `a` so that it is `value` for `key`.\nNOTE: Account should have been created with `new_contract`.",25,{"inputs":[{"name":"state"},{"name":"address"},{"name":"bytes"}],"output":null}],[11,"apply","","Execute a given transaction.\nThis will change the state accordingly.",25,{"inputs":[{"name":"state"},{"name":"envinfo"},{"name":"engine"},{"name":"transaction"}],"output":{"name":"applyresult"}}],[11,"revert","","TODO [debris] Please document me",25,{"inputs":[{"name":"state"},{"name":"state"}],"output":null}],[11,"as_json","","Convert into a JSON representation.",25,{"inputs":[{"name":"state"}],"output":{"name":"string"}}],[11,"commit_into","","Commit accounts to SecTrieDBMut. This is similar to cpp-ethereum's dev::eth::commit.\n`accounts` is mutable because we may need to commit the code or storage and record that.",25,{"inputs":[{"name":"state"},{"name":"hashdb"},{"name":"h256"},{"name":"hashmap"}],"output":null}],[11,"commit","","Commits our cached account changes into the trie.",25,{"inputs":[{"name":"state"}],"output":null}],[11,"populate_from","","Populate the state from `accounts`.",25,{"inputs":[{"name":"state"},{"name":"podstate"}],"output":null}],[11,"to_hashmap_pod","","Populate a PodAccount map from this state.",25,{"inputs":[{"name":"state"}],"output":{"name":"hashmap"}}],[11,"to_pod","","Populate a PodAccount map from this state.",25,{"inputs":[{"name":"state"}],"output":{"name":"podstate"}}],[11,"fmt","","",25,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"account","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"Account","ethcore::account","Single account in the system.",null,null],[11,"clone","","",26,{"inputs":[{"name":"account"}],"output":{"name":"account"}}],[11,"new","","General constructor.",26,{"inputs":[{"name":"account"},{"name":"u256"},{"name":"u256"},{"name":"hashmap"},{"name":"bytes"}],"output":{"name":"account"}}],[11,"from_pod","","General constructor.",26,{"inputs":[{"name":"account"},{"name":"podaccount"}],"output":{"name":"account"}}],[11,"new_basic","","Create a new account with the given balance.",26,{"inputs":[{"name":"account"},{"name":"u256"},{"name":"u256"}],"output":{"name":"account"}}],[11,"from_rlp","","Create a new account from RLP.",26,null],[11,"new_contract","","Create a new contract account.\nNOTE: make sure you use `init_code` on this before `commit`ing.",26,{"inputs":[{"name":"account"},{"name":"u256"}],"output":{"name":"account"}}],[11,"reset_code","","Reset this account to the status of a not-yet-initialised contract.\nNOTE: Account should have `init_code()` called on it later.",26,{"inputs":[{"name":"account"}],"output":null}],[11,"init_code","","Set this account's code to the given code.\nNOTE: Account should have been created with `new_contract()` or have `reset_code()` called on it.",26,{"inputs":[{"name":"account"},{"name":"bytes"}],"output":null}],[11,"set_storage","","Set (and cache) the contents of the trie's storage at `key` to `value`.",26,{"inputs":[{"name":"account"},{"name":"h256"},{"name":"h256"}],"output":null}],[11,"storage_at","","Get (and cache) the contents of the trie's storage at `key`.",26,{"inputs":[{"name":"account"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"h256"}}],[11,"balance","","return the balance associated with this account.",26,{"inputs":[{"name":"account"}],"output":{"name":"u256"}}],[11,"nonce","","return the nonce associated with this account.",26,{"inputs":[{"name":"account"}],"output":{"name":"u256"}}],[11,"code_hash","","return the code hash associated with this account.",26,{"inputs":[{"name":"account"}],"output":{"name":"h256"}}],[11,"code","","returns the account's code. If `None` then the code cache isn't available -\nget someone who knows to call `note_code`.",26,{"inputs":[{"name":"account"}],"output":{"name":"option"}}],[11,"note_code","","Provide a byte array which hashes to the `code_hash`. returns the hash as a result.",26,{"inputs":[{"name":"account"},{"name":"bytes"}],"output":{"name":"result"}}],[11,"is_cached","","Is `code_cache` valid; such that code is going to return Some?",26,{"inputs":[{"name":"account"}],"output":{"name":"bool"}}],[11,"cache_code","","Provide a database to lookup `code_hash`. Should not be called if it is a contract without code.",26,{"inputs":[{"name":"account"},{"name":"hashdb"}],"output":{"name":"bool"}}],[11,"base_root","","return the storage root associated with this account.",26,{"inputs":[{"name":"account"}],"output":{"name":"h256"}}],[11,"storage_is_clean","","Determine whether there are any un-`commit()`-ed storage-setting operations.",26,{"inputs":[{"name":"account"}],"output":{"name":"bool"}}],[11,"storage_root","","return the storage root associated with this account or None if it has been altered via the overlay.",26,{"inputs":[{"name":"account"}],"output":{"name":"option"}}],[11,"recent_storage_root","","return the storage root associated with this account or None if it has been altered via the overlay.",26,{"inputs":[{"name":"account"}],"output":{"name":"h256"}}],[11,"storage_overlay","","return the storage overlay.",26,{"inputs":[{"name":"account"}],"output":{"name":"ref"}}],[11,"inc_nonce","","Increment the nonce of the account by one.",26,{"inputs":[{"name":"account"}],"output":null}],[11,"add_balance","","Increment the nonce of the account by one.",26,{"inputs":[{"name":"account"},{"name":"u256"}],"output":null}],[11,"sub_balance","","Increment the nonce of the account by one.",26,{"inputs":[{"name":"account"},{"name":"u256"}],"output":null}],[11,"commit_storage","","Commit the `storage_overlay` to the backing DB and update `storage_root`.",26,{"inputs":[{"name":"account"},{"name":"hashdb"}],"output":null}],[11,"commit_code","","Commit any unsaved code. `code_hash` will always return the hash of the `code_cache` after this.",26,{"inputs":[{"name":"account"},{"name":"hashdb"}],"output":null}],[11,"rlp","","Export to RLP.",26,{"inputs":[{"name":"account"}],"output":{"name":"bytes"}}],[11,"fmt","","",26,{"inputs":[{"name":"account"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"action_params","ethcore","Evm input params.",null,null],[3,"ActionParams","ethcore::action_params","Action (call/create) input params. Everything else should be specified in Externalities.",null,null],[12,"code_address","","Address of currently executed code.",27,null],[12,"address","","Receive address. Usually equal to code_address,\nexcept when called using CALLCODE.",27,null],[12,"sender","","Sender of current part of the transaction.",27,null],[12,"origin","","Transaction initiator.",27,null],[12,"gas","","Gas paid up front for transaction execution",27,null],[12,"gas_price","","Gas price.",27,null],[12,"value","","Transaction value.",27,null],[12,"code","","Code being executed.",27,null],[12,"data","","Input data.",27,null],[11,"fmt","","",27,{"inputs":[{"name":"actionparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"actionparams"}],"output":{"name":"actionparams"}}],[11,"new","","TODO [Gav Wood] Please document me",27,{"inputs":[{"name":"actionparams"}],"output":{"name":"actionparams"}}],[0,"header","ethcore","TODO [debris] Please document me",null,null],[3,"Header","ethcore::header","A block header.",null,null],[12,"parent_hash","","TODO [Gav Wood] Please document me",28,null],[12,"timestamp","","TODO [arkpar] Please document me",28,null],[12,"number","","TODO [debris] Please document me",28,null],[12,"author","","TODO [Gav Wood] Please document me",28,null],[12,"transactions_root","","TODO [debris] Please document me",28,null],[12,"uncles_hash","","TODO [debris] Please document me",28,null],[12,"extra_data","","TODO [Gav Wood] Please document me",28,null],[12,"state_root","","TODO [debris] Please document me",28,null],[12,"receipts_root","","TODO [debris] Please document me",28,null],[12,"log_bloom","","TODO [debris] Please document me",28,null],[12,"gas_used","","TODO [debris] Please document me",28,null],[12,"gas_limit","","TODO [Gav Wood] Please document me",28,null],[12,"difficulty","","TODO [debris] Please document me",28,null],[12,"seal","","TODO [arkpar] Please document me",28,null],[12,"hash","","TODO [arkpar] Please document me",28,null],[12,"bare_hash","","TODO [Gav Wood] Please document me",28,null],[6,"BlockNumber","","Type for Block number",null,null],[11,"clone","","",28,{"inputs":[{"name":"header"}],"output":{"name":"header"}}],[11,"fmt","","",28,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, default-valued, header.",28,{"inputs":[{"name":"header"}],"output":{"name":"header"}}],[11,"number","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"blocknumber"}}],[11,"timestamp","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"u64"}}],[11,"author","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"address"}}],[11,"extra_data","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"bytes"}}],[11,"state_root","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"receipts_root","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"gas_limit","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"u256"}}],[11,"difficulty","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"u256"}}],[11,"seal","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":{"name":"vec"}}],[11,"set_number","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"blocknumber"}],"output":null}],[11,"set_timestamp","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"u64"}],"output":null}],[11,"set_timestamp_now","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"}],"output":null}],[11,"set_author","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"address"}],"output":null}],[11,"set_extra_data","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"bytes"}],"output":null}],[11,"set_gas_used","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_difficulty","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_seal","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"vec"}],"output":null}],[11,"hash","","Get the hash of this header (sha3 of the RLP).",28,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"bare_hash","","Get the hash of the header excluding the seal",28,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"note_dirty","","Note that some fields have changed. Resets the memoised hash.",28,{"inputs":[{"name":"header"}],"output":null}],[11,"stream_rlp","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"rlpstream"},{"name":"seal"}],"output":null}],[11,"rlp","","TODO [Gav Wood] Please document me",28,{"inputs":[{"name":"header"},{"name":"seal"}],"output":{"name":"bytes"}}],[11,"rlp_sha3","","TODO [debris] Please document me",28,{"inputs":[{"name":"header"},{"name":"seal"}],"output":{"name":"h256"}}],[11,"decode","","",28,{"inputs":[{"name":"header"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"header"},{"name":"e"}],"output":null}],[0,"transaction","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"Transaction","ethcore::transaction","A set of information describing an externally-originating message call\nor contract creation operation.",null,null],[12,"nonce","","TODO [debris] Please document me",29,null],[12,"gas_price","","TODO [debris] Please document me",29,null],[12,"gas","","TODO [debris] Please document me",29,null],[12,"action","","TODO [debris] Please document me",29,null],[12,"value","","TODO [debris] Please document me",29,null],[12,"data","","TODO [Gav Wood] Please document me",29,null],[12,"v","","TODO [Gav Wood] Please document me",29,null],[12,"r","","TODO [Gav Wood] Please document me",29,null],[12,"s","","TODO [debris] Please document me",29,null],[4,"Action","","TODO [Gav Wood] Please document me",null,null],[13,"Create","","TODO [Gav Wood] Please document me",30,null],[13,"Call","","TODO [debris] Please document me",30,null],[11,"clone","","",30,{"inputs":[{"name":"action"}],"output":{"name":"action"}}],[11,"fmt","","",30,{"inputs":[{"name":"action"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"transaction"}],"output":{"name":"transaction"}}],[11,"fmt","","",29,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","TODO [Gav Wood] Please document me",29,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"new_call","","Create a new message-call transaction.",29,{"inputs":[{"name":"transaction"},{"name":"address"},{"name":"u256"},{"name":"bytes"},{"name":"u256"},{"name":"u256"},{"name":"u256"}],"output":{"name":"transaction"}}],[11,"new_create","","Create a new contract-creation transaction.",29,{"inputs":[{"name":"transaction"},{"name":"u256"},{"name":"bytes"},{"name":"u256"},{"name":"u256"},{"name":"u256"}],"output":{"name":"transaction"}}],[11,"nonce","","Get the nonce of the transaction.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"u256"}}],[11,"gas_price","","Get the gas price of the transaction.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"u256"}}],[11,"gas","","Get the gas of the transaction.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"u256"}}],[11,"action","","Get the action of the transaction (Create or Call).",29,{"inputs":[{"name":"transaction"}],"output":{"name":"action"}}],[11,"value","","Get the value of the transaction.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"u256"}}],[11,"data","","Get the data of the transaction.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"bytes"}}],[11,"rlp_append_opt","","Append object into RLP stream, optionally with or without the signature.",29,{"inputs":[{"name":"transaction"},{"name":"rlpstream"},{"name":"seal"}],"output":null}],[11,"rlp_bytes_opt","","Get the RLP serialisation of the object, optionally with or without the signature.",29,{"inputs":[{"name":"transaction"},{"name":"seal"}],"output":{"name":"bytes"}}],[11,"from_json","","",29,{"inputs":[{"name":"transaction"},{"name":"json"}],"output":{"name":"transaction"}}],[11,"rlp_append","","",29,{"inputs":[{"name":"transaction"},{"name":"rlpstream"}],"output":null}],[11,"hash","","Get the hash of this header (sha3 of the RLP).",29,{"inputs":[{"name":"transaction"}],"output":{"name":"h256"}}],[11,"note_dirty","","Note that some fields have changed. Resets the memoised hash.",29,{"inputs":[{"name":"transaction"}],"output":null}],[11,"standard_v","","0 is `v` is 27, 1 if 28, and 4 otherwise.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"u8"}}],[11,"signature","","Construct a signature object from the sig.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"signature"}}],[11,"message_hash","","The message hash of the transaction.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"h256"}}],[11,"sender","","Returns transaction sender.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"result"}}],[11,"sign","","Signs the transaction as coming from `sender`.",29,{"inputs":[{"name":"transaction"},{"name":"secret"}],"output":null}],[11,"signed","","Signs the transaction as coming from `sender`.",29,{"inputs":[{"name":"transaction"},{"name":"secret"}],"output":{"name":"transaction"}}],[11,"gas_required_for","","Get the transaction cost in gas for the given params.",29,null],[11,"gas_required","","Get the transaction cost in gas for this transaction.",29,{"inputs":[{"name":"transaction"},{"name":"schedule"}],"output":{"name":"u64"}}],[11,"check_low_s","","Checks whether the signature has a low 's' value.",29,{"inputs":[{"name":"transaction"}],"output":{"name":"result"}}],[11,"validate","","Do basic validation, checking for valid signature and minimum gas,",29,{"inputs":[{"name":"transaction"},{"name":"schedule"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"action"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"transaction"},{"name":"d"}],"output":{"name":"result"}}],[0,"receipt","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"Receipt","ethcore::receipt","Information describing execution of a transaction.",null,null],[12,"state_root","","TODO [Gav Wood] Please document me",31,null],[12,"gas_used","","TODO [Gav Wood] Please document me",31,null],[12,"log_bloom","","TODO [Gav Wood] Please document me",31,null],[12,"logs","","TODO [Gav Wood] Please document me",31,null],[11,"fmt","","",31,{"inputs":[{"name":"receipt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","TODO [Gav Wood] Please document me",31,{"inputs":[{"name":"receipt"},{"name":"h256"},{"name":"u256"},{"name":"vec"}],"output":{"name":"receipt"}}],[11,"rlp_append","","",31,{"inputs":[{"name":"receipt"},{"name":"rlpstream"}],"output":null}],[0,"null_engine","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"NullEngine","ethcore::null_engine","An engine which does not provide any consensus mechanism.",null,null],[11,"new_boxed","","TODO [Tomusdrw] Please document me",32,{"inputs":[{"name":"nullengine"},{"name":"spec"}],"output":{"name":"box"}}],[11,"vm_factory","","",32,{"inputs":[{"name":"nullengine"}],"output":{"name":"factory"}}],[11,"name","","",32,{"inputs":[{"name":"nullengine"}],"output":{"name":"str"}}],[11,"spec","","",32,{"inputs":[{"name":"nullengine"}],"output":{"name":"spec"}}],[11,"schedule","","",32,{"inputs":[{"name":"nullengine"},{"name":"envinfo"}],"output":{"name":"schedule"}}],[0,"builtin","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"Builtin","ethcore::builtin","Definition of a contract whose implementation is built-in.",null,null],[12,"cost","","The gas cost of running this built-in for the given size of input data.",33,null],[12,"execute","","Run this built-in function with the input being the first argument and the output\nbeing placed into the second.",33,null],[5,"copy_to","","TODO [Gav Wood] Please document me",null,null],[5,"new_builtin_exec","","Create a new builtin executor according to `name`.\nTODO: turn in to a factory with dynamic registration.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"builtin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new object from components.",33,{"inputs":[{"name":"builtin"},{"name":"box"},{"name":"box"}],"output":{"name":"builtin"}}],[11,"from_named_linear","","Create a new object from a builtin-function name with a linear cost associated with input size.",33,{"inputs":[{"name":"builtin"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"cost","","Simple forwarder for cost.",33,{"inputs":[{"name":"builtin"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"execute","","Simple forwarder for execute.",33,null],[11,"from_json","","Create a builtin from JSON.",33,{"inputs":[{"name":"builtin"},{"name":"json"}],"output":{"name":"option"}}],[0,"spec","ethcore","TODO [debris] Please document me",null,null],[3,"GenesisAccount","ethcore::spec","Genesis account data. Does no thave a DB overlay cache",null,null],[3,"Spec","","Parameters for a block chain; includes both those intrinsic to the design of the\nchain and those to be interpreted by the active chain engine.",null,null],[12,"name","","TODO [Gav Wood] Please document me",34,null],[12,"engine_name","","TODO [Gav Wood] Please document me",34,null],[12,"engine_params","","TODO [Gav Wood] Please document me",34,null],[12,"builtins","","TODO [Gav Wood] Please document me",34,null],[12,"parent_hash","","TODO [Gav Wood] Please document me",34,null],[12,"author","","TODO [Gav Wood] Please document me",34,null],[12,"difficulty","","TODO [Gav Wood] Please document me",34,null],[12,"gas_limit","","TODO [Gav Wood] Please document me",34,null],[12,"gas_used","","TODO [Gav Wood] Please document me",34,null],[12,"timestamp","","TODO [Gav Wood] Please document me",34,null],[12,"extra_data","","TODO [arkpar] Please document me",34,null],[12,"genesis_state","","TODO [Gav Wood] Please document me",34,null],[12,"seal_fields","","TODO [Gav Wood] Please document me",34,null],[12,"seal_rlp","","TODO [Gav Wood] Please document me",34,null],[5,"gzip64res_to_json","","Converts file from base64 gzipped bytes to json",null,null],[11,"fmt","","",35,{"inputs":[{"name":"genesisaccount"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rlp","","TODO [arkpar] Please document me",35,{"inputs":[{"name":"genesisaccount"}],"output":{"name":"bytes"}}],[11,"fmt","","",34,{"inputs":[{"name":"spec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_engine","","Convert this object into a boxed Engine of the right underlying type.",34,{"inputs":[{"name":"spec"}],"output":{"name":"result"}}],[11,"state_root","","Return the state root for the genesis state, memoising accordingly.",34,{"inputs":[{"name":"spec"}],"output":{"name":"h256"}}],[11,"genesis_header","","TODO [Gav Wood] Please document me",34,{"inputs":[{"name":"spec"}],"output":{"name":"header"}}],[11,"genesis_block","","Compose the genesis block for this chain.",34,{"inputs":[{"name":"spec"}],"output":{"name":"bytes"}}],[11,"from_json","","Loads a chain-specification from a json data structure",34,{"inputs":[{"name":"spec"},{"name":"json"}],"output":{"name":"spec"}}],[11,"ensure_db_good","","Ensure that the given state DB has the trie nodes in for the genesis state.",34,{"inputs":[{"name":"spec"},{"name":"hashdb"}],"output":{"name":"bool"}}],[11,"from_json_utf8","","Create a new Spec from a JSON UTF-8 data resource `data`.",34,null],[11,"from_json_str","","Create a new Spec from a JSON string.",34,{"inputs":[{"name":"spec"},{"name":"str"}],"output":{"name":"spec"}}],[11,"new_test","","Create a new Spec which conforms to the Morden chain except that it's a NullEngine consensus.",34,{"inputs":[{"name":"spec"}],"output":{"name":"spec"}}],[0,"views","ethcore","Block oriented views onto rlp.",null,null],[3,"TransactionView","ethcore::views","View onto transaction rlp.",null,null],[3,"AccountView","","View onto transaction rlp.",null,null],[3,"BlockView","","View onto block rlp.",null,null],[3,"HeaderView","","View onto block header rlp.",null,null],[11,"new","","Creates new view onto block from raw bytes.",36,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",36,{"inputs":[{"name":"transactionview"},{"name":"rlp"}],"output":{"name":"transactionview"}}],[11,"rlp","","Return reference to underlaying rlp.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"rlp"}}],[11,"nonce","","Get the nonce field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"gas_price","","Get the gas_price field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"gas","","Get the gas field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"value","","Get the value field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"data","","Get the data field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"bytes"}}],[11,"v","","Get the v field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"u8"}}],[11,"r","","Get the r field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"s","","Get the s field of the transaction.",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"sha3","","",36,{"inputs":[{"name":"transactionview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto block from raw bytes.",37,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",37,{"inputs":[{"name":"accountview"},{"name":"rlp"}],"output":{"name":"accountview"}}],[11,"rlp","","Return reference to underlaying rlp.",37,{"inputs":[{"name":"accountview"}],"output":{"name":"rlp"}}],[11,"nonce","","Get the nonce field of the transaction.",37,{"inputs":[{"name":"accountview"}],"output":{"name":"u256"}}],[11,"balance","","Get the gas_price field of the transaction.",37,{"inputs":[{"name":"accountview"}],"output":{"name":"u256"}}],[11,"storage_root","","Get the gas field of the transaction.",37,{"inputs":[{"name":"accountview"}],"output":{"name":"h256"}}],[11,"code_hash","","Get the value field of the transaction.",37,{"inputs":[{"name":"accountview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto block from raw bytes.",38,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",38,{"inputs":[{"name":"blockview"},{"name":"rlp"}],"output":{"name":"blockview"}}],[11,"rlp","","Return reference to underlaying rlp.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"rlp"}}],[11,"header","","Create new Header object from header rlp.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"header"}}],[11,"header_view","","Create new header view obto block head rlp.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"headerview"}}],[11,"transactions","","Return List of transactions in given block.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transaction_views","","Return List of transactions in given block.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transaction_hashes","","Return transaction hashes.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncles","","Return list of uncles of given block.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncle_views","","Return List of transactions in given block.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncle_hashes","","Return list of uncle hashes of given block.",38,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"sha3","","",38,{"inputs":[{"name":"blockview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto header from raw bytes.",39,null],[11,"new_from_rlp","","Creates new view onto header from rlp.",39,{"inputs":[{"name":"headerview"},{"name":"rlp"}],"output":{"name":"headerview"}}],[11,"rlp","","Returns raw rlp.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"rlp"}}],[11,"parent_hash","","Returns parent hash.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"uncles_hash","","Returns uncles hash.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"author","","Returns author.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"address"}}],[11,"state_root","","Returns state root.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"transactions_root","","Returns transactions root.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"receipts_root","","Returns block receipts root.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"log_bloom","","Returns block log bloom.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"h2048"}}],[11,"difficulty","","Returns block difficulty.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"number","","Returns block number.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"blocknumber"}}],[11,"gas_limit","","Returns block gas limit.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"gas_used","","Returns block gas used.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"timestamp","","Returns timestamp.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"u64"}}],[11,"extra_data","","Returns block extra data.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"bytes"}}],[11,"seal","","Returns block seal.",39,{"inputs":[{"name":"headerview"}],"output":{"name":"vec"}}],[11,"sha3","","",39,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[0,"blockchain","ethcore","Fast access to blockchain data.",null,null],[3,"TreeRoute","ethcore::blockchain","Represents a tree route between `from` block and `to` block:",null,null],[12,"blocks","","TODO [debris] Please document me",40,null],[12,"ancestor","","TODO [debris] Please document me",40,null],[12,"index","","TODO [debris] Please document me",40,null],[3,"CacheSize","","Represents blockchain's in-memory cache size in bytes.",null,null],[12,"blocks","","TODO [debris] Please document me",41,null],[12,"block_details","","TODO [debris] Please document me",41,null],[12,"transaction_addresses","","TODO [debris] Please document me",41,null],[12,"block_logs","","TODO [debris] Please document me",41,null],[12,"blocks_blooms","","TODO [debris] Please document me",41,null],[3,"BlockChain","","Structure providing fast access to blockchain data.",null,null],[8,"BlockProvider","","Interface for querying blocks by hash and by number.",null,null],[10,"is_known","","Returns true if the given block is known\n(though not necessarily a part of the canon chain).",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"bool"}}],[10,"block","","Get raw block data",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_details","","Get the familial details concerning a block.",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_hash","","Get the hash of given block's number.",42,{"inputs":[{"name":"blockprovider"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"block_header","","Get the partial-header of a block.",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"uncles","","Get a list of uncles for a given block.\nReturns None if block deos not exist.",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"uncle_hashes","","Get a list of uncle hashes for a given block.\nReturns None if block does not exist.",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_number","","Get the number of given block's hash.",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"transactions","","Get a list of transactions for a given block.\nReturns None if block deos not exist.",42,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"genesis_hash","","Returns reference to genesis hash.",42,{"inputs":[{"name":"blockprovider"}],"output":{"name":"h256"}}],[11,"fmt","","",41,{"inputs":[{"name":"cachesize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_known","","Returns true if the given block is known\n(though not necessarily a part of the canon chain).",43,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"block","","Get raw block data",43,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_details","","Get the familial details concerning a block.",43,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_hash","","Get the hash of given block's number.",43,{"inputs":[{"name":"blockchain"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"new","","Create new instance of blockchain from given Genesis",43,null],[11,"ensure_good","","Ensure that the best block does indeed have a state_root in the state DB.\nIf it doesn't, then rewind down until we find one that does and delete data to ensure that\nlater blocks will be reimported. ",43,{"inputs":[{"name":"blockchain"},{"name":"journaldb"}],"output":null}],[11,"tree_route","","Returns a tree route between `from` and `to`, which is a tuple of:",43,{"inputs":[{"name":"blockchain"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[11,"insert_block","","Inserts the block into backing cache database.\nExpects the block to be valid and already verified.\nIf the block is already known, does nothing.",43,null],[11,"is_known_transaction","","Returns true if transaction is known.",43,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"best_block_hash","","Get best block hash.",43,{"inputs":[{"name":"blockchain"}],"output":{"name":"h256"}}],[11,"best_block_number","","Get best block number.",43,{"inputs":[{"name":"blockchain"}],"output":{"name":"blocknumber"}}],[11,"best_block_total_difficulty","","Get best block total difficulty.",43,{"inputs":[{"name":"blockchain"}],"output":{"name":"u256"}}],[11,"log_blooms","","Get the transactions' log blooms of a block.",43,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"option"}}],[11,"cache_size","","Get current cache size.",43,{"inputs":[{"name":"blockchain"}],"output":{"name":"cachesize"}}],[11,"squeeze_to_fit","","Tries to squeeze the cache if its too big.",43,{"inputs":[{"name":"blockchain"},{"name":"cachesize"}],"output":null}],[11,"collect_garbage","","Ticks our cache system and throws out any old data.",43,{"inputs":[{"name":"blockchain"},{"name":"bool"}],"output":null}],[0,"extras","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"BlockDetails","ethcore::extras","Familial details concerning a block",null,null],[12,"number","","TODO [debris] Please document me",44,null],[12,"total_difficulty","","TODO [debris] Please document me",44,null],[12,"parent","","TODO [debris] Please document me",44,null],[12,"children","","TODO [debris] Please document me",44,null],[3,"BlockLogBlooms","","Log blooms of certain block",null,null],[12,"blooms","","TODO [debris] Please document me",45,null],[3,"BlocksBlooms","","Neighboring log blooms on certain level",null,null],[12,"blooms","","TODO [debris] Please document me",46,null],[3,"TransactionAddress","","Represents address of certain transaction within block",null,null],[12,"block_hash","","TODO [debris] Please document me",47,null],[12,"index","","TODO [debris] Please document me",47,null],[4,"ExtrasIndex","","Represents index of extra data in database",null,null],[13,"BlockDetails","","TODO [debris] Please document me",48,null],[13,"BlockHash","","TODO [debris] Please document me",48,null],[13,"TransactionAddress","","TODO [debris] Please document me",48,null],[13,"BlockLogBlooms","","TODO [debris] Please document me",48,null],[13,"BlocksBlooms","","TODO [debris] Please document me",48,null],[8,"ExtrasWritable","","trait used to write Extras data to db",null,null],[10,"put_extras","","TODO [debris] Please document me",49,{"inputs":[{"name":"extraswritable"},{"name":"k"},{"name":"t"}],"output":null}],[8,"ExtrasReadable","","trait used to read Extras data from db",null,null],[10,"get_extras","","TODO [debris] Please document me",50,{"inputs":[{"name":"extrasreadable"},{"name":"k"}],"output":{"name":"option"}}],[10,"extras_exists","","TODO [debris] Please document me",50,{"inputs":[{"name":"extrasreadable"},{"name":"k"}],"output":{"name":"bool"}}],[8,"ExtrasSliceConvertable","","Implementations should convert arbitrary type to database key slice",null,null],[10,"to_extras_slice","","TODO [Gav Wood] Please document me",51,{"inputs":[{"name":"extrassliceconvertable"},{"name":"extrasindex"}],"output":{"name":"h264"}}],[11,"as_h256","","TODO [debris] Please document me",51,{"inputs":[{"name":"extrassliceconvertable"}],"output":{"name":"option"}}],[8,"ExtrasIndexable","","Types implementing this trait can be indexed in extras database",null,null],[10,"extras_index","","TODO [debris] Please document me",52,{"inputs":[{"name":"extrasindexable"}],"output":{"name":"extrasindex"}}],[11,"clone","","",48,{"inputs":[{"name":"extrasindex"}],"output":{"name":"extrasindex"}}],[11,"eq","","",48,{"inputs":[{"name":"extrasindex"},{"name":"extrasindex"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"extrasindex"},{"name":"extrasindex"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"extrasindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_extras","rocksdb::rocksdb","",53,{"inputs":[{"name":"db"},{"name":"k"}],"output":{"name":"option"}}],[11,"extras_exists","","",53,{"inputs":[{"name":"db"},{"name":"k"}],"output":{"name":"bool"}}],[11,"to_extras_slice","ethcore_util::hash","",54,{"inputs":[{"name":"h256"},{"name":"extrasindex"}],"output":{"name":"h264"}}],[11,"as_h256","","",54,{"inputs":[{"name":"h256"}],"output":{"name":"option"}}],[11,"to_extras_slice","ethcore_util::uint","",55,{"inputs":[{"name":"u256"},{"name":"extrasindex"}],"output":{"name":"h264"}}],[11,"to_extras_slice","ethcore::extras","",56,{"inputs":[{"name":"blocknumber"},{"name":"extrasindex"}],"output":{"name":"h264"}}],[11,"extras_index","ethcore_util::hash","",54,{"inputs":[{"name":"h256"}],"output":{"name":"extrasindex"}}],[11,"clone","ethcore::extras","",44,{"inputs":[{"name":"blockdetails"}],"output":{"name":"blockdetails"}}],[11,"fmt","","",44,{"inputs":[{"name":"blockdetails"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extras_index","","",44,{"inputs":[{"name":"blockdetails"}],"output":{"name":"extrasindex"}}],[11,"heap_size_of_children","","",44,{"inputs":[{"name":"blockdetails"}],"output":{"name":"usize"}}],[11,"decode","","",44,{"inputs":[{"name":"blockdetails"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"blockdetails"},{"name":"e"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"blocklogblooms"}],"output":{"name":"blocklogblooms"}}],[11,"extras_index","","",45,{"inputs":[{"name":"blocklogblooms"}],"output":{"name":"extrasindex"}}],[11,"heap_size_of_children","","",45,{"inputs":[{"name":"blocklogblooms"}],"output":{"name":"usize"}}],[11,"decode","","",45,{"inputs":[{"name":"blocklogblooms"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"blocklogblooms"},{"name":"e"}],"output":null}],[11,"extras_index","","",46,{"inputs":[{"name":"blocksblooms"}],"output":{"name":"extrasindex"}}],[11,"heap_size_of_children","","",46,{"inputs":[{"name":"blocksblooms"}],"output":{"name":"usize"}}],[11,"clone","","",46,{"inputs":[{"name":"blocksblooms"}],"output":{"name":"self"}}],[11,"decode","","",46,{"inputs":[{"name":"blocksblooms"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"blocksblooms"},{"name":"e"}],"output":null}],[11,"clone","","",47,{"inputs":[{"name":"transactionaddress"}],"output":{"name":"transactionaddress"}}],[11,"extras_index","","",47,{"inputs":[{"name":"transactionaddress"}],"output":{"name":"extrasindex"}}],[11,"heap_size_of_children","","",47,{"inputs":[{"name":"transactionaddress"}],"output":{"name":"usize"}}],[11,"decode","","",47,{"inputs":[{"name":"transactionaddress"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"transactionaddress"},{"name":"e"}],"output":null}],[0,"substate","ethcore","TODO [arkpar] Please document me",null,null],[3,"Substate","ethcore::substate","State changes which should be applied in finalize,\nafter transaction is fully executed.",null,null],[12,"suicides","","Any accounts that have suicided.",57,null],[12,"logs","","Any logs.",57,null],[12,"sstore_clears_count","","Refund counter of SSTORE nonzero -> zero.",57,null],[12,"contracts_created","","Created contracts.",57,null],[11,"fmt","","",57,{"inputs":[{"name":"substate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new substate.",57,{"inputs":[{"name":"substate"}],"output":{"name":"self"}}],[11,"accrue","","TODO [Gav Wood] Please document me",57,{"inputs":[{"name":"substate"},{"name":"substate"}],"output":null}],[0,"service","ethcore","TODO [Gav Wood] Please document me",null,null],[3,"ClientService","ethcore::service","Client service setup. Creates and registers client and network services with the IO subsystem.",null,null],[11,"start","","Start the service in a separate thread.",58,{"inputs":[{"name":"clientservice"},{"name":"spec"}],"output":{"name":"result"}}],[11,"io","","TODO [arkpar] Please document me",58,{"inputs":[{"name":"clientservice"}],"output":{"name":"ioservice"}}],[11,"client","","TODO [arkpar] Please document me",58,{"inputs":[{"name":"clientservice"}],"output":{"name":"arc"}}],[0,"executive","ethcore","Transaction Execution environment.",null,null],[3,"Executed","ethcore::executive","Transaction execution receipt.",null,null],[12,"gas","","Gas paid up front for execution of transaction.",59,null],[12,"gas_used","","Gas used during execution of transaction.",59,null],[12,"refunded","","Gas refunded after the execution of transaction.\nTo get gas that was required up front, add `refunded` and `gas_used`.",59,null],[12,"cumulative_gas_used","","Cumulative gas used in current block so far.",59,null],[12,"logs","","Vector of logs generated by transaction.",59,null],[12,"contracts_created","","Addresses of contracts created during execution of transaction.\nOrdered from earliest creation.",59,null],[3,"Executive","","Transaction executor.",null,null],[5,"contract_address","","Returns new address created from address and given nonce.",null,{"inputs":[{"name":"address"},{"name":"u256"}],"output":{"name":"address"}}],[6,"ExecutionResult","","Transaction execution result.",null,null],[11,"fmt","","",59,{"inputs":[{"name":"executed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Basic constructor.",60,{"inputs":[{"name":"executive"},{"name":"state"},{"name":"envinfo"},{"name":"engine"}],"output":{"name":"self"}}],[11,"from_parent","","Populates executive from parent properties. Increments executive depth.",60,{"inputs":[{"name":"executive"},{"name":"state"},{"name":"envinfo"},{"name":"engine"},{"name":"usize"}],"output":{"name":"self"}}],[11,"as_externalities","","Creates `Externalities` from `Executive`.",60,{"inputs":[{"name":"executive"},{"name":"origininfo"},{"name":"substate"},{"name":"outputpolicy"}],"output":{"name":"externalities"}}],[11,"transact","","This funtion should be used to execute transaction.",60,{"inputs":[{"name":"executive"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"call","","Calls contract function with given contract params.\nNOTE. It does not finalize the transaction (doesn't do refunds, nor suicides).\nModifies the substate and the output.\nReturns either gas_left or `evm::Error`.",60,{"inputs":[{"name":"executive"},{"name":"actionparams"},{"name":"substate"},{"name":"bytesref"}],"output":{"name":"result"}}],[11,"create","","Creates contract with given contract params.\nNOTE. It does not finalize the transaction (doesn't do refunds, nor suicides).\nModifies the substate.",60,{"inputs":[{"name":"executive"},{"name":"actionparams"},{"name":"substate"}],"output":{"name":"result"}}],[0,"externalities","ethcore","Transaction Execution environment.",null,null],[3,"OriginInfo","ethcore::externalities","Transaction properties that externalities need to know about.",null,null],[3,"Externalities","","Implementation of evm Externalities.",null,null],[4,"OutputPolicy","","Policy for handling output data on `RETURN` opcode.",null,null],[13,"Return","","Return reference to fixed sized output.\nUsed for message calls.",61,null],[13,"InitContract","","Init new contract as soon as `RETURN` is called.",61,null],[11,"from","","Populates origin info from action params.",62,{"inputs":[{"name":"origininfo"},{"name":"actionparams"}],"output":{"name":"self"}}],[11,"new","","Basic `Externalities` constructor.",63,{"inputs":[{"name":"externalities"},{"name":"state"},{"name":"envinfo"},{"name":"engine"},{"name":"usize"},{"name":"origininfo"},{"name":"substate"},{"name":"outputpolicy"}],"output":{"name":"self"}}],[11,"storage_at","","",63,{"inputs":[{"name":"externalities"},{"name":"h256"}],"output":{"name":"h256"}}],[11,"set_storage","","",63,{"inputs":[{"name":"externalities"},{"name":"h256"},{"name":"h256"}],"output":null}],[11,"exists","","",63,{"inputs":[{"name":"externalities"},{"name":"address"}],"output":{"name":"bool"}}],[11,"balance","","",63,{"inputs":[{"name":"externalities"},{"name":"address"}],"output":{"name":"u256"}}],[11,"blockhash","","",63,{"inputs":[{"name":"externalities"},{"name":"u256"}],"output":{"name":"h256"}}],[11,"create","","",63,null],[11,"call","","",63,null],[11,"extcode","","",63,{"inputs":[{"name":"externalities"},{"name":"address"}],"output":{"name":"bytes"}}],[11,"ret","","",63,null],[11,"log","","",63,null],[11,"suicide","","",63,{"inputs":[{"name":"externalities"},{"name":"address"}],"output":null}],[11,"schedule","","",63,{"inputs":[{"name":"externalities"}],"output":{"name":"schedule"}}],[11,"env_info","","",63,{"inputs":[{"name":"externalities"}],"output":{"name":"envinfo"}}],[11,"depth","","",63,{"inputs":[{"name":"externalities"}],"output":{"name":"usize"}}],[11,"inc_sstore_clears","","",63,{"inputs":[{"name":"externalities"}],"output":null}],[0,"client","ethcore","TODO [arkpar] Please document me",null,null],[3,"BlockChainInfo","ethcore::client","Information about the blockchain gthered together.",null,null],[12,"total_difficulty","","Blockchain difficulty.",64,null],[12,"pending_total_difficulty","","Block queue difficulty.",64,null],[12,"genesis_hash","","Genesis block hash.",64,null],[12,"best_block_hash","","Best blockchain block hash.",64,null],[12,"best_block_number","","Best blockchain block number.",64,null],[3,"BlockQueueStatus","","Block queue status",null,null],[12,"full","","TODO [arkpar] Please document me",65,null],[3,"ClientReport","","TODO [Gav Wood] Please document me",null,null],[12,"blocks_imported","","TODO [Gav Wood] Please document me",66,null],[12,"transactions_applied","","TODO [Gav Wood] Please document me",66,null],[12,"gas_processed","","TODO [Gav Wood] Please document me",66,null],[3,"Client","","Blockchain database client backed by a persistent database. Owns and manages a blockchain and a block queue.",null,null],[4,"BlockStatus","","General block status",null,null],[13,"InChain","","Part of the blockchain.",67,null],[13,"Queued","","Queued for import.",67,null],[13,"Bad","","Known as bad.",67,null],[13,"Unknown","","Unknown.",67,null],[6,"TreeRoute","","TODO [arkpar] Please document me",null,null],[8,"BlockChainClient","","Blockchain database client. Owns and manages a blockchain and a block queue.",null,null],[10,"block_header","","Get raw block header data by block header hash.",68,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_body","","Get raw block body data by block header hash.\nBlock body is an RLP list of two items: uncles and transactions.",68,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block","","Get raw block data by block header hash.",68,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_status","","Get block status by block header hash.",68,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"blockstatus"}}],[10,"block_header_at","","Get raw block header data by block number.",68,{"inputs":[{"name":"blockchainclient"},{"name":"blocknumber"}],"output":{"name":"option"}}],[10,"block_body_at","","Get raw block body data by block number.\nBlock body is an RLP list of two items: uncles and transactions.",68,{"inputs":[{"name":"blockchainclient"},{"name":"blocknumber"}],"output":{"name":"option"}}],[10,"block_at","","Get raw block data by block number.",68,{"inputs":[{"name":"blockchainclient"},{"name":"blocknumber"}],"output":{"name":"option"}}],[10,"block_status_at","","Get block status by block number.",68,{"inputs":[{"name":"blockchainclient"},{"name":"blocknumber"}],"output":{"name":"blockstatus"}}],[10,"tree_route","","Get a tree route between `from` and `to`.\nSee `BlockChain::tree_route`.",68,{"inputs":[{"name":"blockchainclient"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[10,"state_data","","Get latest state node",68,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_receipts","","Get raw block receipts data by block header hash.",68,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"import_block","","Import a block into the blockchain.",68,{"inputs":[{"name":"blockchainclient"},{"name":"bytes"}],"output":{"name":"importresult"}}],[10,"queue_status","","Get block queue information.",68,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"blockqueuestatus"}}],[10,"clear_queue","","Clear block queue and abort all import activity.",68,{"inputs":[{"name":"blockchainclient"}],"output":null}],[10,"chain_info","","Get blockchain information.",68,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"blockchaininfo"}}],[11,"fmt","","",67,{"inputs":[{"name":"blockstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"blockchaininfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"blockchaininfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"blockqueuestatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"clientreport"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"clientreport"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"clientreport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"clientreport"}],"output":{"name":"clientreport"}}],[11,"default","","",66,{"inputs":[{"name":"clientreport"}],"output":{"name":"clientreport"}}],[11,"accrue_block","","TODO [Gav Wood] Please document me",66,{"inputs":[{"name":"clientreport"},{"name":"preverifiedblock"}],"output":null}],[11,"new","","Create a new client with given spec and DB path.",69,{"inputs":[{"name":"client"},{"name":"spec"},{"name":"path"},{"name":"iochannel"}],"output":{"name":"result"}}],[11,"import_verified_blocks","","This is triggered by a message coming from a block queue when the block is ready for insertion",69,{"inputs":[{"name":"client"}],"output":null}],[11,"cache_info","","Get info on the cache.",69,{"inputs":[{"name":"client"}],"output":{"name":"cachesize"}}],[11,"report","","Get the report.",69,{"inputs":[{"name":"client"}],"output":{"name":"clientreport"}}],[11,"tick","","Tick the client.",69,{"inputs":[{"name":"client"}],"output":null}],[11,"block_header","","",69,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_body","","",69,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block","","",69,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_status","","",69,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"blockstatus"}}],[11,"block_header_at","","",69,{"inputs":[{"name":"client"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"block_body_at","","",69,{"inputs":[{"name":"client"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"block_at","","",69,{"inputs":[{"name":"client"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"block_status_at","","",69,{"inputs":[{"name":"client"},{"name":"blocknumber"}],"output":{"name":"blockstatus"}}],[11,"tree_route","","",69,{"inputs":[{"name":"client"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[11,"state_data","","",69,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_receipts","","",69,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"import_block","","",69,{"inputs":[{"name":"client"},{"name":"bytes"}],"output":{"name":"importresult"}}],[11,"queue_status","","",69,{"inputs":[{"name":"client"}],"output":{"name":"blockqueuestatus"}}],[11,"clear_queue","","",69,{"inputs":[{"name":"client"}],"output":null}],[11,"chain_info","","",69,{"inputs":[{"name":"client"}],"output":{"name":"blockchaininfo"}}],[0,"sync","ethcore","TODO [arkpar] Please document me",null,null],[3,"EthSync","ethcore::sync","Ethereum network protocol handler",null,null],[3,"SyncStatus","","Syncing status and statistics",null,null],[12,"state","","State",70,null],[12,"protocol_version","","Syncing protocol version. That's the maximum protocol version we connect to.",70,null],[12,"start_block_number","","BlockChain height for the moment the sync started.",70,null],[12,"last_imported_block_number","","Last fully downloaded and imported block number.",70,null],[12,"highest_block_number","","Highest block number in the download queue.",70,null],[12,"blocks_total","","Total number of blocks for the sync process.",70,null],[12,"blocks_received","","Number of blocks downloaded so far.",70,null],[4,"SyncMessage","","Message type for external events",null,null],[13,"NewChainBlock","","New block has been imported into the blockchain",71,null],[13,"BlockVerified","","A block is ready",71,null],[6,"NetSyncMessage","","TODO [arkpar] Please document me",null,null],[11,"register","","Creates and register protocol with the network service",72,{"inputs":[{"name":"ethsync"},{"name":"networkservice"},{"name":"arc"}],"output":null}],[11,"status","","Get sync status",72,{"inputs":[{"name":"ethsync"}],"output":{"name":"syncstatus"}}],[11,"stop","","Stop sync",72,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"restart","","Restart sync",72,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"initialize","","",72,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"read","","",72,null],[11,"connected","","",72,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"disconnected","","",72,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"timeout","","",72,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"timertoken"}],"output":null}],[11,"message","","",72,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"syncmessage"}],"output":null}],[0,"block","ethcore","TODO [arkpar] Please document me",null,null],[3,"Entry","ethcore::block","A transaction/receipt execution entry.",null,null],[3,"Block","","Internal type for a block's common elements.",null,null],[3,"BlockRefMut","","A set of references to `Block` fields that are publicly accessible.",null,null],[12,"header","","TODO [Gav Wood] Please document me",73,null],[12,"state","","TODO [Gav Wood] Please document me",73,null],[12,"archive","","TODO [Gav Wood] Please document me",73,null],[12,"uncles","","TODO [Gav Wood] Please document me",73,null],[3,"OpenBlock","","Block that is ready for transactions to be added.",null,null],[3,"ClosedBlock","","Just like OpenBlock, except that we've applied `Engine::on_close_block`, finished up the non-seal header fields,\nand collected the uncles.",null,null],[3,"SealedBlock","","A block that has a valid seal.",null,null],[5,"enact","","Enact the block given by block header, transactions and uncles",null,null],[5,"enact_bytes","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header",null,null],[5,"enact_verified","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header",null,{"inputs":[{"name":"preverifiedblock"},{"name":"engine"},{"name":"journaldb"},{"name":"header"},{"name":"lasthashes"}],"output":{"name":"result"}}],[5,"enact_and_seal","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header. Seal the block aferwards",null,null],[8,"IsBlock","","Trait for a object that is_a `Block`.",null,null],[10,"block","","Get the block associated with this object.",74,{"inputs":[{"name":"isblock"}],"output":{"name":"block"}}],[11,"header","","Get the header associated with this object's block.",74,{"inputs":[{"name":"isblock"}],"output":{"name":"header"}}],[11,"state","","Get the final state associated with this object's block.",74,{"inputs":[{"name":"isblock"}],"output":{"name":"state"}}],[11,"archive","","Get all information on transactions in this block.",74,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"uncles","","Get all uncles in this block.",74,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"fields","","Get a structure containing individual references to all public fields.",75,{"inputs":[{"name":"block"}],"output":{"name":"blockrefmut"}}],[11,"block","","",75,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"new","","Create a new OpenBlock ready for transaction pushing.",76,{"inputs":[{"name":"openblock"},{"name":"engine"},{"name":"journaldb"},{"name":"header"},{"name":"lasthashes"},{"name":"address"},{"name":"bytes"}],"output":{"name":"openblock"}}],[11,"set_author","","Alter the author for the block.",76,{"inputs":[{"name":"openblock"},{"name":"address"}],"output":null}],[11,"set_timestamp","","Alter the timestamp of the block.",76,{"inputs":[{"name":"openblock"},{"name":"u64"}],"output":null}],[11,"set_difficulty","","Alter the difficulty for the block.",76,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","Alter the gas limit for the block.",76,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_gas_used","","Alter the gas limit for the block.",76,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_extra_data","","Alter the extra_data for the block.",76,{"inputs":[{"name":"openblock"},{"name":"bytes"}],"output":{"name":"result"}}],[11,"push_uncle","","Add an uncle to the block, if possible.",76,{"inputs":[{"name":"openblock"},{"name":"header"}],"output":{"name":"result"}}],[11,"env_info","","Get the environment info concerning this block.",76,{"inputs":[{"name":"openblock"}],"output":{"name":"envinfo"}}],[11,"push_transaction","","Push a transaction into the block.",76,{"inputs":[{"name":"openblock"},{"name":"transaction"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","Turn this into a `ClosedBlock`. A BlockChain must be provided in order to figure out the uncles.",76,{"inputs":[{"name":"openblock"}],"output":{"name":"closedblock"}}],[11,"block","","",76,{"inputs":[{"name":"openblock"}],"output":{"name":"block"}}],[11,"block","","",77,{"inputs":[{"name":"closedblock"}],"output":{"name":"block"}}],[11,"hash","","Get the hash of the header without seal arguments.",77,{"inputs":[{"name":"closedblock"}],"output":{"name":"h256"}}],[11,"seal","","Provide a valid seal in order to turn this into a `SealedBlock`.",77,{"inputs":[{"name":"closedblock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"reopen","","Turn this back into an `OpenBlock`.",77,{"inputs":[{"name":"closedblock"}],"output":{"name":"openblock"}}],[11,"drain","","Drop this object and return the underlieing database.",77,{"inputs":[{"name":"closedblock"}],"output":{"name":"journaldb"}}],[11,"rlp_bytes","","Get the RLP-encoding of the block.",78,{"inputs":[{"name":"sealedblock"}],"output":{"name":"bytes"}}],[11,"drain","","Drop this object and return the underlieing database.",78,{"inputs":[{"name":"sealedblock"}],"output":{"name":"journaldb"}}],[11,"block","","",78,{"inputs":[{"name":"sealedblock"}],"output":{"name":"block"}}],[0,"verification","ethcore","TODO [arkpar] Please document me",null,null],[3,"PreVerifiedBlock","ethcore::verification","Preprocessed block data gathered in `verify_block_unordered` call",null,null],[12,"header","","Populated block header",79,null],[12,"transactions","","Populated block transactions",79,null],[12,"bytes","","Block bytes",79,null],[5,"verify_block_basic","","Phase 1 quick block verification. Only does checks that are cheap. Operates on a single block",null,null],[5,"verify_block_unordered","","Phase 2 verification. Perform costly checks such as transaction signatures and block nonce for ethash.\nStill operates on a individual block\nReturns a PreVerifiedBlock structure populated with transactions",null,{"inputs":[{"name":"header"},{"name":"bytes"},{"name":"engine"}],"output":{"name":"result"}}],[5,"verify_block_family","","Phase 3 verification. Check block information against parent and uncles.",null,null],[5,"verify_block_final","","Phase 4 verification. Check block information against transaction enactment results,",null,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"result"}}],[0,"queue","ethcore","TODO [debris] Please document me",null,null],[3,"BlockQueue","ethcore::queue","A queue of blocks. Sits between network or other I/O and the BlockChain.\nSorts them ready for blockchain insertion.",null,null],[11,"new","","Creates a new queue instance.",80,{"inputs":[{"name":"blockqueue"},{"name":"arc"},{"name":"iochannel"}],"output":{"name":"blockqueue"}}],[11,"clear","","Clear the queue and stop verification activity.",80,{"inputs":[{"name":"blockqueue"}],"output":null}],[11,"import_block","","Add a block to the queue.",80,{"inputs":[{"name":"blockqueue"},{"name":"bytes"}],"output":{"name":"importresult"}}],[11,"mark_as_bad","","Mark given block and all its children as bad. Stops verification.",80,{"inputs":[{"name":"blockqueue"},{"name":"h256"}],"output":null}],[11,"drain","","TODO [arkpar] Please document me",80,{"inputs":[{"name":"blockqueue"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"drop","","",80,{"inputs":[{"name":"blockqueue"}],"output":null}],[0,"ethereum","ethcore","Ethereum protocol module.",null,null],[5,"new_olympic","ethcore::ethereum","Create a new Olympic chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_frontier","","Create a new Frontier mainnet chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_frontier_test","","Create a new Frontier chain spec as though it never changes to Homestead.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_homestead_test","","Create a new Homestead chain spec as though it never changed from Frontier.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_frontier_like_test","","Create a new Frontier main net chain spec without genesis accounts.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_morden","","Create a new Morden chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[0,"ethash","","TODO [Gav Wood] Please document me",null,null],[3,"Ethash","ethcore::ethereum::ethash","Engine using Ethash proof-of-work consensus algorithm, suitable for Ethereum\nmainnet chains in the Olympic, Frontier and Homestead eras.",null,null],[11,"new_boxed","","TODO [arkpar] Please document me",81,{"inputs":[{"name":"ethash"},{"name":"spec"}],"output":{"name":"box"}}],[11,"name","","",81,{"inputs":[{"name":"ethash"}],"output":{"name":"str"}}],[11,"version","","",81,{"inputs":[{"name":"ethash"}],"output":{"name":"semanticversion"}}],[11,"seal_fields","","",81,{"inputs":[{"name":"ethash"}],"output":{"name":"usize"}}],[11,"seal_rlp","","",81,{"inputs":[{"name":"ethash"}],"output":{"name":"bytes"}}],[11,"extra_info","","Additional engine-specific information for the user/developer concerning `header`.",81,{"inputs":[{"name":"ethash"},{"name":"header"}],"output":{"name":"hashmap"}}],[11,"spec","","",81,{"inputs":[{"name":"ethash"}],"output":{"name":"spec"}}],[11,"vm_factory","","",81,{"inputs":[{"name":"ethash"}],"output":{"name":"factory"}}],[11,"schedule","","",81,{"inputs":[{"name":"ethash"},{"name":"envinfo"}],"output":{"name":"schedule"}}],[11,"populate_from_parent","","",81,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"header"}],"output":null}],[11,"on_close_block","","Apply the block reward on finalisation of the block.\nThis assumes that all uncles are valid uncles (i.e. of at least one generation before the current).",81,{"inputs":[{"name":"ethash"},{"name":"block"}],"output":null}],[11,"verify_block_basic","","",81,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_unordered","","",81,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_block_family","","",81,{"inputs":[{"name":"ethash"},{"name":"header"},{"name":"header"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify_transaction_basic","","",81,{"inputs":[{"name":"ethash"},{"name":"transaction"},{"name":"header"}],"output":{"name":"result"}}],[11,"verify_transaction","","",81,{"inputs":[{"name":"ethash"},{"name":"transaction"},{"name":"header"}],"output":{"name":"result"}}],[0,"denominations","ethcore::ethereum","TODO [Gav Wood] Please document me",null,null],[5,"ether","ethcore::ethereum::denominations","TODO [debris] Please document me",null,{"inputs":[],"output":{"name":"u256"}}],[5,"finney","","TODO [debris] Please document me",null,{"inputs":[],"output":{"name":"u256"}}],[5,"szabo","","TODO [debris] Please document me",null,{"inputs":[],"output":{"name":"u256"}}],[5,"shannon","","TODO [debris] Please document me",null,{"inputs":[],"output":{"name":"u256"}}],[5,"wei","","TODO [debris] Please document me",null,{"inputs":[],"output":{"name":"u256"}}],[14,"evm_test!","ethcore","Create tests by injecting different VM factories",null,null],[14,"evm_test_ignore!","","Create ignored tests by injecting different VM factories",null,null]],"paths":[[4,"Seal"],[4,"ContractCreateResult"],[4,"MessageCallResult"],[8,"Ext"],[4,"Error"],[8,"Evm"],[3,"Interpreter"],[4,"VMType"],[3,"Factory"],[3,"Schedule"],[3,"Mismatch"],[3,"OutOfBounds"],[4,"ExecutionError"],[4,"TransactionError"],[4,"BlockError"],[4,"ImportError"],[4,"Error"],[3,"LogEntry"],[3,"EnvInfo"],[3,"PodAccount"],[3,"PodState"],[3,"AccountDiff"],[4,"Existance"],[3,"StateDiff"],[8,"Engine"],[3,"State"],[3,"Account"],[3,"ActionParams"],[3,"Header"],[3,"Transaction"],[4,"Action"],[3,"Receipt"],[3,"NullEngine"],[3,"Builtin"],[3,"Spec"],[3,"GenesisAccount"],[3,"TransactionView"],[3,"AccountView"],[3,"BlockView"],[3,"HeaderView"],[3,"TreeRoute"],[3,"CacheSize"],[8,"BlockProvider"],[3,"BlockChain"],[3,"BlockDetails"],[3,"BlockLogBlooms"],[3,"BlocksBlooms"],[3,"TransactionAddress"],[4,"ExtrasIndex"],[8,"ExtrasWritable"],[8,"ExtrasReadable"],[8,"ExtrasSliceConvertable"],[8,"ExtrasIndexable"],[3,"DB"],[3,"H256"],[3,"U256"],[6,"BlockNumber"],[3,"Substate"],[3,"ClientService"],[3,"Executed"],[3,"Executive"],[4,"OutputPolicy"],[3,"OriginInfo"],[3,"Externalities"],[3,"BlockChainInfo"],[3,"BlockQueueStatus"],[3,"ClientReport"],[4,"BlockStatus"],[8,"BlockChainClient"],[3,"Client"],[3,"SyncStatus"],[4,"SyncMessage"],[3,"EthSync"],[3,"BlockRefMut"],[8,"IsBlock"],[3,"Block"],[3,"OpenBlock"],[3,"ClosedBlock"],[3,"SealedBlock"],[3,"PreVerifiedBlock"],[3,"BlockQueue"],[3,"Ethash"]]};
searchIndex['client'] = {"items":[],"paths":[]};
searchIndex['ethcore_util'] = {"items":[[0,"standard","ethcore_util","TODO [Gav Wood] Please document me",null,null],[0,"io","ethcore_util::standard","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","ethcore_util::standard::io","The I/O Prelude",null,null],[8,"Read","ethcore_util::standard::io::prelude","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",0,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",0,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",0,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",0,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",0,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",0,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",0,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",0,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",1,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",1,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",1,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",1,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",1,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",2,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",2,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",2,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",2,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",3,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"Read","ethcore_util::standard::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",0,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",0,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",0,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",0,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",0,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",0,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",0,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",0,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",1,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",1,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",1,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",1,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",1,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",3,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",4,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",5,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",7,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",8,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",10,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","ethcore_util::standard","Returns true if the boxed type is the same as `T`",11,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",12,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"clone","std::thread::local","",14,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",14,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",15,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",15,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",16,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",16,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",17,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",17,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",18,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",18,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",18,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",19,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",19,null],[11,"get","","",19,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",20,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",20,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",20,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",20,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",21,null],[11,"name","","Gets the thread's name.",21,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",23,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",24,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",25,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",25,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",25,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",24,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",24,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",24,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",24,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",24,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",24,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",24,null],[11,"next","","",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",27,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",26,null],[11,"take","","Removes this bucket's key and value from the hashtable.",26,null],[11,"replace","","",26,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",26,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",26,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",26,null],[11,"expect_full","","",28,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",29,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",29,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",30,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",31,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",31,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"len","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",34,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"len","","",34,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",35,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"len","","",35,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",36,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"len","","",36,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",36,null],[11,"clone","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",30,null],[11,"clone","std::collections::hash::map","",37,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",38,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",38,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",38,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",38,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",38,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",38,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",38,null],[11,"get","","Returns a reference to the value corresponding to the key.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",38,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",38,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",40,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",41,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",42,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"len","","",42,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",43,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"len","","",43,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",41,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"len","","",41,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",44,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"len","","",44,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",45,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",45,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",46,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",47,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",38,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",38,null],[11,"extend","","",38,null],[11,"clone","","",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",38,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",49,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",49,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",49,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",49,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",49,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",49,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",49,null],[11,"contains","","Returns `true` if the set contains a value.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",49,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",49,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",49,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",49,null],[11,"extend","","",49,null],[11,"default","","",49,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"len","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",51,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"len","","",51,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",52,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"len","","",52,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",53,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",53,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",54,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",55,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"clone","","",56,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",56,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"hasher","std::collections::hash::state","",57,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",57,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",57,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",58,null],[11,"default","","",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",58,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",58,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",58,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",58,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",58,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",58,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",58,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",58,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",58,null],[11,"drop","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",58,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",58,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"clone","collections::linked_list","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",66,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",66,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",67,null],[11,"iter","","Provides a forward iterator.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",67,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",67,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",67,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",67,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",67,null],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",68,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",67,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",67,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"clone","collections::vec_deque","",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",69,null],[11,"default","","",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",69,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",69,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",69,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",69,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",69,null],[11,"iter","","Returns a front-to-back iterator.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",69,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",69,null],[11,"len","","Returns the number of elements in the `VecDeque`.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",69,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",69,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",69,null],[11,"push_back","","Appends an element to the back of a buffer",69,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",69,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",69,null],[11,"retain","","Retains only the elements specified by the predicate.",69,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",69,null],[11,"clone","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",73,null],[11,"next","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",69,null],[11,"index","","",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",69,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",69,null],[11,"extend","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",74,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",74,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",74,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",74,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",74,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",74,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",74,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",75,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next","","",76,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",77,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",77,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"fmt","","",79,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",79,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"len","","",80,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",81,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"len","","",81,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",82,null],[11,"cmp","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",84,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",85,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",82,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",82,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",82,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",82,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",82,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",82,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",82,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",82,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",82,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",83,null],[11,"as_ptr","","Returns the inner pointer to this C string.",83,null],[11,"to_bytes","","Converts this C string to a byte slice.",83,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",83,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",83,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",83,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",82,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",83,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",84,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",86,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",83,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",83,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",82,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",82,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",83,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",87,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",87,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",87,null],[11,"from","","",87,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",87,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",87,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",88,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",87,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"eq","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",88,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",88,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",91,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",92,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",94,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",94,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",94,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",94,null],[11,"read_to_end","","",94,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",94,null],[11,"flush","","",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",94,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",91,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",91,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",92,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",92,null],[11,"is_dir","","Test whether this file type represents a directory.",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",95,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",97,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",98,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",98,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",98,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",99,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",99,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",99,null],[11,"fill_buf","","",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",99,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",101,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",101,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",101,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",101,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",100,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",100,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",86,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",100,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",100,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",102,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",102,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",102,null],[11,"flush","","",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",103,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",103,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",103,null],[11,"seek","","",103,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",103,null],[11,"fill_buf","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",103,null],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",86,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",105,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",86,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",86,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",86,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",86,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",106,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",86,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",4,null],[11,"read_to_end","","",4,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",4,null],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",4,null],[11,"write_fmt","","",4,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",4,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",4,null],[11,"read_until","","",4,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",63,null],[11,"write_all","","",63,null],[11,"flush","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",107,null],[11,"get","","",107,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",108,null],[11,"fill_buf","","",108,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",108,null],[11,"read","","",109,null],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",111,null],[11,"write","","",112,null],[11,"flush","","",112,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",113,null],[11,"flush","","",113,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",114,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",115,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",115,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",115,null],[11,"read_to_end","","",115,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",115,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",115,null],[11,"read","","",116,null],[11,"read_to_end","","",116,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",116,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",116,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",117,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",117,null],[11,"write_fmt","","",117,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",119,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",119,null],[11,"write_fmt","","",119,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",121,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",121,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",122,null],[11,"flush","","",122,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",123,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",124,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",124,null],[11,"fill_buf","","",124,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",124,null],[11,"read","","",125,null],[11,"next","","",126,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",128,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",127,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",127,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",129,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",130,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"fmt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"clone","","",132,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",133,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",133,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"partial_cmp","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",134,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",134,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"partial_cmp","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",135,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",135,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",136,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",137,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",135,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",136,null],[11,"hash","","",137,null],[11,"to_socket_addrs","","",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",138,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",138,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",138,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",138,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",138,null],[11,"read_to_end","","",138,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",138,null],[11,"flush","","",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",139,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",140,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",141,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",141,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",141,null],[11,"local_addr","","Returns the socket address that this socket was created from.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",141,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",141,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",131,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",135,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",142,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",142,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",142,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",143,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",144,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::macos::raw","",145,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",94,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",94,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",94,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",138,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",139,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",141,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",87,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",88,null],[11,"as_bytes","","",88,null],[11,"mode","std::fs","",92,{"inputs":[{"name":"permissions"}],"output":{"name":"u16"}}],[11,"set_mode","","",92,null],[11,"from_mode","","",92,{"inputs":[{"name":"permissions"},{"name":"u16"}],"output":{"name":"permissions"}}],[11,"mode","","",91,{"inputs":[{"name":"openoptions"},{"name":"u16"}],"output":{"name":"openoptions"}}],[11,"dev","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"ino","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"nlink","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"uid","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"size","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"blocks","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",96,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",98,{"inputs":[{"name":"dirbuilder"},{"name":"u16"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",146,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",146,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",146,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",148,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",149,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",150,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",151,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",149,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",150,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",151,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"into_pthread_t","","",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",152,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",152,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",152,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",153,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",155,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",155,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",155,null],[11,"fmt","","",156,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"cmp","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",156,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",156,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",157,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",157,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",157,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",157,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",157,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",158,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",157,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",157,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",157,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",159,null],[11,"pop","","Truncate `self` to `self.parent()`.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",159,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",159,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",159,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",159,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",159,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",159,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",160,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",160,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",160,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",160,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",160,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",160,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",161,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",160,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",159,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"partial_cmp","","",159,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",159,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",160,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",160,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"partial_cmp","","",160,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",160,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",160,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",88,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",159,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",160,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",160,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",159,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",162,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",149,null],[11,"flush","","",149,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",150,null],[11,"read","","",151,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",146,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",146,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",146,null],[11,"env","","Inserts or updates an environment variable mapping.",146,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",146,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",146,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",146,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",146,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",146,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",146,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",146,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",146,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",146,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",146,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",164,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",148,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",148,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",148,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",147,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",147,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",147,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",165,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",165,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",165,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",165,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",166,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",166,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",166,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",166,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",167,null],[11,"new","std::sync::mpsc::oneshot","",168,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",168,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",168,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",168,null],[11,"drop_port","","",168,null],[11,"can_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",168,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",168,null],[11,"eq","std::sync::mpsc::select","",169,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",170,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",170,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",170,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",171,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",171,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",171,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",171,null],[11,"drop","","",170,null],[11,"drop","","",171,null],[11,"next","","",172,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",173,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",173,null],[11,"send","","",173,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",173,null],[11,"drop_chan","","",173,null],[11,"drop_port","","",173,null],[11,"can_recv","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",173,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",173,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",173,null],[11,"new","std::sync::mpsc::stream","",174,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",174,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",174,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",174,null],[11,"drop_port","","",174,null],[11,"can_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",174,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",174,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",174,null],[11,"fmt","std::sync::mpsc::sync","",175,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",176,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",176,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",176,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",176,null],[11,"drop_chan","","",176,null],[11,"drop_port","","",176,null],[11,"can_recv","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",176,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",176,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",177,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",177,null],[11,"pop","","Pops some data from this queue.",177,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",177,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",178,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",178,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",178,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",178,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",178,null],[11,"clone","std::sync::mpsc","",179,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",179,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",180,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",182,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",183,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",183,null],[11,"send","","Sends a value on this synchronous channel.",184,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",184,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",184,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",185,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",185,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",185,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",186,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",187,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",185,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",185,null],[11,"fmt","","",179,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",179,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",179,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",182,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",182,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",182,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",180,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",180,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",180,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",181,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",181,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",188,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",188,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",189,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",190,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",190,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",190,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",191,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",191,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",191,null],[11,"drop","","",191,null],[11,"new","","Creates a new condition variable",192,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",192,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",192,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",192,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",193,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",194,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",194,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",194,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",194,null],[11,"deref","","",195,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",195,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",195,null],[11,"new","std::sync::once","Creates a new `Once` value.",196,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",196,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",197,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",197,null],[11,"fmt","","",197,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",198,null],[11,"deref","","",199,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",200,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",200,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",199,null],[11,"drop","","",200,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",201,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",201,null],[11,"release","","Release a resource from this semaphore.",201,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",201,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",202,null],[11,"default","core::sync::atomic","",203,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",204,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",205,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",206,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",207,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",203,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",203,null],[11,"swap","","Stores a value into the bool, returning the old value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",204,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",204,null],[11,"swap","","Stores a value into the isize, returning the old value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",205,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",205,null],[11,"swap","","Stores a value into the usize, returning the old value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",206,null],[11,"load","","Loads a value from the pointer.",206,null],[11,"store","","Stores a value into the pointer.",206,null],[11,"swap","","Stores a value into the pointer, returning the old value.",206,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",206,null],[11,"fmt","","",205,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",208,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",208,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",208,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",208,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",208,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",208,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",208,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",208,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",210,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",211,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",211,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",209,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",209,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",209,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",209,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",209,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",210,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",210,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",210,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",210,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",210,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",211,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",211,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",211,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",212,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",212,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",212,null],[11,"wait","","Waits for a signal on the specified mutex.",212,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",212,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",212,null],[11,"clone","std::sys_common::dwarf::eh","",213,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",214,null],[11,"read","","",214,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",214,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",214,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",215,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",216,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",217,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",217,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",217,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",217,null],[11,"destroy","","Deallocates all resources associated with this mutex.",217,null],[11,"next","std::sys_common::net","",218,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",218,null],[11,"connect","","",219,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",219,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",219,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",219,null],[11,"write","","",219,null],[11,"peer_addr","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",219,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",220,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",221,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",221,null],[11,"send_to","","",221,null],[11,"duplicate","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",221,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",221,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",222,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",222,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",222,null],[11,"get","","",222,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",223,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",223,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",224,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",224,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",224,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",224,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",225,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",225,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",225,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",225,null],[11,"fmt","","",225,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",226,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",226,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",227,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",227,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",227,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",227,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",227,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",227,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",227,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",227,null],[11,"new","std::sys_common::thread_local","",228,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",228,null],[11,"set","","Sets this TLS key to a new value.",228,null],[11,"destroy","","Deallocates this OS TLS key.",228,null],[11,"new","","Creates a new managed OS TLS key.",229,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",229,null],[11,"set","","See StaticKey::set",229,null],[11,"drop","","",229,null],[11,"clone","std::sys_common::wtf8","",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",230,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",230,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",230,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",230,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",232,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",232,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",231,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",231,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",231,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",231,null],[11,"as_slice","","",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",231,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",231,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",231,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",231,null],[11,"push","","Append a code point at the end of the string.",231,null],[11,"truncate","","Shortens a string to the specified length.",231,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",231,null],[11,"partial_cmp","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",232,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",233,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",233,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"clone","","",234,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",234,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"hash","","",230,null],[11,"hash","","",231,null],[11,"hash","","",232,null],[11,"is_ascii","","",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",232,null],[11,"make_ascii_lowercase","","",232,null],[11,"new","std::sys::condvar","",235,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",235,null],[11,"notify_all","","",235,null],[11,"wait","","",235,null],[11,"wait_timeout","","",235,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",235,null],[11,"new","std::sys::fd","",236,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",236,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",236,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",236,null],[11,"write","","",236,null],[11,"set_cloexec","","",236,null],[11,"drop","","",236,null],[11,"clone","std::sys::fs","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",238,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",239,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",239,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",239,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",239,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",240,null],[11,"eq","","",240,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",239,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",239,null],[11,"mode","","",239,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u16"}}],[11,"is_dir","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",240,{"inputs":[{"name":"filetype"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"next","","",241,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",242,null],[11,"path","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",238,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",238,null],[11,"write","","",238,null],[11,"append","","",238,null],[11,"truncate","","",238,null],[11,"create","","",238,null],[11,"mode","","",238,null],[11,"open","","",244,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",244,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",244,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",244,null],[11,"write","","",244,null],[11,"flush","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",244,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",244,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",244,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",245,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",245,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",245,null],[11,"fmt","","",244,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",246,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",246,null],[11,"unlock","","",246,null],[11,"try_lock","","",246,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",246,null],[11,"uninitialized","","",247,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",247,null],[11,"lock","","",247,null],[11,"try_lock","","",247,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",247,null],[11,"destroy","","",247,null],[11,"new","std::sys::net","",248,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",248,null],[11,"duplicate","","",248,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",248,null],[11,"set_timeout","","",248,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",248,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",248,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",249,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",250,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",251,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",252,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",253,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",254,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",255,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",256,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",257,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",258,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",259,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",260,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::bsd","",261,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",262,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",263,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",264,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",265,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",266,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",267,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",268,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",269,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",270,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",271,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",272,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",273,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",274,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",275,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",276,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",277,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",278,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",279,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",280,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",281,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",282,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",283,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",284,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",285,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",286,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",287,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",288,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",289,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",290,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",291,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",292,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",293,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",294,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","libc::unix::bsd::apple::b64","",295,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"next","std::sys::os","",296,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[11,"fmt","","",297,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",297,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",298,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"len","","",298,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",299,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",299,null],[11,"hash","std::sys::os_str","",300,null],[11,"clone","","",300,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",301,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",300,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",300,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",300,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",300,null],[11,"from_str","","",301,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",301,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",301,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",301,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",302,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",302,null],[11,"write","","",302,null],[11,"raw","","",302,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",302,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",302,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",303,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",303,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",303,null],[11,"args","","",303,null],[11,"env","","",303,null],[11,"env_remove","","",303,null],[11,"env_clear","","",303,null],[11,"cwd","","",303,null],[11,"fmt","","",304,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",304,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",304,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",304,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",304,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",304,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",304,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",305,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",305,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",305,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",305,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",305,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",306,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",306,null],[11,"try_read","","",306,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",306,null],[11,"try_write","","",306,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",306,null],[11,"write_unlock","","",306,null],[11,"destroy","","",306,null],[11,"new","std::sys::stack_overflow","",307,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",307,null],[11,"new","std::sys::thread","",308,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",308,null],[11,"set_name","","",308,null],[11,"sleep","","",308,null],[11,"join","","",308,null],[11,"id","","",308,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"into_id","","",308,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"drop","","",308,null],[11,"fmt","std::sys::time::inner","",309,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",309,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"clone","","",310,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",309,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",309,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",309,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",309,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"now","","",310,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",310,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",310,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",310,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"eq","","",310,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",310,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"cmp","","",310,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",310,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",311,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",311,null],[11,"new","","",312,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",312,null],[11,"new","","",313,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",313,null],[11,"write","","",313,null],[11,"flush","","",313,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",314,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",315,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",315,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",316,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",316,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",317,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",317,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",317,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",317,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",318,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",318,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",318,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",318,null],[11,"clone","std::rand","",319,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",319,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",319,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",319,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",319,null],[11,"from_seed","","",319,null],[11,"reseed","","",320,null],[11,"clone","","",321,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",321,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",321,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",321,null],[11,"fmt","ethcore_util::standard","",322,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",322,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",322,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",322,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",322,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",322,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",322,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",322,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",323,null],[11,"fmt","","",323,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",323,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",323,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",323,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",323,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",324,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",324,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",324,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",324,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",324,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",324,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",324,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",325,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",325,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",325,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",325,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",326,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",326,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",326,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",326,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",326,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",326,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",326,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",326,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",326,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",327,null],[11,"clone","","",327,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",328,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",328,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",328,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",328,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",329,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",329,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",330,null],[11,"deref","","",329,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",329,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",331,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",331,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",331,null],[11,"fmt","core::cmp","",332,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",332,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",332,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",332,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",332,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",332,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",333,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",333,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",333,null],[11,"finish","","",333,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",333,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",333,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"clone","core::iter","",334,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",334,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",334,null],[11,"next_back","","",334,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",335,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",335,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"next_back","","",335,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",336,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",336,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"clone","","",337,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",338,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",337,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",337,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",337,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",337,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",337,null],[11,"next_back","","",337,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",339,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",339,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"next_back","","",339,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",340,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",340,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"next_back","","",340,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",341,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",341,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"next_back","","",341,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",342,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",342,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"next_back","","",342,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",343,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",343,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"nth","","",343,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",343,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",343,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",344,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",344,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",344,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",344,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",344,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",344,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",344,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",345,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",345,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"clone","","",346,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",346,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"clone","","",347,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",347,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",347,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",347,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",347,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"clone","","",348,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",348,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",348,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"clone","","",349,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",349,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"clone","","",350,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",350,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next_back","","",350,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",351,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",351,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",351,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",351,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",351,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",351,null],[11,"next_back","","",351,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",352,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",352,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",353,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",354,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",355,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",353,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"clone","","",356,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",356,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"next_back","","",356,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",353,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next","core::ops","",355,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"next_back","","",355,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",354,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",357,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",357,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"next_back","","",357,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",358,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"next_back","","",358,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",358,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",358,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",358,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",359,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",359,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",359,null],[11,"next_back","","",359,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",359,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",360,null],[11,"eq","","",360,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",360,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",360,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",360,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",360,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",361,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",361,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",361,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",361,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",355,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",355,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",355,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",355,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",354,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",354,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",354,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",354,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",362,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",362,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",362,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",362,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",363,null],[11,"get","","Dereferences the content.",363,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",363,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",363,null],[11,"fmt","","",363,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",364,null],[11,"clone","","",364,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",364,null],[11,"fmt","","",364,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",365,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",366,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",367,null],[11,"fmt","","",367,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",367,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",367,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",367,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",367,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",367,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",367,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",367,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",367,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",367,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",367,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",367,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",367,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",367,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",367,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",367,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",367,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",367,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",367,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",367,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",367,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",368,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",368,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",369,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",370,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",367,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",371,null],[11,"fmt","","",371,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",371,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",371,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",371,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",371,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",371,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",371,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",371,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",371,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",371,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",371,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",371,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",371,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",371,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",371,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",371,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",371,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",371,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",371,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",371,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",371,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",371,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",371,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",371,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",371,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",372,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",372,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next_back","","",372,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",373,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"next_back","","",373,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",373,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",374,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",374,null],[11,"next_back","","",374,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",375,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",375,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",375,null],[11,"next_back","","",375,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",371,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",376,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",377,null],[11,"make_place","","",377,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",377,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",4,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",376,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",377,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",4,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",4,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",4,null],[11,"default","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",4,null],[11,"clone","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",4,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",4,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",4,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",378,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",378,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",378,null],[11,"clone","","Makes a clone of the `Rc<T>`.",378,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",378,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",378,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",378,null],[11,"fmt","","",378,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",378,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",379,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",379,null],[11,"clone","","Makes a clone of the `Weak<T>`.",379,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",379,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",379,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",378,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",378,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",161,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",161,null],[11,"into_owned","","Extracts the owned data.",161,null],[11,"deref","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",161,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",161,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",161,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"into_cow","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",380,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",381,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",382,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",382,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",382,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",383,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",384,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",63,null],[11,"borrow_mut","","",63,null],[11,"clone","collections::str","",385,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",385,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",385,null],[11,"borrow","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",386,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",386,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",386,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",386,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",387,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",388,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",387,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",387,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",387,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",389,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",390,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",391,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",392,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",392,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",393,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",393,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",394,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",394,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",392,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",392,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",392,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",392,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",392,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",395,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",395,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",396,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",396,null],[11,"matching","","",396,null],[11,"use_early_reject","","",397,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",397,null],[11,"matching","","",397,null],[11,"cmp","collections::string","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",89,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",89,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",89,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",89,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",89,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",89,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",89,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",89,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",89,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",89,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",89,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",89,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",89,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",89,null],[11,"push","","Appends the given `char` to the end of this `String`.",89,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",89,null],[11,"truncate","","Shortens this `String` to the specified length.",89,null],[11,"pop","","Removes the last character from the string buffer and returns it.",89,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",89,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",89,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",89,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",89,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",89,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",89,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",89,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",89,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",9,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",89,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",89,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",89,null],[11,"extend","","",89,null],[11,"extend","","",89,null],[11,"extend","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",89,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",89,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",89,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"add","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",398,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",398,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",398,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",89,null],[11,"from","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",161,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",89,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",89,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",399,null],[11,"next","","",399,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",399,null],[11,"next_back","","",399,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",63,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",63,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",63,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",63,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",63,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",63,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",63,null],[11,"as_slice","","Extracts a slice containing the entire vector.",63,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",63,null],[11,"set_len","","Sets the length of a vector.",63,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",63,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",63,null],[11,"push","","Appends an element to the back of a collection.",63,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",63,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",63,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",63,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",63,null],[11,"len","","Returns the number of elements in the vector.",63,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",63,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",63,null],[11,"push_all","","",63,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",63,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",63,null],[11,"clone","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",63,null],[11,"hash","","",63,null],[11,"index","","",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",63,null],[11,"index","","",63,null],[11,"index","","",63,null],[11,"index","","",63,null],[11,"index_mut","","",63,null],[11,"index_mut","","",63,null],[11,"index_mut","","",63,null],[11,"index_mut","","",63,null],[11,"deref","","",63,null],[11,"deref_mut","","",63,null],[11,"from_iter","","",63,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",63,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",63,null],[11,"extend","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","collections::borrow","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"partial_cmp","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",63,null],[11,"default","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",63,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",63,null],[11,"as_mut","","",63,null],[11,"from","","",63,null],[11,"from","","",63,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",63,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",400,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",400,null],[11,"count","","",400,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",400,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",400,null],[11,"next","","",401,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",401,null],[11,"next_back","","",401,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",401,null],[11,"next","rustc_unicode::char","",402,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",403,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",404,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",405,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",405,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",405,null],[4,"SeekFrom","ethcore_util::standard::io","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",121,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",121,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",121,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",2,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",2,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",2,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",2,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[3,"Broadcast","","A `Write` adaptor which will write data to multiple locations.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Tee","","An adaptor which will emit all read data to a specified writer as well.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",127,null],[13,"Other","","Variant representing that an I/O error occurred.",127,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `'\\n'`) is detected.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[6,"Result","","",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",105,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",105,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",105,null],[13,"ConnectionReset","","The connection was reset by the remote server.",105,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",105,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",105,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",105,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",105,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",105,null],[13,"AlreadyExists","","An entity already exists, often a file.",105,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",105,null],[13,"InvalidInput","","A parameter was incorrect.",105,null],[13,"InvalidData","","Data not valid for the operation were encountered.",105,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",105,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",105,null],[13,"Interrupted","","This operation was interrupted.",105,null],[13,"Other","","Any I/O error not part of this list.",105,null],[13,"UnexpectedEOF","","",105,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n\"end of file\" was reached prematurely.",105,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[3,"Sink","","A writer which will move data into the void.",null,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Empty","","A reader which is always at EOF.",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[0,"str","ethcore_util::standard","Unicode string slices",null,null],[11,"new_leaf","collections::btree::node","",406,{"inputs":[{"name":"root"}],"output":{"name":"root"}}],[11,"as_ref","","",406,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",406,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",406,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",406,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",406,null],[11,"clone","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"len","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"keys","","",407,null],[11,"vals","","",407,null],[11,"ascend","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"keys_mut","","",407,null],[11,"vals_mut","","",407,null],[11,"into_slices","","",407,null],[11,"into_root_mut","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",407,null],[11,"push","","",407,null],[11,"push_front","","",407,null],[11,"push","","",407,null],[11,"push_front","","",407,null],[11,"pop","","",407,null],[11,"pop_front","","",407,null],[11,"force","","",407,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_node","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",408,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_edge","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",408,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"reborrow","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",408,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_kv","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert","","",408,null],[11,"insert","","",408,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",408,null],[11,"into_kv_mut","","",408,null],[11,"kv_mut","","",408,null],[11,"split","","",408,null],[11,"remove","","",408,null],[11,"split","","",408,null],[11,"can_merge","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",408,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"drop","collections::btree::map","",409,null],[11,"clone","","",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",409,null],[11,"get","","Returns a reference to the value corresponding to the key.",409,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",409,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",409,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",409,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",409,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",409,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",409,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",409,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",410,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",410,null],[11,"next_back","","",410,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",410,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",410,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",411,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",411,null],[11,"next_back","","",411,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",411,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",412,null],[11,"next","","",412,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",412,null],[11,"next_back","","",412,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",412,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",413,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",413,null],[11,"next_back","","",413,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",413,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",413,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",414,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",414,null],[11,"next_back","","",414,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",414,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",414,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",415,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",415,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",415,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",416,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",416,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",409,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",409,null],[11,"extend","","",409,null],[11,"hash","","",409,null],[11,"default","","",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",409,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",409,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",409,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",409,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",409,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",417,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",417,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",418,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",419,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",419,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",419,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",419,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",419,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",420,null],[11,"clone","","",420,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",420,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",420,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",420,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",420,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",420,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",420,null],[11,"contains","","Returns `true` if the set contains a value.",420,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",420,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",420,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",420,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",420,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",420,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",420,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",420,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",420,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",420,null],[11,"extend","","",420,null],[11,"default","","",420,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",420,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",421,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",421,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",421,null],[11,"next_back","","",421,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",422,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",422,null],[11,"next_back","","",422,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",423,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",423,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",423,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",424,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",424,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",425,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",425,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",426,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",426,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",427,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",427,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"hash","collections::enum_set","",428,null],[11,"cmp","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",428,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",428,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",428,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",428,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",428,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",428,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",428,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",428,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",428,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",428,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",428,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",429,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",429,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",429,null],[11,"from_iter","","",428,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",428,null],[11,"extend","","",428,null],[11,"start","core::ops","",354,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",362,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",355,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",355,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"eq","collections","",430,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",430,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",430,null],[11,"fmt","","",430,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",430,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[3,"Utf16Units","ethcore_util::standard::str","External iterator for a string's UTF-16 code units.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","ethcore_util::standard::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",431,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",431,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",431,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",431,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",431,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","core::num","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",13,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","core::num::flt2dec::decoder","",432,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",432,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",432,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",432,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",433,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",433,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",433,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",433,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",434,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",434,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",434,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",434,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",434,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",434,null],[11,"clone","","",435,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",435,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",435,null],[11,"fmt","","",436,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",436,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",436,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",436,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",437,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",437,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",437,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",438,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",439,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",439,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",439,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",439,null],[11,"eq","","",440,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",440,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",440,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",441,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",441,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",441,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",441,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",442,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",442,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",442,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",442,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",442,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",442,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",442,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",442,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",442,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",442,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",442,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",442,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",442,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",442,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",442,null],[11,"eq","","",442,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",442,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",442,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",442,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",442,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",443,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",443,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",443,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",443,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",443,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",443,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",443,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",443,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",443,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",443,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",443,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",443,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",443,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",443,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",443,null],[11,"eq","","",443,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",443,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",443,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",443,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",443,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",444,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",444,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",444,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",444,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",444,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",445,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",445,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",445,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",445,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",7,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",446,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",446,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",446,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",446,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",447,null],[11,"fmt","","",447,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",447,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",447,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",447,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",447,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"clone","core::char","",448,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",449,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",448,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",448,null],[11,"clone","","",450,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",451,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",450,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",450,null],[11,"count","","",450,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",450,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",450,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",452,null],[11,"next","","",452,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",452,null],[11,"count","","",452,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",452,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",452,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",452,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",452,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",453,null],[11,"next","","",453,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",453,null],[11,"count","","",453,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",453,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",453,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",453,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",454,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",454,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",454,null],[11,"next_back","","",454,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",454,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",455,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",455,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",455,null],[11,"next_back","","",455,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",456,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",456,null],[11,"next","","",457,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",457,null],[11,"next","","",458,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",458,null],[11,"next","","",459,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",459,null],[11,"next","","",460,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",460,null],[11,"clone","","",461,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",461,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",461,null],[11,"count","","",461,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",461,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",461,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",461,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",462,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",462,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",462,null],[11,"count","","",462,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",462,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",462,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",462,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",463,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",463,null],[11,"count","","",463,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",463,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",463,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",463,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"eq","core::str","",5,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",6,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",6,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",464,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",464,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",464,null],[11,"next_back","","",464,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",464,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",465,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",465,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",465,null],[11,"next_back","","",465,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",465,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",466,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",466,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",466,null],[11,"count","","",466,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",466,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",466,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",466,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",466,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",467,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",468,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",468,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",469,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",469,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",468,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",469,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",470,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",470,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",471,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",471,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",470,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",471,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",472,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",473,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",473,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",474,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",474,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",475,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",476,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",476,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",477,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",477,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",476,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",477,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",478,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",479,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",479,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",480,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",480,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",479,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",480,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",481,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",481,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",481,null],[11,"next_back","","",481,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",482,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",483,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",483,null],[11,"call_mut","","",483,null],[11,"call_once","","",483,null],[11,"next","","",482,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",482,null],[11,"next_back","","",482,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",484,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"eq","core::fmt::num","",485,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",485,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",485,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",486,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",486,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",486,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",487,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",487,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",487,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",488,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",488,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",488,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",489,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",489,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",489,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",490,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",490,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",490,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",491,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",492,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",493,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",493,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",494,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",494,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",494,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",495,null],[11,"entry","","Adds a new entry to the set output.",496,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",496,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",496,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",497,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",497,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",497,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",498,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",498,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",498,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",499,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",499,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",500,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",501,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",501,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",501,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",502,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",502,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",502,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",502,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",502,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",502,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",502,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",502,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",502,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",502,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",502,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",502,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",502,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",502,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",502,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",502,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",502,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",502,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",502,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",502,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",502,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",499,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",360,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",324,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",326,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",328,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",329,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"SearchStep","ethcore_util::standard::str::pattern","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",386,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",386,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",386,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",503,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",503,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",503,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",503,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",504,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",504,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",504,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[8,"FromStr","ethcore_util::standard::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",505,null],[10,"from_str","","Parses a string `s` to return a value of this type.",505,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",484,null],[12,"next","","Index of the first byte of the next `char`",484,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[11,"clone","rustc_unicode::u_str","",506,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",506,{"inputs":[{"name":"utf16encoder"},{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",506,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"option"}}],[11,"size_hint","","",506,null],[11,"next","","",507,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next_back","","",507,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[3,"SplitWhitespace","ethcore_util::standard::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[0,"fmt","ethcore_util::standard","Utilities for formatting and printing strings",null,null],[5,"format","ethcore_util::standard::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[6,"Result","","",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",508,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",508,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",508,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",509,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",510,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",511,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",512,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",513,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",514,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",515,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",516,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",517,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[0,"slice","ethcore_util::standard","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","ethcore_util::standard::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",518,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",518,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",518,null],[10,"connect","","",518,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[0,"bytes","","Operations on `[u8]`.",null,null],[8,"MutableByteVector","ethcore_util::standard::slice::bytes","A trait for operations on mutable `[u8]`s.",null,null],[10,"set_memory","","Sets all bytes of the receiver to the given value.",519,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[0,"cmp","ethcore_util::standard","Functionality for ordering and comparison.",null,null],[8,"PartialEq","ethcore_util::standard::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",520,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",520,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",332,null],[13,"Equal","","An ordering where a compared value is equal [to another].",332,null],[13,"Greater","","An ordering where a compared value is greater [than another].",332,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",521,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",522,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",522,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",522,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",522,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",522,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"ptr","ethcore_util::standard","Raw, unsafe pointers, `*const T`, and `*mut T`",null,null],[5,"null","ethcore_util::standard::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","Variant of read_and_zero that writes the specific drop-flag byte\n(which may be more appropriate than zero).",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[3,"Unique","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc<T>` or `Arc<T>`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"result","ethcore_util::standard","Error handling with the `Result` type",null,null],[4,"Result","ethcore_util::standard::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",367,null],[13,"Err","","Contains the error value",367,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"option","ethcore_util::standard","Optional values",null,null],[4,"Option","ethcore_util::standard::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",371,null],[13,"Some","","Some value `T`",371,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"mem","ethcore_util::standard","Basic functions for dealing with memory",null,null],[5,"forget","ethcore_util::standard::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","ethcore_util::standard","Overloadable operators",null,null],[8,"Drop","ethcore_util::standard::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",523,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",524,null],[10,"add","","The method for the `+` operator",524,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",525,null],[10,"sub","","The method for the `-` operator",525,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",526,null],[10,"mul","","The method for the `*` operator",526,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",527,null],[10,"div","","The method for the `/` operator",527,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",528,null],[10,"rem","","The method for the `%` operator",528,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",529,null],[10,"neg","","The method for the unary `-` operator",529,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",530,null],[10,"not","","The method for the unary `!` operator",530,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",531,null],[10,"bitand","","The method for the `&` operator",531,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",532,null],[10,"bitor","","The method for the `|` operator",532,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",533,null],[10,"bitxor","","The method for the `^` operator",533,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",534,null],[10,"shl","","The method for the `<<` operator",534,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",535,null],[10,"shr","","The method for the `>>` operator",535,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",536,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",537,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",538,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",539,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",540,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&` operator",541,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",542,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",543,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",544,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",545,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",546,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",546,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",547,null],[3,"RangeFull","","An unbounded range.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends.",null,null],[12,"start","","The lower bound of the range (inclusive).",355,null],[12,"end","","The upper bound of the range (exclusive).",355,null],[3,"RangeFrom","","A range which is only bounded below.",null,null],[12,"start","","The lower bound of the range (inclusive).",354,null],[3,"RangeTo","","A range which is only bounded above.",null,null],[12,"end","","The upper bound of the range (exclusive).",362,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",548,null],[10,"deref","","The method called to dereference a value",548,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",549,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",550,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",551,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",552,null],[10,"call_once","","This is called when the call operator is used.",552,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate \"place\" that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",553,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",554,null],[10,"make_place","","Creates a fresh place from `self`.",554,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",555,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",555,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",556,null],[16,"Place","","The place that will negotiate the storage of the data.",556,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",556,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",557,{"inputs":[{"name":"boxplace"}],"output":{"name":"self"}}],[3,"Path","ethcore_util::standard","A slice of a path (akin to `str`).",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",505,null],[10,"from_str","","Parses a string `s` to return a value of this type.",505,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",0,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",0,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",0,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",0,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",0,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",0,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",0,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",0,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",1,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",1,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",1,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",1,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",1,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",558,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",558,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",559,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",559,null],[11,"write_u8","","Write a single `u8` into this hasher",559,null],[11,"write_u16","","Write a single `u16` into this hasher.",559,null],[11,"write_u32","","Write a single `u32` into this hasher.",559,null],[11,"write_u64","","Write a single `u64` into this hasher.",559,null],[11,"write_usize","","Write a single `usize` into this hasher.",559,null],[11,"write_i8","","Write a single `i8` into this hasher.",559,null],[11,"write_i16","","Write a single `i16` into this hasher.",559,null],[11,"write_i32","","Write a single `i32` into this hasher.",559,null],[11,"write_i64","","Write a single `i64` into this hasher.",559,null],[11,"write_isize","","Write a single `isize` into this hasher.",559,null],[8,"StdError","","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",11,{"inputs":[{"name":"stderror"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",11,{"inputs":[{"name":"stderror"}],"output":{"name":"option"}}],[11,"from_reader","rustc_serialize::json","Decodes a json value from an `&mut io::Read`",560,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",560,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",560,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",560,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",560,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",560,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",560,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"encode","collections::string","",89,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",4,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",378,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",378,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",161,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","ethcore_util::standard::option","",371,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",371,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",360,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",360,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","ethcore_util::standard","",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","std::path","",159,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",159,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",324,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",324,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",326,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",326,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",561,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",561,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",67,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",69,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",409,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",409,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",420,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",420,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",38,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",49,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[11,"clone","rustc_serialize::base64","",562,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",563,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",564,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",565,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",565,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",565,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",565,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","rustc_serialize::hex","",566,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",566,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",566,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",566,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::json","",560,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",560,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",560,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",560,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",560,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",560,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",560,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",560,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",560,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",567,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",567,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",567,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",568,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",568,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",569,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",569,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",569,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",570,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",570,{"inputs":[{"name":"encodererror"}],"output":{"name":"encodererror"}}],[11,"fmt","","",567,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",569,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",569,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",569,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",569,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",568,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",568,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",568,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",570,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",570,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",570,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",571,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",571,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",571,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",571,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",571,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",571,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",571,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",571,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",571,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",571,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",571,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",571,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",571,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",571,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",571,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",571,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",571,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",571,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",571,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",571,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",571,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",571,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",571,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",571,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",571,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",571,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",571,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",571,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",571,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",560,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"index","","",560,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",560,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",572,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",572,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",572,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",573,{"inputs":[{"name":"parserstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",573,{"inputs":[{"name":"parserstate"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"ne","","",573,{"inputs":[{"name":"parserstate"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"fmt","","",574,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",574,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",574,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",574,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"fmt","","",575,{"inputs":[{"name":"internalstackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",575,{"inputs":[{"name":"internalstackelement"}],"output":{"name":"internalstackelement"}}],[11,"eq","","",575,{"inputs":[{"name":"internalstackelement"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"ne","","",575,{"inputs":[{"name":"internalstackelement"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"new","","",576,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",576,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",576,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",576,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",576,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",576,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",576,null],[11,"top","","Returns the top-most element (if any).",576,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",577,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",577,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",577,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",578,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",578,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",579,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",579,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",579,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",579,null],[11,"read_enum_variant_arg","","",579,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",579,null],[11,"read_enum_struct_variant_field","","",579,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",579,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",579,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",579,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",579,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",579,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",579,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",579,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",579,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",579,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",579,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",579,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",579,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",579,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",560,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",63,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",409,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","ethcore_util::standard::option","",371,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"write_str","rustc_serialize::json","",580,{"inputs":[{"name":"formatshim"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",560,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",581,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",582,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",583,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",583,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",560,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[4,"Json","ethcore_util::standard","Represents a json value",null,null],[13,"I64","","",560,null],[13,"U64","","",560,null],[13,"F64","","",560,null],[13,"String","","",560,null],[13,"Boolean","","",560,null],[13,"Array","","",560,null],[13,"Object","","",560,null],[13,"Null","","",560,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",584,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",585,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[4,"FromHexError","","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",566,null],[13,"InvalidHexLength","","The input had an invalid length",566,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the\nspace taken up by the value itself (i.e. what size_of::<T> measures, more or less); that\nspace is handled by the implementation of HeapSizeOf for Box<T> below.",586,{"inputs":[{"name":"heapsizeof"}],"output":{"name":"usize"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",587,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",587,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",587,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",587,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",587,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",587,null],[11,"slice","","Return a sliced iterator.",587,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",587,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",587,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",587,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",587,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements. For each pair the closure\nis passed the latest two elements, `x`, `y` and may return either `Ok(z)`\nto merge the two values or `Err((x, y))` to indicate they can't be merged.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",587,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",587,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",587,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",587,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",587,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",587,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",587,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",587,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",587,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",587,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",587,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",587,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it's possible to tell.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",587,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",587,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[0,"from_json","ethcore_util","TODO [Gav Wood] Please document me",null,null],[8,"FromJson","ethcore_util::from_json","TODO [Gav Wood] Please document me",null,null],[10,"from_json","","TODO [Gav Wood] Please document me",588,{"inputs":[{"name":"fromjson"},{"name":"json"}],"output":{"name":"self"}}],[0,"common","ethcore_util","TODO [Gav Wood] Please document me",null,null],[5,"flush","ethcore_util::common","TODO [Gav Wood] Please document me",null,{"inputs":[{"name":"string"}],"output":null}],[0,"error","ethcore_util","General error types for use in ethcore.",null,null],[4,"BaseDataError","ethcore_util::error","TODO [Gav Wood] Please document me",null,null],[13,"NegativelyReferencedHash","","TODO [Gav Wood] Please document me",589,null],[4,"UtilError","","General error type which should be capable of representing all errors in ethcore.",null,null],[13,"Crypto","","TODO [Gav Wood] Please document me",590,null],[13,"StdIo","","TODO [Gav Wood] Please document me",590,null],[13,"Io","","TODO [Gav Wood] Please document me",590,null],[13,"AddressParse","","TODO [Gav Wood] Please document me",590,null],[13,"AddressResolve","","TODO [Gav Wood] Please document me",590,null],[13,"FromHex","","TODO [Gav Wood] Please document me",590,null],[13,"BaseData","","TODO [Gav Wood] Please document me",590,null],[13,"Network","","TODO [Gav Wood] Please document me",590,null],[13,"Decoder","","TODO [Gav Wood] Please document me",590,null],[13,"SimpleString","","TODO [Gav Wood] Please document me",590,null],[13,"BadSize","","TODO [Gav Wood] Please document me",590,null],[11,"fmt","","",589,{"inputs":[{"name":"basedataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",590,{"inputs":[{"name":"utilerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"fromhexerror"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"basedataerror"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"networkerror"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"error"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"ioerror"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"cryptoerror"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"addrparseerror"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"decodererror"}],"output":{"name":"utilerror"}}],[11,"from","","",590,{"inputs":[{"name":"utilerror"},{"name":"string"}],"output":{"name":"utilerror"}}],[0,"hash","ethcore_util","General hash types, a fixed-size raw-data type used as the output of hash functions.",null,null],[3,"H32","ethcore_util::hash","TODO [Gav Wood] Please document me",null,null],[3,"H64","","TODO [Gav Wood] Please document me",null,null],[3,"H128","","TODO [Gav Wood] Please document me",null,null],[3,"Address","","TODO [Gav Wood] Please document me",null,null],[3,"H256","","TODO [Gav Wood] Please document me",null,null],[3,"H264","","TODO [Gav Wood] Please document me",null,null],[3,"H512","","TODO [Gav Wood] Please document me",null,null],[3,"H520","","TODO [Gav Wood] Please document me",null,null],[3,"H1024","","TODO [Gav Wood] Please document me",null,null],[3,"H2048","","TODO [Gav Wood] Please document me",null,null],[5,"h256_from_hex","","TODO [Gav Wood] Please document me",null,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[5,"h256_from_u64","","TODO [Gav Wood] Please document me",null,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[5,"address_from_hex","","TODO [Gav Wood] Please document me",null,{"inputs":[{"name":"str"}],"output":{"name":"address"}}],[5,"address_from_u64","","TODO [Gav Wood] Please document me",null,{"inputs":[{"name":"u64"}],"output":{"name":"address"}}],[7,"ZERO_ADDRESS","","Constant address for point 0. Often used as a default.",null,null],[7,"ZERO_H256","","Constant 256-bit datum for 0. Often used as a default.",null,null],[8,"FixedHash","","Trait for a fixed-size byte array to be used as the output of hash functions.",null,null],[10,"new","","TODO [Gav Wood] Please document me",591,{"inputs":[{"name":"fixedhash"}],"output":{"name":"self"}}],[10,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",591,{"inputs":[{"name":"fixedhash"}],"output":{"name":"self"}}],[10,"random","","TODO [debris] Please document me",591,{"inputs":[{"name":"fixedhash"}],"output":{"name":"self"}}],[10,"randomize","","TODO [debris] Please document me",591,{"inputs":[{"name":"fixedhash"}],"output":null}],[10,"size","","TODO [arkpar] Please document me",591,{"inputs":[{"name":"fixedhash"}],"output":{"name":"usize"}}],[10,"from_slice","","TODO [arkpar] Please document me",591,null],[10,"clone_from_slice","","TODO [arkpar] Please document me",591,null],[10,"copy_to","","TODO [Gav Wood] Please document me",591,null],[10,"shift_bloomed","","TODO [Gav Wood] Please document me",591,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_bloomed","","TODO [debris] Please document me",591,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"self"}}],[10,"bloom_part","","TODO [Gav Wood] Please document me",591,{"inputs":[{"name":"fixedhash"},{"name":"usize"}],"output":{"name":"t"}}],[10,"contains_bloomed","","TODO [debris] Please document me",591,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"bool"}}],[10,"contains","","TODO [arkpar] Please document me",591,{"inputs":[{"name":"fixedhash"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_zero","","TODO [debris] Please document me",591,{"inputs":[{"name":"fixedhash"}],"output":{"name":"bool"}}],[11,"from","","",592,{"inputs":[{"name":"h256"},{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",592,{"inputs":[{"name":"h256"},{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",593,{"inputs":[{"name":"address"},{"name":"h256"}],"output":{"name":"address"}}],[11,"from","","",594,{"inputs":[{"name":"h64"},{"name":"h256"}],"output":{"name":"h64"}}],[11,"from","","",592,{"inputs":[{"name":"h256"},{"name":"address"}],"output":{"name":"h256"}}],[11,"from","","",592,{"inputs":[{"name":"h256"},{"name":"address"}],"output":{"name":"h256"}}],[11,"bytes","","",595,null],[11,"deref","","",595,null],[11,"deref_mut","","",595,null],[11,"new","","",595,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"zero","","",595,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"random","","",595,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"randomize","","",595,{"inputs":[{"name":"h32"}],"output":null}],[11,"size","","",595,{"inputs":[{"name":"h32"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",595,null],[11,"from_slice","","",595,null],[11,"copy_to","","",595,null],[11,"shift_bloomed","","",595,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",595,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",595,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",595,{"inputs":[{"name":"h32"}],"output":{"name":"bool"}}],[11,"from_str","","",595,{"inputs":[{"name":"h32"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",595,{"inputs":[{"name":"h32"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",595,{"inputs":[{"name":"h32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",595,{"inputs":[{"name":"h32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",595,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"eq","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",595,{"inputs":[{"name":"h32"},{"name":"h"}],"output":null}],[11,"index","","",595,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",595,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",595,null],[11,"index_mut","","",595,null],[11,"index","","",595,null],[11,"index_mut","","",595,null],[11,"bitor","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":null}],[11,"bitand","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",595,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",595,{"inputs":[{"name":"h32"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",595,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",595,{"inputs":[{"name":"h32"}],"output":{"name":"self"}}],[11,"from","","",595,{"inputs":[{"name":"h32"},{"name":"u64"}],"output":{"name":"h32"}}],[11,"from","","",595,{"inputs":[{"name":"h32"},{"name":"str"}],"output":{"name":"h32"}}],[11,"bytes","","",594,null],[11,"deref","","",594,null],[11,"deref_mut","","",594,null],[11,"new","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"zero","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"random","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"randomize","","",594,{"inputs":[{"name":"h64"}],"output":null}],[11,"size","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",594,null],[11,"from_slice","","",594,null],[11,"copy_to","","",594,null],[11,"shift_bloomed","","",594,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",594,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",594,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"bool"}}],[11,"from_str","","",594,{"inputs":[{"name":"h64"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",594,{"inputs":[{"name":"h64"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",594,{"inputs":[{"name":"h64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",594,{"inputs":[{"name":"h64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"eq","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",594,{"inputs":[{"name":"h64"},{"name":"h"}],"output":null}],[11,"index","","",594,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",594,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",594,null],[11,"index_mut","","",594,null],[11,"index","","",594,null],[11,"index_mut","","",594,null],[11,"bitor","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":null}],[11,"bitand","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",594,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",594,{"inputs":[{"name":"h64"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",594,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"self"}}],[11,"from","","",594,{"inputs":[{"name":"h64"},{"name":"u64"}],"output":{"name":"h64"}}],[11,"from","","",594,{"inputs":[{"name":"h64"},{"name":"str"}],"output":{"name":"h64"}}],[11,"bytes","","",596,null],[11,"deref","","",596,null],[11,"deref_mut","","",596,null],[11,"new","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"zero","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"random","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"randomize","","",596,{"inputs":[{"name":"h128"}],"output":null}],[11,"size","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",596,null],[11,"from_slice","","",596,null],[11,"copy_to","","",596,null],[11,"shift_bloomed","","",596,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",596,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",596,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"bool"}}],[11,"from_str","","",596,{"inputs":[{"name":"h128"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",596,{"inputs":[{"name":"h128"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",596,{"inputs":[{"name":"h128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",596,{"inputs":[{"name":"h128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"eq","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",596,{"inputs":[{"name":"h128"},{"name":"h"}],"output":null}],[11,"index","","",596,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",596,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",596,null],[11,"index_mut","","",596,null],[11,"index","","",596,null],[11,"index_mut","","",596,null],[11,"bitor","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":null}],[11,"bitand","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",596,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",596,{"inputs":[{"name":"h128"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",596,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"self"}}],[11,"from","","",596,{"inputs":[{"name":"h128"},{"name":"u64"}],"output":{"name":"h128"}}],[11,"from","","",596,{"inputs":[{"name":"h128"},{"name":"str"}],"output":{"name":"h128"}}],[11,"bytes","","",593,null],[11,"deref","","",593,null],[11,"deref_mut","","",593,null],[11,"new","","",593,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"zero","","",593,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"random","","",593,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"randomize","","",593,{"inputs":[{"name":"address"}],"output":null}],[11,"size","","",593,{"inputs":[{"name":"address"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",593,null],[11,"from_slice","","",593,null],[11,"copy_to","","",593,null],[11,"shift_bloomed","","",593,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",593,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",593,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",593,{"inputs":[{"name":"address"}],"output":{"name":"bool"}}],[11,"from_str","","",593,{"inputs":[{"name":"address"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",593,{"inputs":[{"name":"address"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",593,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",593,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",593,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"eq","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",593,{"inputs":[{"name":"address"},{"name":"h"}],"output":null}],[11,"index","","",593,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",593,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",593,null],[11,"index_mut","","",593,null],[11,"index","","",593,null],[11,"index_mut","","",593,null],[11,"bitor","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":null}],[11,"bitand","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",593,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",593,{"inputs":[{"name":"address"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",593,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",593,{"inputs":[{"name":"address"}],"output":{"name":"self"}}],[11,"from","","",593,{"inputs":[{"name":"address"},{"name":"u64"}],"output":{"name":"address"}}],[11,"from","","",593,{"inputs":[{"name":"address"},{"name":"str"}],"output":{"name":"address"}}],[11,"bytes","","",592,null],[11,"deref","","",592,null],[11,"deref_mut","","",592,null],[11,"new","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"zero","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"random","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"randomize","","",592,{"inputs":[{"name":"h256"}],"output":null}],[11,"size","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",592,null],[11,"from_slice","","",592,null],[11,"copy_to","","",592,null],[11,"shift_bloomed","","",592,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",592,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",592,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"bool"}}],[11,"from_str","","",592,{"inputs":[{"name":"h256"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",592,{"inputs":[{"name":"h256"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",592,{"inputs":[{"name":"h256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",592,{"inputs":[{"name":"h256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"eq","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",592,{"inputs":[{"name":"h256"},{"name":"h"}],"output":null}],[11,"index","","",592,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",592,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",592,null],[11,"index_mut","","",592,null],[11,"index","","",592,null],[11,"index_mut","","",592,null],[11,"bitor","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":null}],[11,"bitand","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",592,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",592,{"inputs":[{"name":"h256"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",592,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"from","","",592,{"inputs":[{"name":"h256"},{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",592,{"inputs":[{"name":"h256"},{"name":"str"}],"output":{"name":"h256"}}],[11,"bytes","","",597,null],[11,"deref","","",597,null],[11,"deref_mut","","",597,null],[11,"new","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"zero","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"random","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"randomize","","",597,{"inputs":[{"name":"h264"}],"output":null}],[11,"size","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",597,null],[11,"from_slice","","",597,null],[11,"copy_to","","",597,null],[11,"shift_bloomed","","",597,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",597,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",597,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"bool"}}],[11,"from_str","","",597,{"inputs":[{"name":"h264"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",597,{"inputs":[{"name":"h264"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",597,{"inputs":[{"name":"h264"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",597,{"inputs":[{"name":"h264"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"eq","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",597,{"inputs":[{"name":"h264"},{"name":"h"}],"output":null}],[11,"index","","",597,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",597,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",597,null],[11,"index_mut","","",597,null],[11,"index","","",597,null],[11,"index_mut","","",597,null],[11,"bitor","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":null}],[11,"bitand","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",597,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",597,{"inputs":[{"name":"h264"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",597,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"self"}}],[11,"from","","",597,{"inputs":[{"name":"h264"},{"name":"u64"}],"output":{"name":"h264"}}],[11,"from","","",597,{"inputs":[{"name":"h264"},{"name":"str"}],"output":{"name":"h264"}}],[11,"bytes","","",598,null],[11,"deref","","",598,null],[11,"deref_mut","","",598,null],[11,"new","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"zero","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"random","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"randomize","","",598,{"inputs":[{"name":"h512"}],"output":null}],[11,"size","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",598,null],[11,"from_slice","","",598,null],[11,"copy_to","","",598,null],[11,"shift_bloomed","","",598,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",598,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",598,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"bool"}}],[11,"from_str","","",598,{"inputs":[{"name":"h512"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",598,{"inputs":[{"name":"h512"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",598,{"inputs":[{"name":"h512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",598,{"inputs":[{"name":"h512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"eq","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",598,{"inputs":[{"name":"h512"},{"name":"h"}],"output":null}],[11,"index","","",598,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",598,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",598,null],[11,"index_mut","","",598,null],[11,"index","","",598,null],[11,"index_mut","","",598,null],[11,"bitor","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":null}],[11,"bitand","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",598,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",598,{"inputs":[{"name":"h512"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",598,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"self"}}],[11,"from","","",598,{"inputs":[{"name":"h512"},{"name":"u64"}],"output":{"name":"h512"}}],[11,"from","","",598,{"inputs":[{"name":"h512"},{"name":"str"}],"output":{"name":"h512"}}],[11,"bytes","","",599,null],[11,"deref","","",599,null],[11,"deref_mut","","",599,null],[11,"new","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"zero","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"random","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"randomize","","",599,{"inputs":[{"name":"h520"}],"output":null}],[11,"size","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",599,null],[11,"from_slice","","",599,null],[11,"copy_to","","",599,null],[11,"shift_bloomed","","",599,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",599,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",599,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"bool"}}],[11,"from_str","","",599,{"inputs":[{"name":"h520"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",599,{"inputs":[{"name":"h520"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",599,{"inputs":[{"name":"h520"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",599,{"inputs":[{"name":"h520"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"eq","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",599,{"inputs":[{"name":"h520"},{"name":"h"}],"output":null}],[11,"index","","",599,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",599,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",599,null],[11,"index_mut","","",599,null],[11,"index","","",599,null],[11,"index_mut","","",599,null],[11,"bitor","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":null}],[11,"bitand","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",599,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",599,{"inputs":[{"name":"h520"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",599,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"self"}}],[11,"from","","",599,{"inputs":[{"name":"h520"},{"name":"u64"}],"output":{"name":"h520"}}],[11,"from","","",599,{"inputs":[{"name":"h520"},{"name":"str"}],"output":{"name":"h520"}}],[11,"bytes","","",600,null],[11,"deref","","",600,null],[11,"deref_mut","","",600,null],[11,"new","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"zero","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"random","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"randomize","","",600,{"inputs":[{"name":"h1024"}],"output":null}],[11,"size","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",600,null],[11,"from_slice","","",600,null],[11,"copy_to","","",600,null],[11,"shift_bloomed","","",600,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",600,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",600,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"bool"}}],[11,"from_str","","",600,{"inputs":[{"name":"h1024"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",600,{"inputs":[{"name":"h1024"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",600,{"inputs":[{"name":"h1024"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",600,{"inputs":[{"name":"h1024"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"eq","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",600,{"inputs":[{"name":"h1024"},{"name":"h"}],"output":null}],[11,"index","","",600,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",600,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",600,null],[11,"index_mut","","",600,null],[11,"index","","",600,null],[11,"index_mut","","",600,null],[11,"bitor","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":null}],[11,"bitand","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",600,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",600,{"inputs":[{"name":"h1024"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",600,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"self"}}],[11,"from","","",600,{"inputs":[{"name":"h1024"},{"name":"u64"}],"output":{"name":"h1024"}}],[11,"from","","",600,{"inputs":[{"name":"h1024"},{"name":"str"}],"output":{"name":"h1024"}}],[11,"bytes","","",601,null],[11,"deref","","",601,null],[11,"deref_mut","","",601,null],[11,"new","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"zero","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"random","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"randomize","","",601,{"inputs":[{"name":"h2048"}],"output":null}],[11,"size","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",601,null],[11,"from_slice","","",601,null],[11,"copy_to","","",601,null],[11,"shift_bloomed","","",601,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",601,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",601,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"bool"}}],[11,"from_str","","",601,{"inputs":[{"name":"h2048"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","",601,{"inputs":[{"name":"h2048"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",601,{"inputs":[{"name":"h2048"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",601,{"inputs":[{"name":"h2048"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"eq","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",601,{"inputs":[{"name":"h2048"},{"name":"h"}],"output":null}],[11,"index","","",601,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",601,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",601,null],[11,"index_mut","","",601,null],[11,"index","","",601,null],[11,"index_mut","","",601,null],[11,"bitor","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitor_assign","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":null}],[11,"bitand","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",601,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","TODO [Gav Wood] Please document me",601,{"inputs":[{"name":"h2048"}],"output":{"name":"string"}}],[11,"from_bloomed","","TODO [Gav Wood] Please document me",601,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"self"}}],[11,"from","","",601,{"inputs":[{"name":"h2048"},{"name":"u64"}],"output":{"name":"h2048"}}],[11,"from","","",601,{"inputs":[{"name":"h2048"},{"name":"str"}],"output":{"name":"h2048"}}],[0,"uint","ethcore_util","Big unsigned integer types",null,null],[3,"U512","ethcore_util::uint","Little-endian large integer type",null,null],[3,"U256","","Little-endian large integer type",null,null],[3,"U128","","Little-endian large integer type",null,null],[17,"ZERO_U256","","TODO [Gav Wood] Please document me",null,null],[17,"ONE_U256","","TODO [Gav Wood] Please document me",null,null],[17,"BAD_U256","","TODO [Gav Wood] Please document me",null,null],[8,"Uint","","TODO [Gav Wood] Please document me",null,null],[18,"SIZE","","Size of this type.",602,null],[10,"zero","","TODO [Gav Wood] Please document me",602,{"inputs":[{"name":"uint"}],"output":{"name":"self"}}],[10,"one","","TODO [Gav Wood] Please document me",602,{"inputs":[{"name":"uint"}],"output":{"name":"self"}}],[16,"FromDecStrErr","","TODO [Gav Wood] Please document me",602,null],[10,"from_dec_str","","TODO [Gav Wood] Please document me",602,{"inputs":[{"name":"uint"},{"name":"str"}],"output":{"name":"result"}}],[10,"low_u32","","Conversion to u32",602,{"inputs":[{"name":"uint"}],"output":{"name":"u32"}}],[10,"low_u64","","Conversion to u64",602,{"inputs":[{"name":"uint"}],"output":{"name":"u64"}}],[10,"as_u32","","Conversion to u32 with overflow checking",602,{"inputs":[{"name":"uint"}],"output":{"name":"u32"}}],[10,"as_u64","","Conversion to u64 with overflow checking",602,{"inputs":[{"name":"uint"}],"output":{"name":"u64"}}],[10,"bits","","Return the least number of bits needed to represent the number",602,{"inputs":[{"name":"uint"}],"output":{"name":"usize"}}],[10,"bit","","Return if specific bit is set",602,{"inputs":[{"name":"uint"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"byte","","Return single byte",602,{"inputs":[{"name":"uint"},{"name":"usize"}],"output":{"name":"u8"}}],[10,"to_bytes","","Get this Uint as slice of bytes",602,null],[10,"exp10","","Create `Uint(10**n)`",602,{"inputs":[{"name":"uint"},{"name":"usize"}],"output":{"name":"self"}}],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",602,{"inputs":[{"name":"uint"},{"name":"self"}],"output":{"name":"self"}}],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",602,null],[10,"overflowing_add","","TODO [debris] Please document me",602,null],[10,"overflowing_sub","","TODO [debris] Please document me",602,null],[10,"overflowing_mul","","TODO [debris] Please document me",602,null],[10,"overflowing_div","","TODO [debris] Please document me",602,null],[10,"overflowing_rem","","TODO [debris] Please document me",602,null],[10,"overflowing_neg","","TODO [debris] Please document me",602,null],[10,"overflowing_shl","","TODO [Gav Wood] Please document me",602,null],[11,"eq","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"clone","","",603,{"inputs":[{"name":"u512"}],"output":{"name":"u512"}}],[17,"SIZE","","",null,null],[11,"from_dec_str","","TODO: optimize, throw appropriate err",603,{"inputs":[{"name":"u512"},{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",603,{"inputs":[{"name":"u512"}],"output":{"name":"u32"}}],[11,"low_u64","","",603,{"inputs":[{"name":"u512"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",603,{"inputs":[{"name":"u512"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",603,{"inputs":[{"name":"u512"}],"output":{"name":"u64"}}],[11,"bits","","Return the least number of bits needed to represent the number",603,{"inputs":[{"name":"u512"}],"output":{"name":"usize"}}],[11,"bit","","",603,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",603,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_bytes","","",603,null],[11,"exp10","","",603,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",603,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"one","","",603,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",603,null],[11,"overflowing_add","","",603,null],[11,"overflowing_sub","","",603,null],[11,"overflowing_mul","","",603,null],[11,"overflowing_div","","",603,null],[11,"overflowing_rem","","",603,null],[11,"overflowing_neg","","",603,null],[11,"overflowing_shl","","",603,null],[11,"default","","",603,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"u64"}],"output":{"name":"u512"}}],[11,"from_json","","",603,{"inputs":[{"name":"u512"},{"name":"json"}],"output":{"name":"self"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"u8"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"u16"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"u32"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"i64"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"i8"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"i16"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"i32"}],"output":{"name":"u512"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"isize"}],"output":{"name":"u512"}}],[11,"from","","",603,null],[11,"from_str","","",603,{"inputs":[{"name":"u512"},{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"sub","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"mul","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"div","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"rem","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"add_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"sub_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"mul_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"div_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"rem_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"add_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"sub_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"mul_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"div_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"rem_assign","","",603,{"inputs":[{"name":"u512"},{"name":"self"}],"output":null}],[11,"bitand","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitxor","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitor","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"not","","",603,{"inputs":[{"name":"u512"}],"output":{"name":"u512"}}],[11,"shl","","",603,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shr","","",603,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"cmp","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",603,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"option"}}],[11,"fmt","","",603,{"inputs":[{"name":"u512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",603,{"inputs":[{"name":"u512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",603,{"inputs":[{"name":"u512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",603,{"inputs":[{"name":"u512"},{"name":"h"}],"output":null}],[11,"eq","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"clone","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"u256"}}],[17,"SIZE","","",null,null],[11,"from_dec_str","","TODO: optimize, throw appropriate err",604,{"inputs":[{"name":"u256"},{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"u32"}}],[11,"low_u64","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",604,{"inputs":[{"name":"u256"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",604,{"inputs":[{"name":"u256"}],"output":{"name":"u64"}}],[11,"bits","","Return the least number of bits needed to represent the number",604,{"inputs":[{"name":"u256"}],"output":{"name":"usize"}}],[11,"bit","","",604,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",604,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_bytes","","",604,null],[11,"exp10","","",604,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"one","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",604,null],[11,"overflowing_add","","",604,null],[11,"overflowing_sub","","",604,null],[11,"overflowing_mul","","",604,null],[11,"overflowing_div","","",604,null],[11,"overflowing_rem","","",604,null],[11,"overflowing_neg","","",604,null],[11,"overflowing_shl","","",604,null],[11,"default","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"u64"}],"output":{"name":"u256"}}],[11,"from_json","","",604,{"inputs":[{"name":"u256"},{"name":"json"}],"output":{"name":"self"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"u8"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"u16"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"u32"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"i64"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"i8"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"i16"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"i32"}],"output":{"name":"u256"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"isize"}],"output":{"name":"u256"}}],[11,"from","","",604,null],[11,"from_str","","",604,{"inputs":[{"name":"u256"},{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"sub","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"mul","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"div","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"rem","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"add_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"sub_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"mul_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"div_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"rem_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"add_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"sub_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"mul_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"div_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"rem_assign","","",604,{"inputs":[{"name":"u256"},{"name":"self"}],"output":null}],[11,"bitand","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitxor","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitor","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"not","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"u256"}}],[11,"shl","","",604,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shr","","",604,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"cmp","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",604,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"option"}}],[11,"fmt","","",604,{"inputs":[{"name":"u256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",604,{"inputs":[{"name":"u256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",604,{"inputs":[{"name":"u256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",604,{"inputs":[{"name":"u256"},{"name":"h"}],"output":null}],[11,"eq","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"clone","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[17,"SIZE","","",null,null],[11,"from_dec_str","","TODO: optimize, throw appropriate err",605,{"inputs":[{"name":"u128"},{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"low_u64","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",605,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",605,{"inputs":[{"name":"u128"}],"output":{"name":"u64"}}],[11,"bits","","Return the least number of bits needed to represent the number",605,{"inputs":[{"name":"u128"}],"output":{"name":"usize"}}],[11,"bit","","",605,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",605,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_bytes","","",605,null],[11,"exp10","","",605,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"one","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",605,null],[11,"overflowing_add","","",605,null],[11,"overflowing_sub","","",605,null],[11,"overflowing_mul","","",605,null],[11,"overflowing_div","","",605,null],[11,"overflowing_rem","","",605,null],[11,"overflowing_neg","","",605,null],[11,"overflowing_shl","","",605,null],[11,"default","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"from_json","","",605,{"inputs":[{"name":"u128"},{"name":"json"}],"output":{"name":"self"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"from","","",605,null],[11,"from_str","","",605,{"inputs":[{"name":"u128"},{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"add_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"sub_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"mul_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"div_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"rem_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"add_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"sub_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"mul_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"div_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"rem_assign","","",605,{"inputs":[{"name":"u128"},{"name":"self"}],"output":null}],[11,"bitand","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"not","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"shl","","",605,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",605,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"cmp","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",605,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"fmt","","",605,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",605,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",605,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",605,{"inputs":[{"name":"u128"},{"name":"h"}],"output":null}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"u256"}],"output":{"name":"u128"}}],[11,"from","","",605,{"inputs":[{"name":"u128"},{"name":"u512"}],"output":{"name":"u128"}}],[11,"from","","",603,{"inputs":[{"name":"u512"},{"name":"u128"}],"output":{"name":"u512"}}],[11,"from","","",604,{"inputs":[{"name":"u256"},{"name":"u128"}],"output":{"name":"u256"}}],[0,"bytes","ethcore_util","Unified interfaces for bytes operations on basic types",null,null],[3,"PrettySlice","ethcore_util::bytes","TODO [Gav Wood] Please document me",null,null],[4,"BytesRef","","TODO [debris] Please document me",null,null],[13,"Flexible","","TODO [debris] Please document me",606,null],[13,"Fixed","","TODO [debris] Please document me",606,null],[4,"FromBytesError","","Error returned when FromBytes conversation goes wrong",null,null],[13,"DataIsTooShort","","TODO [debris] Please document me",607,null],[13,"DataIsTooLong","","TODO [debris] Please document me",607,null],[6,"Bytes","","Vector of bytes",null,null],[6,"FromBytesResult","","Alias for the result of FromBytes trait",null,null],[8,"ToPretty","","TODO [Gav Wood] Please document me",null,null],[10,"pretty","","TODO [Gav Wood] Please document me",608,{"inputs":[{"name":"topretty"}],"output":{"name":"prettyslice"}}],[11,"to_hex","","TODO [Gav Wood] Please document me",608,{"inputs":[{"name":"topretty"}],"output":{"name":"string"}}],[8,"BytesConvertable","","Slice of bytes to underlying memory",null,null],[10,"bytes","","TODO [Gav Wood] Please document me",609,null],[11,"as_slice","","TODO [Gav Wood] Please document me",609,null],[11,"to_bytes","","TODO [Gav Wood] Please document me",609,{"inputs":[{"name":"bytesconvertable"}],"output":{"name":"bytes"}}],[8,"ToBytes","","Converts given type to its shortest representation in bytes",null,null],[10,"to_bytes","","TODO [Gav Wood] Please document me",610,{"inputs":[{"name":"tobytes"}],"output":{"name":"vec"}}],[11,"to_bytes_len","","TODO [Gav Wood] Please document me",610,{"inputs":[{"name":"tobytes"}],"output":{"name":"usize"}}],[11,"first_byte","","TODO [debris] Please document me",610,{"inputs":[{"name":"tobytes"}],"output":{"name":"option"}}],[8,"FromBytes","","Converts to given type from its bytes representation",null,null],[10,"from_bytes","","TODO [debris] Please document me",611,null],[8,"Populatable","","Simple trait to allow for raw population of a Sized object from a byte slice.",null,null],[11,"populate_raw","","Copies a bunch of bytes `d` to `self`, overwriting as necessary.",612,null],[11,"copy_raw","","Copies a bunch of bytes `d` to `self`, overwriting as necessary.",612,null],[11,"populate_raw_from","","Copies the raw representation of an object `d` to `self`, overwriting as necessary.",612,{"inputs":[{"name":"populatable"},{"name":"bytesconvertable"}],"output":null}],[11,"copy_raw_from","","Copies the raw representation of an object `d` to `self`, overwriting as necessary.",612,{"inputs":[{"name":"populatable"},{"name":"bytesconvertable"}],"output":null}],[10,"as_slice_mut","","Get the raw slice for this object.",612,null],[11,"fmt","","",613,{"inputs":[{"name":"prettyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",613,{"inputs":[{"name":"prettyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pretty","","",614,{"inputs":[{"name":"bytes"}],"output":{"name":"prettyslice"}}],[11,"deref","","",606,null],[11,"deref_mut","","",606,null],[11,"bytes","collections::vec","",63,null],[11,"to_bytes","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"to_bytes_len","","",89,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"to_bytes","ethcore_util::uint","",604,{"inputs":[{"name":"u256"}],"output":{"name":"vec"}}],[11,"to_bytes_len","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"usize"}}],[11,"to_bytes","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"vec"}}],[11,"to_bytes_len","","",605,{"inputs":[{"name":"u128"}],"output":{"name":"usize"}}],[11,"eq","ethcore_util::bytes","",607,{"inputs":[{"name":"frombyteserror"},{"name":"frombyteserror"}],"output":{"name":"bool"}}],[11,"ne","","",607,{"inputs":[{"name":"frombyteserror"},{"name":"frombyteserror"}],"output":{"name":"bool"}}],[11,"fmt","","",607,{"inputs":[{"name":"frombyteserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",607,{"inputs":[{"name":"frombyteserror"}],"output":{"name":"str"}}],[11,"fmt","","",607,{"inputs":[{"name":"frombyteserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bytes","collections::string","",89,null],[11,"from_bytes","ethcore_util::uint","",604,null],[11,"from_bytes","","",605,null],[0,"rlp","ethcore_util","Rlp serialization module",null,null],[5,"decode","ethcore_util::rlp","Shortcut function to decode trusted rlp",null,null],[5,"encode","","Shortcut function to encode structure into rlp.",null,{"inputs":[{"name":"e"}],"output":{"name":"vec"}}],[0,"rlptraits","","TODO [Gav Wood] Please document me",null,null],[8,"Decoder","ethcore_util::rlp::rlptraits","TODO [debris] Please document me",null,null],[10,"read_value","","TODO [debris] Please document me",615,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"as_list","","TODO [arkpar] Please document me",615,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"as_rlp","","TODO [Gav Wood] Please document me",615,{"inputs":[{"name":"decoder"}],"output":{"name":"untrustedrlp"}}],[10,"as_raw","","TODO [debris] Please document me",615,null],[8,"Decodable","","TODO [debris] Please document me",null,null],[10,"decode","","TODO [debris] Please document me",616,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"View","","TODO [debris] Please document me",null,null],[16,"Prototype","","TODO [debris] Please document me",617,null],[16,"PayloadInfo","","TODO [debris] Please document me",617,null],[16,"Data","","TODO [debris] Please document me",617,null],[16,"Item","","TODO [debris] Please document me",617,null],[16,"Iter","","TODO [debris] Please document me",617,null],[10,"new","","Creates a new instance of `Rlp` reader",617,null],[10,"as_raw","","The raw data of the RLP.",617,null],[10,"prototype","","Get the prototype of the RLP.",617,{"inputs":[{"name":"view"}],"output":{"name":"prototype"}}],[10,"payload_info","","TODO [debris] Please document me",617,{"inputs":[{"name":"view"}],"output":{"name":"payloadinfo"}}],[10,"data","","TODO [debris] Please document me",617,{"inputs":[{"name":"view"}],"output":{"name":"data"}}],[10,"item_count","","Returns number of RLP items.",617,{"inputs":[{"name":"view"}],"output":{"name":"usize"}}],[10,"size","","Returns the number of bytes in the data, or zero if it isn't data.",617,{"inputs":[{"name":"view"}],"output":{"name":"usize"}}],[10,"at","","Get view onto RLP-slice at index.",617,{"inputs":[{"name":"view"},{"name":"usize"}],"output":{"name":"item"}}],[10,"is_null","","No value",617,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_empty","","Contains a zero-length string or zero-length list.",617,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_list","","List value",617,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_data","","String value",617,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_int","","Int value",617,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"iter","","Get iterator over rlp-slices",617,{"inputs":[{"name":"view"}],"output":{"name":"iter"}}],[10,"as_val","","TODO [debris] Please document me",617,{"inputs":[{"name":"view"}],"output":{"name":"result"}}],[10,"val_at","","TODO [debris] Please document me",617,{"inputs":[{"name":"view"},{"name":"usize"}],"output":{"name":"result"}}],[8,"Encoder","","TODO [debris] Please document me",null,null],[10,"emit_value","","TODO [debris] Please document me",618,null],[10,"emit_list","","TODO [Gav Wood] Please document me",618,null],[10,"emit_raw","","TODO [debris] Please document me",618,null],[8,"Encodable","","TODO [debris] Please document me",null,null],[10,"encode","","TODO [debris] Please document me",619,null],[8,"Stream","","TODO [debris] Please document me",null,null],[10,"new","","Initializes instance of empty `Stream`.",620,{"inputs":[{"name":"stream"}],"output":{"name":"self"}}],[10,"new_list","","Initializes the `Stream` as a list.",620,{"inputs":[{"name":"stream"},{"name":"usize"}],"output":{"name":"self"}}],[10,"append","","Apends value to the end of stream, chainable.",620,{"inputs":[{"name":"stream"},{"name":"e"}],"output":{"name":"self"}}],[10,"append_list","","Declare appending the list of given size, chainable.",620,{"inputs":[{"name":"stream"},{"name":"usize"}],"output":{"name":"self"}}],[10,"append_empty_data","","Apends null to the end of stream, chainable.",620,{"inputs":[{"name":"stream"}],"output":{"name":"self"}}],[10,"append_raw","","Appends raw (pre-serialised) RLP data. Use with caution. Chainable.",620,null],[10,"clear","","Clear the output stream so far.",620,{"inputs":[{"name":"stream"}],"output":null}],[10,"is_finished","","Returns true if stream doesnt expect any more items.",620,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[10,"as_raw","","TODO [debris] Please document me",620,null],[10,"out","","Streams out encoded bytes.",620,{"inputs":[{"name":"stream"}],"output":{"name":"vec"}}],[0,"rlperrors","ethcore_util::rlp","TODO [Gav Wood] Please document me",null,null],[4,"DecoderError","ethcore_util::rlp::rlperrors","TODO [debris] Please document me",null,null],[13,"FromBytesError","","TODO [debris] Please document me",621,null],[13,"RlpIsTooShort","","TODO [debris] Please document me",621,null],[13,"RlpExpectedToBeList","","TODO [debris] Please document me",621,null],[13,"RlpExpectedToBeData","","TODO [Gav Wood] Please document me",621,null],[13,"RlpIncorrectListLen","","TODO [Gav Wood] Please document me",621,null],[13,"RlpDataLenWithZeroPrefix","","TODO [Gav Wood] Please document me",621,null],[13,"RlpListLenWithZeroPrefix","","TODO [Gav Wood] Please document me",621,null],[13,"RlpInvalidIndirection","","TODO [debris] Please document me",621,null],[11,"eq","","",621,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",621,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",621,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",621,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"fmt","","",621,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",621,{"inputs":[{"name":"decodererror"},{"name":"frombyteserror"}],"output":{"name":"decodererror"}}],[0,"rlpin","ethcore_util::rlp","TODO [debris] Please document me",null,null],[3,"Rlp","ethcore_util::rlp::rlpin","Data-oriented view onto trusted rlp-slice.",null,null],[3,"RlpIterator","","Iterator over trusted rlp-slice list elements.",null,null],[11,"from","","",622,{"inputs":[{"name":"rlp"},{"name":"untrustedrlp"}],"output":{"name":"rlp"}}],[11,"fmt","","",622,{"inputs":[{"name":"rlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",622,{"inputs":[{"name":"rlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `Rlp`",622,null],[11,"as_raw","","",622,null],[11,"prototype","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"prototype"}}],[11,"payload_info","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"payloadinfo"}}],[11,"data","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"data"}}],[11,"item_count","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"usize"}}],[11,"size","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"usize"}}],[11,"at","","",622,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"item"}}],[11,"is_null","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_empty","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_list","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_data","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_int","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"iter","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"iter"}}],[11,"as_val","","",622,{"inputs":[{"name":"rlp"}],"output":{"name":"result"}}],[11,"val_at","","",622,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"result"}}],[11,"as_val","","TODO [debris] Please document me",622,{"inputs":[{"name":"rlp"}],"output":{"name":"t"}}],[11,"val_at","","TODO [debris] Please document me",622,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"t"}}],[11,"next","","",623,{"inputs":[{"name":"rlpiterator"}],"output":{"name":"option"}}],[0,"untrusted_rlp","ethcore_util::rlp","TODO [debris] Please document me",null,null],[3,"PayloadInfo","ethcore_util::rlp::untrusted_rlp","Stores basic information about item",null,null],[12,"header_len","","TODO [debris] Please document me",624,null],[12,"value_len","","TODO [debris] Please document me",624,null],[3,"UntrustedRlp","","Data-oriented view onto rlp-slice.",null,null],[3,"UntrustedRlpIterator","","Iterator over rlp-slice list elements.",null,null],[4,"Prototype","","TODO [debris] Please document me",null,null],[13,"Null","","TODO [debris] Please document me",625,null],[13,"Data","","TODO [debris] Please document me",625,null],[13,"List","","TODO [debris] Please document me",625,null],[11,"fmt","","",625,{"inputs":[{"name":"prototype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",626,{"inputs":[{"name":"untrustedrlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"untrustedrlp"}}],[11,"fmt","","",626,{"inputs":[{"name":"untrustedrlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",626,null],[11,"as_raw","","",626,null],[11,"prototype","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"prototype"}}],[11,"payload_info","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"payloadinfo"}}],[11,"data","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"data"}}],[11,"item_count","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"usize"}}],[11,"size","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"usize"}}],[11,"at","","",626,{"inputs":[{"name":"untrustedrlp"},{"name":"usize"}],"output":{"name":"item"}}],[11,"is_null","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_empty","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_list","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_data","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_int","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"iter","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"iter"}}],[11,"as_val","","",626,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"result"}}],[11,"val_at","","",626,{"inputs":[{"name":"untrustedrlp"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next","","",627,{"inputs":[{"name":"untrustedrlpiterator"}],"output":{"name":"option"}}],[11,"decode","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","ethcore_util::standard::option","",371,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[0,"rlpstream","ethcore_util::rlp","TODO [debris] Please document me",null,null],[3,"RlpStream","ethcore_util::rlp::rlpstream","Appendable rlp encoder.",null,null],[8,"RlpStandard","","TODO [Gav Wood] Please document me",null,null],[10,"rlp_append","","TODO [Gav Wood] Please document me",628,{"inputs":[{"name":"rlpstandard"},{"name":"rlpstream"}],"output":null}],[11,"rlp_bytes","","TODO [Gav Wood] Please document me",628,{"inputs":[{"name":"rlpstandard"}],"output":{"name":"bytes"}}],[11,"rlp_sha3","","TODO [Gav Wood] Please document me",628,{"inputs":[{"name":"rlpstandard"}],"output":{"name":"h256"}}],[11,"new","","",629,{"inputs":[{"name":"rlpstream"}],"output":{"name":"self"}}],[11,"new_list","","",629,{"inputs":[{"name":"rlpstream"},{"name":"usize"}],"output":{"name":"self"}}],[11,"append","","",629,{"inputs":[{"name":"rlpstream"},{"name":"e"}],"output":{"name":"rlpstream"}}],[11,"append_list","","",629,{"inputs":[{"name":"rlpstream"},{"name":"usize"}],"output":{"name":"rlpstream"}}],[11,"append_empty_data","","",629,{"inputs":[{"name":"rlpstream"}],"output":{"name":"rlpstream"}}],[11,"append_raw","","",629,null],[11,"clear","","",629,{"inputs":[{"name":"rlpstream"}],"output":null}],[11,"is_finished","","",629,{"inputs":[{"name":"rlpstream"}],"output":{"name":"bool"}}],[11,"as_raw","","",629,null],[11,"out","","",629,{"inputs":[{"name":"rlpstream"}],"output":{"name":"vec"}}],[11,"drain","","Drain the object and return the underlying ElasticArray.",629,{"inputs":[{"name":"rlpstream"}],"output":{"name":"elasticarray1024"}}],[11,"encode","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"e"}],"output":null}],[11,"encode","","",63,{"inputs":[{"name":"vec"},{"name":"e"}],"output":null}],[11,"encode","ethcore_util::standard::option","",371,{"inputs":[{"name":"option"},{"name":"e"}],"output":null}],[17,"NULL_RLP","ethcore_util::rlp","TODO [arkpar] Please document me",null,null],[17,"EMPTY_LIST_RLP","","TODO [Gav Wood] Please document me",null,null],[17,"SHA3_NULL_RLP","","TODO [arkpar] Please document me",null,null],[17,"SHA3_EMPTY_LIST_RLP","","TODO [debris] Please document me",null,null],[0,"misc","ethcore_util","TODO [Gav Wood] Please document me",null,null],[4,"Diff","ethcore_util::misc","Diff type for specifying a change (or not).",null,null],[13,"Same","","TODO [Gav Wood] Please document me",630,null],[13,"Born","","TODO [Gav Wood] Please document me",630,null],[13,"Changed","","TODO [Gav Wood] Please document me",630,null],[13,"Died","","TODO [Gav Wood] Please document me",630,null],[4,"Filth","","Boolean type for clean/dirty status.",null,null],[13,"Clean","","TODO [Gav Wood] Please document me",631,null],[13,"Dirty","","TODO [Gav Wood] Please document me",631,null],[11,"eq","","",630,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"ne","","",630,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"clone","","",630,{"inputs":[{"name":"diff"}],"output":{"name":"diff"}}],[11,"fmt","","",630,{"inputs":[{"name":"diff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct new object with given `pre` and `post`.",630,{"inputs":[{"name":"diff"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre","","Get the before value, if there is one.",630,{"inputs":[{"name":"diff"}],"output":{"name":"option"}}],[11,"post","","Get the after value, if there is one.",630,{"inputs":[{"name":"diff"}],"output":{"name":"option"}}],[11,"is_same","","Determine whether there was a change or not.",630,{"inputs":[{"name":"diff"}],"output":{"name":"bool"}}],[11,"clone","","",631,{"inputs":[{"name":"filth"}],"output":{"name":"filth"}}],[11,"eq","","",631,{"inputs":[{"name":"filth"},{"name":"filth"}],"output":{"name":"bool"}}],[11,"ne","","",631,{"inputs":[{"name":"filth"},{"name":"filth"}],"output":{"name":"bool"}}],[0,"json_aid","ethcore_util","TODO [Gav Wood] Please document me",null,null],[5,"clean","ethcore_util::json_aid","TODO [Gav Wood] Please document me",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[11,"from_json","","",614,{"inputs":[{"name":"bytes"},{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","collections::btree::map","",409,{"inputs":[{"name":"btreemap"},{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","ethcore_util::standard::option","",371,{"inputs":[{"name":"option"},{"name":"json"}],"output":{"name":"self"}}],[0,"vector","ethcore_util","vector util functions",null,null],[8,"InsertSlice","ethcore_util::vector","TODO [debris] Please document me",null,null],[10,"insert_slice","","TODO [debris] Please document me",632,null],[8,"SharedPrefix","","Returns len of prefix shared with elem",null,null],[10,"shared_prefix_len","","TODO [debris] Please document me",633,null],[11,"insert_slice","collections::vec","",63,null],[11,"shared_prefix_len","","",63,null],[0,"sha3","ethcore_util","Wrapper around tiny-keccak crate.",null,null],[17,"SHA3_EMPTY","ethcore_util::sha3","TODO [Gav Wood] Please document me",null,null],[8,"Hashable","","Types implementing this trait are sha3able.",null,null],[10,"sha3","","Calculate SHA3 of this object.",634,{"inputs":[{"name":"hashable"}],"output":{"name":"h256"}}],[11,"sha3_into","","Calculate SHA3 of this object and place result into dest.",634,null],[0,"hashdb","ethcore_util","Database of byte-slices keyed to their Keccak hash.",null,null],[8,"HashDB","ethcore_util::hashdb","Trait modelling datastore keyed by a 32-byte Keccak hash.",null,null],[10,"keys","","Get the keys in the database together with number of underlying references.",635,{"inputs":[{"name":"hashdb"}],"output":{"name":"hashmap"}}],[10,"lookup","","Deprecated. use `get`.",635,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"get","","Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.",635,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"option"}}],[10,"exists","","Deprecated. Use `contains`.",635,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"contains","","Check for the existance of a hash-key.",635,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"bool"}}],[10,"insert","","Insert a datum item into the DB and return the datum's hash for a later lookup. Insertions\nare counted and the equivalent number of `kill()`s must be performed before the data\nis considered dead.",635,null],[10,"emplace","","Like `insert()` , except you provide the key and the data is all moved.",635,{"inputs":[{"name":"hashdb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[10,"kill","","Deprecated - use `remove`.",635,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":null}],[11,"remove","","Remove a datum previously inserted. Insertions can be \"owed\" such that the same number of `insert()`s may\nhappen without the data being eventually being inserted into the DB.",635,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":null}],[0,"memorydb","ethcore_util","Reference-counted memory-based HashDB implementation.",null,null],[3,"MemoryDB","ethcore_util::memorydb","Reference-counted memory-based HashDB implementation.",null,null],[11,"clone","","",636,{"inputs":[{"name":"memorydb"}],"output":{"name":"memorydb"}}],[11,"fmt","","",636,{"inputs":[{"name":"memorydb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of the memory DB.",636,{"inputs":[{"name":"memorydb"}],"output":{"name":"memorydb"}}],[11,"clear","","Clear all data from the database.",636,{"inputs":[{"name":"memorydb"}],"output":null}],[11,"purge","","Purge all zero-referenced data from the database.",636,{"inputs":[{"name":"memorydb"}],"output":null}],[11,"raw","","Grab the raw information associated with a key. Returns None if the key\ndoesn't exist.",636,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"drain","","TODO [Gav Wood] Please document me",636,{"inputs":[{"name":"memorydb"}],"output":{"name":"hashmap"}}],[11,"denote","","TODO [Gav Wood] Please document me",636,null],[11,"lookup","","",636,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"keys","","",636,{"inputs":[{"name":"memorydb"}],"output":{"name":"hashmap"}}],[11,"exists","","",636,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",636,null],[11,"emplace","","",636,{"inputs":[{"name":"memorydb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"kill","","",636,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":null}],[0,"overlaydb","ethcore_util","Disk-backed HashDB implementation.",null,null],[3,"OverlayDB","ethcore_util::overlaydb","Implementation of the HashDB trait for a disk-backed database with a memory overlay.",null,null],[11,"clone","","",637,{"inputs":[{"name":"overlaydb"}],"output":{"name":"overlaydb"}}],[11,"new","","Create a new instance of OverlayDB given a `backing` database.",637,{"inputs":[{"name":"overlaydb"},{"name":"db"}],"output":{"name":"overlaydb"}}],[11,"new_with_arc","","Create a new instance of OverlayDB given a `backing` database.",637,{"inputs":[{"name":"overlaydb"},{"name":"arc"}],"output":{"name":"overlaydb"}}],[11,"new_temp","","Create a new instance of OverlayDB with an anonymous temporary database.",637,{"inputs":[{"name":"overlaydb"}],"output":{"name":"overlaydb"}}],[11,"commit","","Commit all memory operations to the backing database.",637,{"inputs":[{"name":"overlaydb"}],"output":{"name":"result"}}],[11,"revert","","Revert all operations on this object (i.e. `insert()`s and `kill()`s) since the\nlast `commit()`.",637,{"inputs":[{"name":"overlaydb"}],"output":null}],[11,"keys","","",637,{"inputs":[{"name":"overlaydb"}],"output":{"name":"hashmap"}}],[11,"lookup","","",637,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"exists","","",637,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",637,null],[11,"emplace","","",637,{"inputs":[{"name":"overlaydb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"kill","","",637,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":null}],[0,"journaldb","ethcore_util","Disk-backed HashDB implementation.",null,null],[3,"JournalDB","ethcore_util::journaldb","Implementation of the HashDB trait for a disk-backed database with a memory overlay\nand latent-removal semantics.",null,null],[11,"clone","","",638,{"inputs":[{"name":"journaldb"}],"output":{"name":"journaldb"}}],[11,"new","","Create a new instance given a `backing` database.",638,{"inputs":[{"name":"journaldb"},{"name":"db"}],"output":{"name":"journaldb"}}],[11,"new_temp","","Create a new instance with an anonymous temporary database.",638,{"inputs":[{"name":"journaldb"}],"output":{"name":"journaldb"}}],[11,"to_overlaydb","","Get a clone of the overlay db portion of this.",638,{"inputs":[{"name":"journaldb"}],"output":{"name":"overlaydb"}}],[11,"commit","","Commit all recent insert operations and historical removals from the old era\nto the backing database.",638,{"inputs":[{"name":"journaldb"},{"name":"u64"},{"name":"h256"},{"name":"option"}],"output":{"name":"result"}}],[11,"revert","","Revert all operations on this object (i.e. `insert()`s and `removes()`s) since the\nlast `commit()`.",638,{"inputs":[{"name":"journaldb"}],"output":null}],[11,"keys","","",638,{"inputs":[{"name":"journaldb"}],"output":{"name":"hashmap"}}],[11,"lookup","","",638,{"inputs":[{"name":"journaldb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"exists","","",638,{"inputs":[{"name":"journaldb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",638,null],[11,"emplace","","",638,{"inputs":[{"name":"journaldb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"kill","","",638,{"inputs":[{"name":"journaldb"},{"name":"h256"}],"output":null}],[0,"math","ethcore_util","TODO [Gav Wood] Please document me",null,null],[5,"log2","ethcore_util::math","log2",null,{"inputs":[{"name":"usize"}],"output":{"name":"u32"}}],[0,"chainfilter","ethcore_util","Multilevel blockchain bloom filter.",null,null],[3,"BloomIndex","ethcore_util::chainfilter","Represents bloom index in cache",null,null],[12,"level","","TODO [debris] Please document me",639,null],[12,"index","","TODO [debris] Please document me",639,null],[3,"MemoryCache","","In memory cache for blooms.",null,null],[3,"ChainFilter","","Should be used for search operations on blockchain.",null,null],[8,"FilterDataSource","","Types implementing this trait should provide read access for bloom filters database.",null,null],[10,"bloom_at_index","","returns reference to log at given position if it exists",640,{"inputs":[{"name":"filterdatasource"},{"name":"bloomindex"}],"output":{"name":"option"}}],[11,"fmt","","",639,{"inputs":[{"name":"bloomindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",639,{"inputs":[{"name":"bloomindex"}],"output":{"name":"bloomindex"}}],[11,"hash","","",639,null],[11,"eq","","",639,{"inputs":[{"name":"bloomindex"},{"name":"bloomindex"}],"output":{"name":"bool"}}],[11,"ne","","",639,{"inputs":[{"name":"bloomindex"},{"name":"bloomindex"}],"output":{"name":"bool"}}],[11,"new","","Default constructor for `BloomIndex`",639,{"inputs":[{"name":"bloomindex"},{"name":"u8"},{"name":"usize"}],"output":{"name":"bloomindex"}}],[11,"new","","Default constructor for MemoryCache",641,{"inputs":[{"name":"memorycache"}],"output":{"name":"memorycache"}}],[11,"insert_blooms","","inserts all blooms into cache",641,{"inputs":[{"name":"memorycache"},{"name":"hashmap"}],"output":null}],[11,"bloom_at_index","","",641,{"inputs":[{"name":"memorycache"},{"name":"bloomindex"}],"output":{"name":"option"}}],[11,"new","","Creates new filter instance.",642,{"inputs":[{"name":"chainfilter"},{"name":"d"},{"name":"usize"},{"name":"u8"}],"output":{"name":"self"}}],[11,"add_bloom","","Adds new bloom to all filter levels",642,{"inputs":[{"name":"chainfilter"},{"name":"h2048"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"add_blooms","","Adds new blooms starting from block number.",642,null],[11,"reset_bloom","","Resets bloom at level 0 and forces rebuild on higher levels.",642,{"inputs":[{"name":"chainfilter"},{"name":"h2048"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"clear_bloom","","Sets lowest level bloom to 0 and forces rebuild on higher levels.",642,{"inputs":[{"name":"chainfilter"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"blocks_with_address","","Returns numbers of blocks that may contain Address.",642,{"inputs":[{"name":"chainfilter"},{"name":"address"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"blocks_with_topic","","Returns numbers of blocks that may contain Topic.",642,{"inputs":[{"name":"chainfilter"},{"name":"h256"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"blocks_with_bloom","","Returns numbers of blocks that may log bloom.",642,{"inputs":[{"name":"chainfilter"},{"name":"h2048"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"crypto","ethcore_util","TODO [Gav Wood] Please document me",null,null],[3,"KeyPair","ethcore_util::crypto","secp256k1 Key pair",null,null],[4,"CryptoError","","TODO [arkpar] Please document me",null,null],[13,"InvalidSecret","","TODO [arkpar] Please document me",643,null],[13,"InvalidPublic","","TODO [arkpar] Please document me",643,null],[13,"InvalidSignature","","TODO [arkpar] Please document me",643,null],[13,"InvalidMessage","","TODO [arkpar] Please document me",643,null],[13,"Io","","TODO [arkpar] Please document me",643,null],[0,"ec","","TODO [arkpar] Please document me",null,null],[5,"recover","ethcore_util::crypto::ec","Recovers Public key from signed message hash.",null,{"inputs":[{"name":"signature"},{"name":"h256"}],"output":{"name":"result"}}],[5,"sign","","Returns siganture of message hash.",null,{"inputs":[{"name":"secret"},{"name":"h256"}],"output":{"name":"result"}}],[5,"verify","","Verify signature.",null,{"inputs":[{"name":"public"},{"name":"signature"},{"name":"h256"}],"output":{"name":"result"}}],[5,"is_low","","Check if this is a \"low\" signature.",null,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[5,"is_low_s","","Check if this is a \"low\" signature.",null,{"inputs":[{"name":"u256"}],"output":{"name":"bool"}}],[5,"is_valid","","Check if each component of the signature is in range.",null,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[0,"ecdh","ethcore_util::crypto","TODO [arkpar] Please document me",null,null],[5,"agree","ethcore_util::crypto::ecdh","TODO [arkpar] Please document me",null,{"inputs":[{"name":"secret"},{"name":"public"}],"output":{"name":"result"}}],[0,"ecies","ethcore_util::crypto","TODO [arkpar] Please document me",null,null],[5,"encrypt","ethcore_util::crypto::ecies","TODO [arkpar] Please document me",null,null],[5,"decrypt","","TODO [arkpar] Please document me",null,null],[0,"aes","ethcore_util::crypto","TODO [arkpar] Please document me",null,null],[5,"encrypt","ethcore_util::crypto::aes","TODO [arkpar] Please document me",null,null],[5,"decrypt","","TODO [arkpar] Please document me",null,null],[6,"Secret","ethcore_util::crypto","TODO [Gav Wood] Please document me",null,null],[6,"Public","","TODO [Gav Wood] Please document me",null,null],[6,"Signature","","TODO [Gav Wood] Please document me",null,null],[11,"new","secp256k1","Creates a new Secp256k1 context",644,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",644,{"inputs":[{"name":"secp256k1"},{"name":"contextflag"}],"output":{"name":"secp256k1"}}],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",644,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence;\nsee comment in libsecp256k1 commit d2275795f by Gregory Maxwell",644,null],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new`\nand `key::PublicKey::from_secret_key`; call those functions directly for\nbatch key generation. Requires a signing-capable context.",644,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":{"name":"result"}}],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and nonce `nonce`.\nRequires a signing-capable context.",644,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and nonce `nonce`.\nRequires a signing-capable context.",644,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"recover","","Determines the public key for which `sig` is a valid signature for\n`msg`. Returns through the out-pointer `pubkey`. Requires a verify-capable\ncontext.",644,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"recoverablesignature"}],"output":{"name":"result"}}],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public\nkey `pubkey`. Returns `Ok(true)` on success. Note that this function cannot\nbe used for Bitcoin consensus checking since there may exist signatures\nwhich OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a\nverify-capable context.",644,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"fmt","secp256k1::ecdh","",645,{"inputs":[{"name":"sharedsecret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",645,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"ne","","",645,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",645,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"new","","Creates a new shared secret from a pubkey and secret key",645,{"inputs":[{"name":"sharedsecret"},{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"new_raw","","Creates a new unhashed shared secret from a pubkey and secret key",645,{"inputs":[{"name":"sharedsecret"},{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",645,null],[11,"from","","",645,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",645,{"inputs":[{"name":"sharedsecret"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",645,null],[11,"index","","",645,null],[11,"index","","",645,null],[11,"fmt","secp256k1::ffi","",646,{"inputs":[{"name":"context"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",646,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",647,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",647,null],[11,"len","","Returns the length of the object as an array",647,{"inputs":[{"name":"publickey"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",647,{"inputs":[{"name":"publickey"}],"output":{"name":"bool"}}],[11,"eq","","",647,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",647,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"index","","",647,{"inputs":[{"name":"publickey"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",647,null],[11,"index","","",647,null],[11,"index","","",647,null],[11,"index","","",647,null],[11,"decode","","",647,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",647,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",647,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",647,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",647,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) public key usable for the FFI interface",647,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"blank","","Create a new (uninitialized) public key usable for the FFI interface",647,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",648,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",648,null],[11,"len","","Returns the length of the object as an array",648,{"inputs":[{"name":"signature"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",648,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[11,"eq","","",648,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",648,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"index","","",648,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",648,null],[11,"index","","",648,null],[11,"index","","",648,null],[11,"index","","",648,null],[11,"decode","","",648,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",648,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",648,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",648,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",648,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",649,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",649,null],[11,"len","","Returns the length of the object as an array",649,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",649,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"eq","","",649,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",649,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",649,{"inputs":[{"name":"recoverablesignature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",649,null],[11,"index","","",649,null],[11,"index","","",649,null],[11,"index","","",649,null],[11,"decode","","",649,{"inputs":[{"name":"recoverablesignature"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",649,{"inputs":[{"name":"recoverablesignature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",649,{"inputs":[{"name":"recoverablesignature"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",649,{"inputs":[{"name":"recoverablesignature"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",649,{"inputs":[{"name":"recoverablesignature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",648,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",648,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",649,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",649,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",650,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",650,null],[11,"len","","Returns the length of the object as an array",650,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",650,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"eq","","",650,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",650,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",650,{"inputs":[{"name":"sharedsecret"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",650,null],[11,"index","","",650,null],[11,"index","","",650,null],[11,"index","","",650,null],[11,"decode","","",650,{"inputs":[{"name":"sharedsecret"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",650,{"inputs":[{"name":"sharedsecret"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",650,{"inputs":[{"name":"sharedsecret"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",650,{"inputs":[{"name":"sharedsecret"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",650,{"inputs":[{"name":"sharedsecret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",650,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",650,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"as_ptr","secp256k1::key","Converts the object to a raw pointer for FFI interfacing",651,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",651,null],[11,"len","","Returns the length of the object as an array",651,{"inputs":[{"name":"secretkey"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",651,{"inputs":[{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"eq","","",651,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"clone","","",651,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"index","","",651,{"inputs":[{"name":"secretkey"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",651,null],[11,"index","","",651,null],[11,"index","","",651,null],[11,"index","","",651,null],[11,"decode","","",651,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",651,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",651,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",651,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",651,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",652,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",652,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ne","","",652,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",652,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"new","","Creates a new random secret key",651,{"inputs":[{"name":"secretkey"},{"name":"secp256k1"},{"name":"r"}],"output":{"name":"secretkey"}}],[11,"from_slice","","Converts a `SECRET_KEY_SIZE`-byte slice to a secret key",651,null],[11,"add_assign","","Adds one secret key to another, modulo the curve order",651,{"inputs":[{"name":"secretkey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"new","","Creates a new zeroed out public key",652,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"is_valid","","Determines whether a pubkey is valid",652,{"inputs":[{"name":"publickey"}],"output":{"name":"bool"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",652,null],[11,"from_secret_key","","Creates a new public key from a secret key.",652,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a public key directly from a slice",652,null],[11,"serialize_vec","","Serialize the key as a byte-encoded pair of values. In compressed form\nthe y-coordinate is represented by only a single bit, as x determines\nit up to one bit.",652,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"bool"}],"output":{"name":"arrayvec"}}],[11,"add_exp_assign","","Adds the pk corresponding to `other` to the pk `self` in place",652,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"decode","","",652,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"from","","",652,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"encode","","",652,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",652,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",652,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","secp256k1","",653,{"inputs":[{"name":"recoveryid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",653,{"inputs":[{"name":"recoveryid"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"ne","","",653,{"inputs":[{"name":"recoveryid"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"clone","","",653,{"inputs":[{"name":"recoveryid"}],"output":{"name":"recoveryid"}}],[11,"fmt","","",654,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",654,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",654,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",654,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"fmt","","",655,{"inputs":[{"name":"recoverablesignature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",655,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"ne","","",655,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",655,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"from_i32","","Allows library users to create valid recovery IDs from i32.",653,{"inputs":[{"name":"recoveryid"},{"name":"i32"}],"output":{"name":"result"}}],[11,"to_i32","","Allows library users to convert recovery IDs to i32.",653,{"inputs":[{"name":"recoveryid"}],"output":{"name":"i32"}}],[11,"from_der","","Converts a DER-encoded byte slice to a signature",654,null],[11,"from_der_lax","","Converts a \"lax DER\"-encoded byte slice to a signature. This is basically\nonly useful for validating signatures in the Bitcoin blockchain from before\n2016. It should never be used in new applications. This library does not\nsupport serializing to this \"format\"",654,null],[11,"normalize_s","","Normalizes a signature to a \"low S\" form. In ECDSA, signatures are\nof the form (r, s) where r and s are numbers lying in some finite\nfield. The verification equation will pass for (r, s) iff it passes\nfor (r, -s), so it is possible to ``modify'' signatures in transit\nby flipping the sign of s. This does not constitute a forgery since\nthe signed message still cannot be changed, but for some applications,\nchanging even the signature itself can be a problem. Such applications\nrequire a \"strong signature\". It is believed that ECDSA is a strong\nsignature except for this ambiguity in the sign of s, so to accomodate\nthese applications libsecp256k1 will only accept signatures for which\ns is in the lower half of the field range. This eliminates the\nambiguity.",654,null],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",654,null],[11,"as_mut_ptr","","Obtains a raw mutable pointer suitable for use with FFI functions",654,null],[11,"serialize_der","","Serializes the signature in DER format",654,{"inputs":[{"name":"signature"},{"name":"secp256k1"}],"output":{"name":"vec"}}],[11,"from","","",654,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"signature"}}],[11,"from_compact","","Converts a compact-encoded byte slice to a signature. This\nrepresentation is nonstandard and defined by the libsecp256k1\nlibrary.",655,null],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",655,null],[11,"serialize_compact","","Serializes the recoverable signature in compact format",655,null],[11,"to_standard","","Converts a recoverable signature to a non-recoverable one (this is needed\nfor verification",655,{"inputs":[{"name":"recoverablesignature"},{"name":"secp256k1"}],"output":{"name":"signature"}}],[11,"from","","",655,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",654,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",654,null],[11,"index","","",654,null],[11,"index","","",654,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",656,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",656,null],[11,"len","","Returns the length of the object as an array",656,{"inputs":[{"name":"message"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",656,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"eq","","",656,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"clone","","",656,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"index","","",656,{"inputs":[{"name":"message"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",656,null],[11,"index","","",656,null],[11,"index","","",656,null],[11,"index","","",656,null],[11,"decode","","",656,{"inputs":[{"name":"message"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",656,{"inputs":[{"name":"message"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",656,{"inputs":[{"name":"message"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",656,{"inputs":[{"name":"message"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",656,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Converts a `MESSAGE_SIZE`-byte slice to a message object",656,null],[11,"fmt","","",657,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",657,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",657,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",657,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",657,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",657,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"description","","",657,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",658,{"inputs":[{"name":"contextflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",658,{"inputs":[{"name":"contextflag"}],"output":{"name":"contextflag"}}],[11,"eq","","",658,{"inputs":[{"name":"contextflag"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"ne","","",658,{"inputs":[{"name":"contextflag"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"fmt","","",658,{"inputs":[{"name":"contextflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",644,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"eq","","",644,{"inputs":[{"name":"secp256k1"},{"name":"secp256k1"}],"output":{"name":"bool"}}],[11,"fmt","","",644,{"inputs":[{"name":"secp256k1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",644,null],[11,"from_rsv","ethcore_util::crypto","Create a new signature from the R, S and V componenets.",659,{"inputs":[{"name":"signature"},{"name":"h256"},{"name":"h256"},{"name":"u8"}],"output":{"name":"signature"}}],[11,"to_rsv","","Convert transaction to R, S and V components.",659,null],[11,"fmt","","",643,{"inputs":[{"name":"cryptoerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",643,{"inputs":[{"name":"cryptoerror"},{"name":"error"}],"output":{"name":"cryptoerror"}}],[11,"from","","",643,{"inputs":[{"name":"cryptoerror"},{"name":"error"}],"output":{"name":"cryptoerror"}}],[11,"eq","","",660,{"inputs":[{"name":"keypair"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"ne","","",660,{"inputs":[{"name":"keypair"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"fmt","","",660,{"inputs":[{"name":"keypair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_secret","","Create a pair from secret key",660,{"inputs":[{"name":"keypair"},{"name":"secret"}],"output":{"name":"result"}}],[11,"create","","Create a new random key pair",660,{"inputs":[{"name":"keypair"}],"output":{"name":"result"}}],[11,"public","","Returns public key",660,{"inputs":[{"name":"keypair"}],"output":{"name":"public"}}],[11,"secret","","Returns private key",660,{"inputs":[{"name":"keypair"}],"output":{"name":"secret"}}],[11,"sign","","Sign a message with our secret key.",660,{"inputs":[{"name":"keypair"},{"name":"h256"}],"output":{"name":"result"}}],[0,"triehash","ethcore_util","Generetes trie root.",null,null],[5,"ordered_trie_root","ethcore_util::triehash","Generates a trie root hash for a vector of values",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[5,"trie_root","","Generates a trie root hash for a vector of key-values",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[5,"sec_trie_root","","Generates a key-hashed (secure) trie root hash for a vector of key-values.",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[0,"trie","ethcore_util","TODO [Gav Wood] Please document me",null,null],[0,"trietraits","ethcore_util::trie","TODO [Gav Wood] Please document me",null,null],[8,"Trie","ethcore_util::trie::trietraits","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"root","","Return the root of the trie.",661,{"inputs":[{"name":"trie"}],"output":{"name":"h256"}}],[11,"is_empty","","Is the trie empty?",661,{"inputs":[{"name":"trie"}],"output":{"name":"bool"}}],[10,"contains","","Does the trie contain a given key?",661,null],[10,"get","","What is the value of the given key in this trie?",661,null],[8,"TrieMut","","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"insert","","Insert a `key`/`value` pair into the trie. An `empty` value is equivalent to removing\n`key` from the trie.",662,null],[10,"remove","","Remove a `key` from the trie. Equivalent to making it equal to the empty\nvalue.",662,null],[0,"standardmap","ethcore_util::trie","Key-value datastore with a modified Merkle tree.",null,null],[3,"StandardMap","ethcore_util::trie::standardmap","Standard test map for profiling tries.",null,null],[4,"Alphabet","","Alphabet to use when creating words for insertion into tries.",null,null],[13,"All","","TODO [Gav Wood] Please document me",663,null],[13,"Low","","TODO [Gav Wood] Please document me",663,null],[13,"Mid","","TODO [Gav Wood] Please document me",663,null],[13,"Custom","","TODO [Gav Wood] Please document me",663,null],[11,"make","","Create the standard map (set of keys and values) for the object's fields.",664,{"inputs":[{"name":"standardmap"}],"output":{"name":"vec"}}],[0,"journal","ethcore_util::trie","TODO [Gav Wood] Please document me",null,null],[3,"Score","ethcore_util::trie::journal","How many insertions and removals were done in an `apply` operation.",null,null],[12,"inserts","","Number of insertions.",665,null],[12,"removes","","Number of removals.",665,null],[3,"Journal","","A journal of operations on the backing database.",null,null],[11,"fmt","","",666,{"inputs":[{"name":"journal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty, object.",666,{"inputs":[{"name":"journal"}],"output":{"name":"journal"}}],[11,"new_node","","Given the RLP that encodes a node, append a reference to that node `out` and leave `journal`\nsuch that the reference is valid, once applied.",666,{"inputs":[{"name":"journal"},{"name":"bytes"},{"name":"rlpstream"}],"output":null}],[11,"delete_node_sha3","","Given the RLP that encodes a now-unused node, leave `journal` in such a state that it is noted.",666,{"inputs":[{"name":"journal"},{"name":"h256"}],"output":null}],[11,"delete_node","","Register an RLP-encoded node for deletion (given a slice), if it needs to be deleted.",666,null],[11,"apply","","Apply this journal to the HashDB `db` and return the number of insertions and removals done.",666,{"inputs":[{"name":"journal"},{"name":"hashdb"}],"output":{"name":"score"}}],[0,"node","ethcore_util::trie","TODO [Gav Wood] Please document me",null,null],[4,"Node","ethcore_util::trie::node","Type of node in the trie and essential information thereof.",null,null],[13,"Empty","","TODO [Gav Wood] Please document me",667,null],[13,"Leaf","","TODO [Gav Wood] Please document me",667,null],[13,"Extension","","TODO [Gav Wood] Please document me",667,null],[13,"Branch","","TODO [Gav Wood] Please document me",667,null],[11,"fmt","","",667,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",667,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",667,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"clone","","",667,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"decoded","","Decode the `node_rlp` and return the Node.",667,null],[11,"encoded","","Encode the node into RLP.",667,{"inputs":[{"name":"node"}],"output":{"name":"bytes"}}],[11,"encoded_and_added","","Encode the node, adding it to `journal` if necessary and return the RLP valid for\ninsertion into a parent node. ",667,{"inputs":[{"name":"node"},{"name":"journal"}],"output":{"name":"bytes"}}],[0,"triedb","ethcore_util::trie","TODO [Gav Wood] Please document me",null,null],[3,"TrieDB","ethcore_util::trie::triedb","A `Trie` implementation using a generic `HashDB` backing database.",null,null],[12,"hash_count","","TODO [Gav Wood] Please document me",668,null],[3,"TrieDBIterator","","Iterator for going through all values in the trie.",null,null],[11,"new","","Create a new trie with the backing database `db` and `root`\nPanics, if `root` does not exist",668,{"inputs":[{"name":"triedb"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"db","","Get the backing database.",668,{"inputs":[{"name":"triedb"}],"output":{"name":"hashdb"}}],[11,"keys","","Determine all the keys in the backing database that belong to the trie.",668,{"inputs":[{"name":"triedb"}],"output":{"name":"vec"}}],[11,"to_map","","Convert a vector of hashes to a hashmap of hash to occurances.",668,{"inputs":[{"name":"triedb"},{"name":"vec"}],"output":{"name":"hashmap"}}],[11,"db_items_remaining","","Determine occurances of items in the backing database which are not related to this\ntrie.",668,{"inputs":[{"name":"triedb"}],"output":{"name":"hashmap"}}],[11,"clone","","",669,{"inputs":[{"name":"triedbiterator"}],"output":{"name":"triedbiterator"}}],[11,"next","","",669,{"inputs":[{"name":"triedbiterator"}],"output":{"name":"option"}}],[11,"iter","","Get all keys/values stored in the trie.",668,{"inputs":[{"name":"triedb"}],"output":{"name":"triedbiterator"}}],[11,"root","","",668,{"inputs":[{"name":"triedb"}],"output":{"name":"h256"}}],[11,"contains","","",668,null],[11,"get","","",668,null],[11,"fmt","","",668,{"inputs":[{"name":"triedb"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"triedbmut","ethcore_util::trie","TODO [Gav Wood] Please document me",null,null],[3,"TrieDBMut","ethcore_util::trie::triedbmut","A `Trie` implementation using a generic `HashDB` backing database.",null,null],[12,"hash_count","","TODO [Gav Wood] Please document me",670,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",670,{"inputs":[{"name":"triedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.\nPanics, if `root` does not exist.",670,{"inputs":[{"name":"triedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"db","","Get the backing database.",670,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashdb"}}],[11,"keys","","Determine all the keys in the backing database that belong to the trie.",670,{"inputs":[{"name":"triedbmut"}],"output":{"name":"vec"}}],[11,"to_map","","Convert a vector of hashes to a hashmap of hash to occurances.",670,{"inputs":[{"name":"triedbmut"},{"name":"vec"}],"output":{"name":"hashmap"}}],[11,"db_items_remaining","","Determine occurances of items in the backing database which are not related to this\ntrie.",670,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashmap"}}],[11,"root","","",670,{"inputs":[{"name":"triedbmut"}],"output":{"name":"h256"}}],[11,"contains","","",670,null],[11,"get","","",670,null],[11,"insert","","",670,null],[11,"remove","","",670,null],[11,"fmt","","",670,{"inputs":[{"name":"triedbmut"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sectriedb","ethcore_util::trie","TODO [Gav Wood] Please document me",null,null],[3,"SecTrieDB","ethcore_util::trie::sectriedb","A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",671,{"inputs":[{"name":"sectriedb"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"raw","","Get a reference to the underlying raw TrieDB struct.",671,{"inputs":[{"name":"sectriedb"}],"output":{"name":"triedb"}}],[11,"raw_mut","","Get a mutable reference to the underlying raw TrieDB struct.",671,{"inputs":[{"name":"sectriedb"}],"output":{"name":"triedb"}}],[11,"root","","",671,{"inputs":[{"name":"sectriedb"}],"output":{"name":"h256"}}],[11,"contains","","",671,null],[11,"get","","",671,null],[0,"sectriedbmut","ethcore_util::trie","TODO [Gav Wood] Please document me",null,null],[3,"SecTrieDBMut","ethcore_util::trie::sectriedbmut","A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",672,{"inputs":[{"name":"sectriedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"from_existing","","Create a new trie with the backing database `db` and `root`\nPanics, if `root` does not exist",672,{"inputs":[{"name":"sectriedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"root","","",672,{"inputs":[{"name":"sectriedbmut"}],"output":{"name":"h256"}}],[11,"contains","","",672,null],[11,"get","","",672,null],[11,"insert","","",672,null],[11,"remove","","",672,null],[0,"nibbleslice","ethcore_util","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.",null,null],[3,"NibbleSlice","ethcore_util::nibbleslice","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.",null,null],[3,"NibbleSliceIterator","","TODO [Gav Wood] Please document me",null,null],[11,"cmp","","",673,{"inputs":[{"name":"nibbleslice"},{"name":"nibbleslice"}],"output":{"name":"ordering"}}],[11,"clone","","",673,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"nibbleslice"}}],[11,"next","","",674,{"inputs":[{"name":"nibblesliceiterator"}],"output":{"name":"option"}}],[11,"new","","Create a new nibble slice with the given byte-slice.",673,null],[11,"new_offset","","Create a new nibble slice with the given byte-slice with a nibble offset.",673,null],[11,"new_composed","","Create a composed nibble slice; one followed by the other.",673,{"inputs":[{"name":"nibbleslice"},{"name":"nibbleslice"},{"name":"nibbleslice"}],"output":{"name":"nibbleslice"}}],[11,"iter","","TODO [Gav Wood] Please document me",673,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"nibblesliceiterator"}}],[11,"from_encoded","","Create a new nibble slice from the given HPE encoded data (e.g. output of `encoded()`).",673,null],[11,"is_empty","","Is this an empty slice?",673,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"bool"}}],[11,"len","","Get the length (in nibbles, naturally) of this slice.",673,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"usize"}}],[11,"at","","Get the nibble at position `i`.",673,{"inputs":[{"name":"nibbleslice"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"mid","","Return object which represents a view on to this slice (further) offset by `i` nibbles.",673,{"inputs":[{"name":"nibbleslice"},{"name":"usize"}],"output":{"name":"nibbleslice"}}],[11,"starts_with","","Do we start with the same nibbles as the whole of `them`?",673,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"bool"}}],[11,"common_prefix","","How many of the same nibbles at the beginning do we match with `them`?",673,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"usize"}}],[11,"encoded","","TODO [Gav Wood] Please document me",673,{"inputs":[{"name":"nibbleslice"},{"name":"bool"}],"output":{"name":"bytes"}}],[11,"encoded_leftmost","","TODO [Gav Wood] Please document me",673,{"inputs":[{"name":"nibbleslice"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bytes"}}],[11,"eq","","",673,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",673,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",673,{"inputs":[{"name":"nibbleslice"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"heapsizeof","ethcore_util","TODO [Gav Wood] Please document me",null,null],[11,"heap_size_of_children","ethcore_util::hash","",595,{"inputs":[{"name":"h32"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",594,{"inputs":[{"name":"h64"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",596,{"inputs":[{"name":"h128"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",593,{"inputs":[{"name":"address"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",592,{"inputs":[{"name":"h256"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",597,{"inputs":[{"name":"h264"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",598,{"inputs":[{"name":"h512"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",599,{"inputs":[{"name":"h520"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",600,{"inputs":[{"name":"h1024"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",601,{"inputs":[{"name":"h2048"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","ethcore_util::uint","",605,{"inputs":[{"name":"u128"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",604,{"inputs":[{"name":"u256"}],"output":{"name":"usize"}}],[0,"squeeze","ethcore_util","Helper module that should be used to randomly squeeze\ncaches to a given size in bytes",null,null],[8,"Squeeze","ethcore_util::squeeze","Should be used to squeeze collections to certain size in bytes",null,null],[10,"squeeze","","TODO [debris] Please document me",675,{"inputs":[{"name":"squeeze"},{"name":"usize"}],"output":null}],[11,"squeeze","std::collections::hash::map","",38,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":null}],[0,"semantic_version","ethcore_util","TODO [Gav Wood] Please document me",null,null],[3,"SemanticVersion","ethcore_util::semantic_version","A version value with strict meaning. Use `to_u32` to convert to a simple integer.",null,null],[12,"major","","Major version - API/feature removals & breaking changes.",676,null],[12,"minor","","Minor version - API/feature additions.",676,null],[12,"tiny","","Tiny version - bug fixes.",676,null],[11,"new","","Create a new object.",676,{"inputs":[{"name":"semanticversion"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"semanticversion"}}],[11,"as_u32","","Convert to a `u32` representation.",676,{"inputs":[{"name":"semanticversion"}],"output":{"name":"u32"}}],[0,"io","ethcore_util","TODO [Gav Wood] Please document me",null,null],[4,"IoError","ethcore_util::io","TODO [arkpar] Please document me",null,null],[13,"Mio","","TODO [arkpar] Please document me",677,null],[6,"TimerToken","","TODO [arkpar] Please document me",null,null],[6,"StreamToken","","TODO [arkpar] Please document me",null,null],[6,"IoContext","","TODO [arkpar] Please document me",null,null],[6,"IoService","","TODO [arkpar] Please document me",null,null],[6,"IoChannel","","TODO [arkpar] Please document me",null,null],[8,"IoHandler","","Generic IO handler.\nAll the handler function are called from within IO event loop.\n`Message` type is used as notification data",null,null],[11,"initialize","","Initialize the handler",678,{"inputs":[{"name":"iohandler"},{"name":"iocontext"}],"output":null}],[11,"timeout","","Timer function called after a timeout created with `HandlerIo::timeout`.",678,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"timertoken"}],"output":null}],[11,"message","","Called when a broadcasted message is received. The message can only be sent from a different IO handler.",678,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"message"}],"output":null}],[11,"stream_hup","","Called when an IO stream gets closed",678,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"stream_readable","","Called when an IO stream can be read from",678,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"stream_writable","","Called when an IO stream can be written to",678,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"fmt","","",677,{"inputs":[{"name":"ioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",677,{"inputs":[{"name":"ioerror"},{"name":"notifyerror"}],"output":{"name":"ioerror"}}],[0,"network","ethcore_util","TODO [Gav Wood] Please document me",null,null],[6,"PeerId","ethcore_util::network","TODO [arkpar] Please document me",null,null],[6,"PacketId","","TODO [arkpar] Please document me",null,null],[6,"NetworkContext","","TODO [arkpar] Please document me",null,null],[6,"NetworkService","","TODO [arkpar] Please document me",null,null],[6,"NetworkIoMessage","","TODO [arkpar] Please document me",null,null],[6,"NetworkError","","TODO [arkpar] Please document me",null,null],[8,"NetworkProtocolHandler","","Network IO protocol handler. This needs to be implemented for each new subprotocol.\nAll the handler function are called from within IO event loop.\n`Message` is the type for message data.",null,null],[11,"initialize","","Initialize the handler",679,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"}],"output":null}],[10,"read","","Called when new network packet received.",679,null],[10,"connected","","Called when new peer is connected. Only called when peer supports the same protocol.",679,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[10,"disconnected","","Called when a previously connected peer disconnects.",679,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"timeout","","Timer function called after a timeout created with `NetworkContext::timeout`.",679,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"timertoken"}],"output":null}],[11,"message","","Called when a broadcasted message is received. The message can only be sent from a different IO handler.",679,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"message"}],"output":null}],[14,"xjson!","ethcore_util","",null,null],[14,"map!","","",null,null],[14,"mapx!","","",null,null],[14,"x!","","",null,null],[14,"xx!","","",null,null],[14,"flush!","","",null,null],[14,"flushln!","","",null,null]],"paths":[[8,"Read"],[8,"Write"],[8,"BufRead"],[8,"Seek"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"StdError"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"flock"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"pthread_attr_t"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[4,"Bound"],[8,"Pattern"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[4,"IntErrorKind"],[3,"NonZero"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"SliceConcatExt"],[8,"MutableByteVector"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Hash"],[8,"Hasher"],[4,"Json"],[3,"Arc"],[4,"CharacterSet"],[4,"Newline"],[3,"Config"],[4,"FromBase64Error"],[4,"FromHexError"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[3,"Encoder"],[4,"JsonEvent"],[4,"ParserState"],[4,"StackElement"],[4,"InternalStackElement"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"FormatShim"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"FromBase64"],[8,"FromHex"],[8,"HeapSizeOf"],[8,"Itertools"],[8,"FromJson"],[4,"BaseDataError"],[4,"UtilError"],[8,"FixedHash"],[3,"H256"],[3,"Address"],[3,"H64"],[3,"H32"],[3,"H128"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"H2048"],[8,"Uint"],[3,"U512"],[3,"U256"],[3,"U128"],[4,"BytesRef"],[4,"FromBytesError"],[8,"ToPretty"],[8,"BytesConvertable"],[8,"ToBytes"],[8,"FromBytes"],[8,"Populatable"],[3,"PrettySlice"],[6,"Bytes"],[8,"Decoder"],[8,"Decodable"],[8,"View"],[8,"Encoder"],[8,"Encodable"],[8,"Stream"],[4,"DecoderError"],[3,"Rlp"],[3,"RlpIterator"],[3,"PayloadInfo"],[4,"Prototype"],[3,"UntrustedRlp"],[3,"UntrustedRlpIterator"],[8,"RlpStandard"],[3,"RlpStream"],[4,"Diff"],[4,"Filth"],[8,"InsertSlice"],[8,"SharedPrefix"],[8,"Hashable"],[8,"HashDB"],[3,"MemoryDB"],[3,"OverlayDB"],[3,"JournalDB"],[3,"BloomIndex"],[8,"FilterDataSource"],[3,"MemoryCache"],[3,"ChainFilter"],[4,"CryptoError"],[3,"Secp256k1"],[3,"SharedSecret"],[3,"Context"],[3,"PublicKey"],[3,"Signature"],[3,"RecoverableSignature"],[3,"SharedSecret"],[3,"SecretKey"],[3,"PublicKey"],[3,"RecoveryId"],[3,"Signature"],[3,"RecoverableSignature"],[3,"Message"],[4,"Error"],[4,"ContextFlag"],[6,"Signature"],[3,"KeyPair"],[8,"Trie"],[8,"TrieMut"],[4,"Alphabet"],[3,"StandardMap"],[3,"Score"],[3,"Journal"],[4,"Node"],[3,"TrieDB"],[3,"TrieDBIterator"],[3,"TrieDBMut"],[3,"SecTrieDB"],[3,"SecTrieDBMut"],[3,"NibbleSlice"],[3,"NibbleSliceIterator"],[8,"Squeeze"],[3,"SemanticVersion"],[4,"IoError"],[8,"IoHandler"],[8,"NetworkProtocolHandler"]]};
searchIndex['secp256k1'] = {"items":[[3,"RecoveryId","secp256k1","A tag used for recovering the public key from a compact signature",null,null],[3,"Signature","","An ECDSA signature",null,null],[3,"RecoverableSignature","","An ECDSA signature with a recovery ID for pubkey recovery",null,null],[3,"Message","","A (hashed) message input to an ECDSA signature",null,null],[3,"Secp256k1","","The secp256k1 engine, used to execute all signature operations",null,null],[4,"Error","","An ECDSA error",null,null],[13,"IncapableContext","","A `Secp256k1` was used for an operation, but it was not created to\nsupport this (so necessary precomputations have not been done)",0,null],[13,"IncorrectSignature","","Signature failed verification",0,null],[13,"InvalidMessage","","Badly sized message",0,null],[13,"InvalidPublicKey","","Bad public key",0,null],[13,"InvalidSignature","","Bad signature",0,null],[13,"InvalidSecretKey","","Bad secret key",0,null],[13,"InvalidRecoveryId","","Bad recovery id",0,null],[4,"ContextFlag","","Flags used to determine the capabilities of a `Secp256k1` object;\nthe more capabilities, the more expensive it is to create.",null,null],[13,"None","","Can neither sign nor verify signatures (cheapest to create, useful\nfor cases not involving signatures, such as creating keys from slices)",1,null],[13,"SignOnly","","Can sign but not verify signatures",1,null],[13,"VerifyOnly","","Can verify but not create signatures",1,null],[13,"Full","","Can verify and create signatures",1,null],[0,"constants","","# Constants\nConstants related to the API and the underlying curve",null,null],[17,"MESSAGE_SIZE","secp256k1::constants","The size (in bytes) of a message",null,null],[17,"SECRET_KEY_SIZE","","The size (in bytes) of a secret key",null,null],[17,"PUBLIC_KEY_SIZE","","The size (in bytes) of a public key array. This only needs to be 65\nbut must be 72 for compatibility with the `ArrayVec` library.",null,null],[17,"UNCOMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of an uncompressed public key",null,null],[17,"COMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of a compressed public key",null,null],[17,"MAX_SIGNATURE_SIZE","","The maximum size of a signature",null,null],[17,"COMPACT_SIGNATURE_SIZE","","The maximum size of a compact signature",null,null],[17,"CURVE_ORDER","","The order of the secp256k1 curve",null,null],[17,"GENERATOR_X","","The X coordinate of the generator",null,null],[17,"GENERATOR_Y","","The Y coordinate of the generator",null,null],[0,"ecdh","secp256k1","# ECDH\nSupport for shared secret computations",null,null],[3,"SharedSecret","secp256k1::ecdh","A tag used for recovering the public key from a compact signature",null,null],[11,"fmt","","",2,{"inputs":[{"name":"sharedsecret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"new","","Creates a new shared secret from a pubkey and secret key",2,{"inputs":[{"name":"sharedsecret"},{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"new_raw","","Creates a new unhashed shared secret from a pubkey and secret key",2,{"inputs":[{"name":"sharedsecret"},{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",2,null],[11,"from","","",2,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",2,{"inputs":[{"name":"sharedsecret"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[0,"ffi","secp256k1","# FFI bindings\nDirect bindings to the underlying C library functions. These should\nnot be needed for most users.",null,null],[3,"Context","secp256k1::ffi","A Secp256k1 context, containing various precomputed values and such\nneeded to do elliptic curve computations. If you create one of these\nwith `secp256k1_context_create` you MUST destroy it with\n`secp256k1_context_destroy`, or else you will have a memory leak.",null,null],[3,"PublicKey","","Library-internal representation of a Secp256k1 public key",null,null],[3,"Signature","","Library-internal representation of a Secp256k1 signature",null,null],[3,"RecoverableSignature","","Library-internal representation of a Secp256k1 signature + recovery ID",null,null],[3,"SharedSecret","","Library-internal representation of an ECDH shared secret",null,null],[7,"secp256k1_nonce_function_rfc6979","","",null,null],[7,"secp256k1_nonce_function_default","","",null,null],[5,"secp256k1_context_create","","",null,null],[5,"secp256k1_context_clone","","",null,null],[5,"secp256k1_context_destroy","","",null,null],[5,"secp256k1_context_randomize","","",null,null],[5,"secp256k1_ec_pubkey_parse","","",null,null],[5,"secp256k1_ec_pubkey_serialize","","",null,null],[5,"secp256k1_ecdsa_signature_parse_der","","",null,null],[5,"secp256k1_ecdsa_signature_parse_der_lax_","","",null,null],[5,"secp256k1_ecdsa_signature_serialize_der","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_parse_compact","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_serialize_compact","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_convert","","",null,null],[5,"secp256k1_ecdsa_signature_normalize","","",null,null],[5,"secp256k1_ecdsa_verify","","",null,null],[5,"secp256k1_ecdsa_sign","","",null,null],[5,"secp256k1_ecdsa_sign_recoverable","","",null,null],[5,"secp256k1_ecdsa_recover","","",null,null],[5,"secp256k1_ec_seckey_verify","","",null,null],[5,"secp256k1_ec_pubkey_create","","",null,null],[5,"secp256k1_ec_privkey_tweak_add","","",null,null],[5,"secp256k1_ec_pubkey_tweak_add","","",null,null],[5,"secp256k1_ec_privkey_tweak_mul","","",null,null],[5,"secp256k1_ec_pubkey_tweak_mul","","",null,null],[5,"secp256k1_ec_pubkey_combine","","",null,null],[5,"secp256k1_ecdh","","",null,null],[5,"secp256k1_ecdh_raw","","",null,null],[6,"NonceFn","","A nonce generation function. Ordinary users of the library\nnever need to see this type; only if you need to control\nnonce generation do you need to use it. I have deliberately\nmade this hard to do: you have to write your own wrapper\naround the FFI functions to use it. And it's an unsafe type.\nNonces are generated deterministically by RFC6979 by\ndefault; there should be no need to ever change this.",null,null],[17,"SECP256K1_START_NONE","","Flag for context to enable no precomputation",null,null],[17,"SECP256K1_START_VERIFY","","Flag for context to enable verification precomputation",null,null],[17,"SECP256K1_START_SIGN","","Flag for context to enable signing precomputation",null,null],[17,"SECP256K1_SER_UNCOMPRESSED","","Flag for keys to indicate uncompressed serialization format",null,null],[17,"SECP256K1_SER_COMPRESSED","","Flag for keys to indicate compressed serialization format",null,null],[11,"fmt","","",3,{"inputs":[{"name":"context"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",4,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",4,null],[11,"len","","Returns the length of the object as an array",4,{"inputs":[{"name":"publickey"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",4,{"inputs":[{"name":"publickey"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"index","","",4,{"inputs":[{"name":"publickey"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) public key usable for the FFI interface",4,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"blank","","Create a new (uninitialized) public key usable for the FFI interface",4,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",5,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",5,null],[11,"len","","Returns the length of the object as an array",5,{"inputs":[{"name":"signature"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",5,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"index","","",5,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",6,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",6,null],[11,"len","","Returns the length of the object as an array",6,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",6,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",6,{"inputs":[{"name":"recoverablesignature"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"recoverablesignature"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"recoverablesignature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"recoverablesignature"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"recoverablesignature"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"recoverablesignature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",5,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",5,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",6,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",6,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",7,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",7,null],[11,"len","","Returns the length of the object as an array",7,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",7,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",7,{"inputs":[{"name":"sharedsecret"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"sharedsecret"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"sharedsecret"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"sharedsecret"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"sharedsecret"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"sharedsecret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",7,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",7,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[0,"key","secp256k1","# Public and secret keys",null,null],[3,"SecretKey","secp256k1::key","Secret 256-bit key used as `x` in an ECDSA signature",null,null],[3,"PublicKey","","A Secp256k1 public key, used for verification of signatures",null,null],[7,"ONE","","The number 1 encoded as a secret key",null,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",8,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",8,null],[11,"len","","Returns the length of the object as an array",8,{"inputs":[{"name":"secretkey"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",8,{"inputs":[{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"index","","",8,{"inputs":[{"name":"secretkey"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"new","","Creates a new random secret key",8,{"inputs":[{"name":"secretkey"},{"name":"secp256k1"},{"name":"r"}],"output":{"name":"secretkey"}}],[11,"from_slice","","Converts a `SECRET_KEY_SIZE`-byte slice to a secret key",8,null],[11,"add_assign","","Adds one secret key to another, modulo the curve order",8,{"inputs":[{"name":"secretkey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"new","","Creates a new zeroed out public key",9,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"is_valid","","Determines whether a pubkey is valid",9,{"inputs":[{"name":"publickey"}],"output":{"name":"bool"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",9,null],[11,"from_secret_key","","Creates a new public key from a secret key.",9,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a public key directly from a slice",9,null],[11,"serialize_vec","","Serialize the key as a byte-encoded pair of values. In compressed form\nthe y-coordinate is represented by only a single bit, as x determines\nit up to one bit.",9,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"bool"}],"output":{"name":"arrayvec"}}],[11,"add_exp_assign","","Adds the pk corresponding to `other` to the pk `self` in place",9,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"encode","","",9,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","secp256k1","",10,{"inputs":[{"name":"recoveryid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"recoveryid"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"recoveryid"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"recoveryid"}],"output":{"name":"recoveryid"}}],[11,"fmt","","",11,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"fmt","","",12,{"inputs":[{"name":"recoverablesignature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"from_i32","","Allows library users to create valid recovery IDs from i32.",10,{"inputs":[{"name":"recoveryid"},{"name":"i32"}],"output":{"name":"result"}}],[11,"to_i32","","Allows library users to convert recovery IDs to i32.",10,{"inputs":[{"name":"recoveryid"}],"output":{"name":"i32"}}],[11,"from_der","","Converts a DER-encoded byte slice to a signature",11,null],[11,"from_der_lax","","Converts a \"lax DER\"-encoded byte slice to a signature. This is basically\nonly useful for validating signatures in the Bitcoin blockchain from before\n2016. It should never be used in new applications. This library does not\nsupport serializing to this \"format\"",11,null],[11,"normalize_s","","Normalizes a signature to a \"low S\" form. In ECDSA, signatures are\nof the form (r, s) where r and s are numbers lying in some finite\nfield. The verification equation will pass for (r, s) iff it passes\nfor (r, -s), so it is possible to ``modify'' signatures in transit\nby flipping the sign of s. This does not constitute a forgery since\nthe signed message still cannot be changed, but for some applications,\nchanging even the signature itself can be a problem. Such applications\nrequire a \"strong signature\". It is believed that ECDSA is a strong\nsignature except for this ambiguity in the sign of s, so to accomodate\nthese applications libsecp256k1 will only accept signatures for which\ns is in the lower half of the field range. This eliminates the\nambiguity.",11,{"inputs":[{"name":"signature"},{"name":"secp256k1"}],"output":null}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",11,null],[11,"as_mut_ptr","","Obtains a raw mutable pointer suitable for use with FFI functions",11,null],[11,"serialize_der","","Serializes the signature in DER format",11,{"inputs":[{"name":"signature"},{"name":"secp256k1"}],"output":{"name":"vec"}}],[11,"from","","",11,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"signature"}}],[11,"from_compact","","Converts a compact-encoded byte slice to a signature. This\nrepresentation is nonstandard and defined by the libsecp256k1\nlibrary.",12,null],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",12,null],[11,"serialize_compact","","Serializes the recoverable signature in compact format",12,null],[11,"to_standard","","Converts a recoverable signature to a non-recoverable one (this is needed\nfor verification",12,{"inputs":[{"name":"recoverablesignature"},{"name":"secp256k1"}],"output":{"name":"signature"}}],[11,"from","","",12,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",11,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",11,null],[11,"index","","",11,null],[11,"index","","",11,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",13,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",13,null],[11,"len","","Returns the length of the object as an array",13,{"inputs":[{"name":"message"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",13,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"index","","",13,{"inputs":[{"name":"message"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"message"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"message"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"message"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",13,{"inputs":[{"name":"message"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Converts a `MESSAGE_SIZE`-byte slice to a message object",13,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"contextflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"contextflag"}],"output":{"name":"contextflag"}}],[11,"eq","","",1,{"inputs":[{"name":"contextflag"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"contextflag"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"contextflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"eq","","",14,{"inputs":[{"name":"secp256k1"},{"name":"secp256k1"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"secp256k1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"secp256k1"}],"output":null}],[11,"new","","Creates a new Secp256k1 context",14,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",14,{"inputs":[{"name":"secp256k1"},{"name":"contextflag"}],"output":{"name":"secp256k1"}}],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",14,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence;\nsee comment in libsecp256k1 commit d2275795f by Gregory Maxwell",14,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":null}],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new`\nand `key::PublicKey::from_secret_key`; call those functions directly for\nbatch key generation. Requires a signing-capable context.",14,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":{"name":"result"}}],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and nonce `nonce`.\nRequires a signing-capable context.",14,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and nonce `nonce`.\nRequires a signing-capable context.",14,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"recover","","Determines the public key for which `sig` is a valid signature for\n`msg`. Returns through the out-pointer `pubkey`. Requires a verify-capable\ncontext.",14,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"recoverablesignature"}],"output":{"name":"result"}}],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public\nkey `pubkey`. Returns `Ok(true)` on success. Note that this function cannot\nbe used for Bitcoin consensus checking since there may exist signatures\nwhich OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a\nverify-capable context.",14,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"ContextFlag"],[3,"SharedSecret"],[3,"Context"],[3,"PublicKey"],[3,"Signature"],[3,"RecoverableSignature"],[3,"SharedSecret"],[3,"SecretKey"],[3,"PublicKey"],[3,"RecoveryId"],[3,"Signature"],[3,"RecoverableSignature"],[3,"Message"],[3,"Secp256k1"]]};
searchIndex['serde_json'] = {"items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"value"}}],[11,"push","","Insert a value into the array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"t"}],"output":{"name":"arraybuilder"}}],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"value"}}],[11,"insert","","Insert a key-value pair into the object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"v"}],"output":{"name":"objectbuilder"}}],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[5,"from_iter","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a `&str`.",null,null],[5,"from_str","","Decodes a json value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"deserializer"},{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit","","",2,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Parses a newtype struct as the underlying value.",2,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"format","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"str"}}],[11,"visit_variant","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_newtype","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_tuple","","",2,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",2,null],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",3,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",3,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",3,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",3,null],[13,"ExpectedColon","","Expected this character to be a `':'`.",3,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",3,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",3,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",3,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",3,null],[13,"InvalidEscape","","Invalid hex escape code.",3,null],[13,"InvalidNumber","","Invalid number.",3,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",3,null],[13,"KeyMustBeAString","","Object key is not a string.",3,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",3,null],[13,"UnknownField","","Unknown field in struct.",3,null],[13,"MissingField","","Struct is missing a field.",3,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",3,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",3,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"SyntaxError","","The JSON value had some syntatic error.",4,null],[13,"IoError","","Some IO error occurred when serializing or deserializing a value.",4,null],[13,"FromUtf8Error","","Some UTF8 error occurred while serializing or deserializing a value.",4,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"eq","","",3,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"syntax","","",4,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"error"}}],[11,"end_of_stream","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"unknown_field","","",4,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",4,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_bytes","","Serializes and escapes a `&[u8]` into a JSON string.",null,null],[5,"escape_str","","Serializes and escapes a `&str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a '{' or '['.",5,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"comma","","Called when serializing a ','.",5,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[10,"colon","","Called when serializing a ':'.",5,{"inputs":[{"name":"formatter"},{"name":"w"}],"output":{"name":"result"}}],[10,"close","","Called when serializing a '}' or ']'.",5,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",6,{"inputs":[{"name":"serializer"},{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",6,{"inputs":[{"name":"serializer"},{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",6,{"inputs":[{"name":"serializer"},{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",6,{"inputs":[{"name":"serializer"}],"output":{"name":"w"}}],[11,"visit_bool","","",6,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","",6,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","",6,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",6,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",6,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",6,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","",6,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","",6,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",6,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",6,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",6,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",6,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",6,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",6,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",6,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",6,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_some","","",6,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit","","",6,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Override `visit_newtype_struct` to serialize newtypes without an object wrapper.",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_unit_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_newtype_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seq","","",6,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seq_elt","","",6,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_map","","",6,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map_elt","","",6,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","",6,{"inputs":[{"name":"serializer"}],"output":{"name":"str"}}],[11,"open","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"open","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON numm value",9,null],[13,"Bool","","Represents a JSON array",9,null],[13,"I64","","Represents a JSON signed integer",9,null],[13,"U64","","Represents a JSON unsigned integer",9,null],[13,"F64","","Represents a JSON floating point number",9,null],[13,"String","","Represents a JSON string",9,null],[13,"Array","","Represents a JSON array",9,null],[13,"Object","","Represents a JSON object",9,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",9,null],[11,"lookup","","Looks up a value by path.",9,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",9,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_string","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"serialize","","",9,{"inputs":[{"name":"value"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"value"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",9,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",10,{"inputs":[{"name":"serializer"}],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",10,{"inputs":[{"name":"serializer"}],"output":{"name":"value"}}],[11,"visit_bool","","",10,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",10,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",10,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",10,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",10,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",10,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",10,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_some","","",10,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_unit_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_newtype_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seq_elt","","",10,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_map","","",10,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map_elt","","",10,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","",10,{"inputs":[{"name":"serializer"}],"output":{"name":"str"}}],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",11,{"inputs":[{"name":"deserializer"},{"name":"value"}],"output":{"name":"deserializer"}}],[11,"visit","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",11,null],[11,"visit_newtype_struct","","",11,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","",11,{"inputs":[{"name":"deserializer"}],"output":{"name":"str"}}]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex['crypto'] = {"items":[[0,"aead","crypto","",null,null],[8,"AeadEncryptor","crypto::aead","",null,null],[10,"encrypt","","",0,null],[8,"AeadDecryptor","","",null,null],[10,"decrypt","","",1,null],[0,"aes","crypto","",null,null],[4,"KeySize","crypto::aes","AES key size",null,null],[13,"KeySize128","","",2,null],[13,"KeySize192","","",2,null],[13,"KeySize256","","",2,null],[5,"ecb_encryptor","","Get the best implementation of an EcbEncryptor",null,null],[5,"ecb_decryptor","","Get the best implementation of an EcbDecryptor",null,null],[5,"cbc_encryptor","","Get the best implementation of a CbcEncryptor",null,null],[5,"cbc_decryptor","","Get the best implementation of a CbcDecryptor",null,null],[5,"ctr","","Get the best implementation of a Ctr",null,null],[11,"clone","","",2,{"inputs":[{"name":"keysize"}],"output":{"name":"keysize"}}],[0,"aes_gcm","crypto","",null,null],[3,"AesGcm","crypto::aes_gcm","",null,null],[11,"new","","",3,null],[11,"encrypt","","",3,null],[11,"decrypt","","",3,null],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table\nlookups or other timing dependant mechanisms. This module actually contains two seperate\nimplementations - an implementation that works on a single block at a time and a second\nimplementation that processes 8 blocks in parallel. Some block encryption modes really only work if\nyou are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes\nare trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for\ngreater efficiency, especially when using wide registers, such as the XMM registers available in\nx86 processors.",null,null],[3,"AesSafe128Encryptor","crypto::aessafe","",null,null],[3,"AesSafe128Decryptor","","",null,null],[3,"AesSafe192Encryptor","","",null,null],[3,"AesSafe192Decryptor","","",null,null],[3,"AesSafe256Encryptor","","",null,null],[3,"AesSafe256Decryptor","","",null,null],[3,"AesSafe128EncryptorX8","","",null,null],[3,"AesSafe128DecryptorX8","","",null,null],[3,"AesSafe192EncryptorX8","","",null,null],[3,"AesSafe192DecryptorX8","","",null,null],[3,"AesSafe256EncryptorX8","","",null,null],[3,"AesSafe256DecryptorX8","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"aessafe128encryptor"}],"output":{"name":"aessafe128encryptor"}}],[11,"clone","","",5,{"inputs":[{"name":"aessafe128decryptor"}],"output":{"name":"aessafe128decryptor"}}],[11,"new","","",4,null],[11,"new","","",5,null],[11,"block_size","","",4,{"inputs":[{"name":"aessafe128encryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",4,null],[11,"block_size","","",5,{"inputs":[{"name":"aessafe128decryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"aessafe192encryptor"}],"output":{"name":"aessafe192encryptor"}}],[11,"clone","","",7,{"inputs":[{"name":"aessafe192decryptor"}],"output":{"name":"aessafe192decryptor"}}],[11,"new","","",6,null],[11,"new","","",7,null],[11,"block_size","","",6,{"inputs":[{"name":"aessafe192encryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",6,null],[11,"block_size","","",7,{"inputs":[{"name":"aessafe192decryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"aessafe256encryptor"}],"output":{"name":"aessafe256encryptor"}}],[11,"clone","","",9,{"inputs":[{"name":"aessafe256decryptor"}],"output":{"name":"aessafe256decryptor"}}],[11,"new","","",8,null],[11,"new","","",9,null],[11,"block_size","","",8,{"inputs":[{"name":"aessafe256encryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",8,null],[11,"block_size","","",9,{"inputs":[{"name":"aessafe256decryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"aessafe128encryptorx8"}],"output":{"name":"aessafe128encryptorx8"}}],[11,"clone","","",11,{"inputs":[{"name":"aessafe128decryptorx8"}],"output":{"name":"aessafe128decryptorx8"}}],[11,"new","","",10,null],[11,"new","","",11,null],[11,"block_size","","",10,{"inputs":[{"name":"aessafe128encryptorx8"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",10,null],[11,"block_size","","",11,{"inputs":[{"name":"aessafe128decryptorx8"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"aessafe192encryptorx8"}],"output":{"name":"aessafe192encryptorx8"}}],[11,"clone","","",13,{"inputs":[{"name":"aessafe192decryptorx8"}],"output":{"name":"aessafe192decryptorx8"}}],[11,"new","","",12,null],[11,"new","","",13,null],[11,"block_size","","",12,{"inputs":[{"name":"aessafe192encryptorx8"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",12,null],[11,"block_size","","",13,{"inputs":[{"name":"aessafe192decryptorx8"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"aessafe256encryptorx8"}],"output":{"name":"aessafe256encryptorx8"}}],[11,"clone","","",15,{"inputs":[{"name":"aessafe256decryptorx8"}],"output":{"name":"aessafe256decryptorx8"}}],[11,"new","","",14,null],[11,"new","","",15,null],[11,"block_size","","",14,{"inputs":[{"name":"aessafe256encryptorx8"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",14,null],[11,"block_size","","",15,{"inputs":[{"name":"aessafe256decryptorx8"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",15,null],[0,"bcrypt","crypto","",null,null],[5,"bcrypt","crypto::bcrypt","",null,null],[0,"bcrypt_pbkdf","crypto","",null,null],[5,"bcrypt_pbkdf","crypto::bcrypt_pbkdf","",null,null],[0,"blake2b","crypto","",null,null],[3,"Blake2b","crypto::blake2b","",null,null],[11,"clone","","",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"blake2b"}}],[11,"new","","",16,{"inputs":[{"name":"blake2b"},{"name":"usize"}],"output":{"name":"blake2b"}}],[11,"new_keyed","","",16,null],[11,"blake2b","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"blake2b"}],"output":null}],[11,"input","","",16,null],[11,"result","","",16,null],[11,"output_bits","","",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"usize"}}],[11,"block_size","","",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",16,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",16,{"inputs":[{"name":"blake2b"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully\nsince incorrect use of the Mac code could result in permitting a timing attack which defeats\nthe security provided by a Mac function.",16,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"usize"}}],[0,"blockmodes","crypto","",null,null],[3,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption",null,null],[3,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption",null,null],[3,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called.",null,null],[3,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called.",null,null],[3,"EcbEncryptor","","ECB Encryption mode",null,null],[3,"EcbDecryptor","","ECB Decryption mode",null,null],[3,"CbcEncryptor","","CBC encryption mode",null,null],[3,"CbcDecryptor","","CBC decryption mode",null,null],[3,"CtrMode","","CTR Mode",null,null],[3,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time",null,null],[8,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding",null,null],[10,"pad_input","","Add padding to the last block of input data\nIf the mode can't handle a non-full block, it signals that error by simply leaving the block\nas it is which will be detected as an InvalidLength error.",17,{"inputs":[{"name":"paddingprocessor"},{"name":"w"}],"output":null}],[10,"strip_output","","Remove padding from the last block of output data\nIf false is returned, the processing fails",17,{"inputs":[{"name":"paddingprocessor"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"nopadding"}],"output":{"name":"nopadding"}}],[11,"pad_input","","",18,{"inputs":[{"name":"nopadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",18,{"inputs":[{"name":"nopadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"pkcspadding"}],"output":{"name":"pkcspadding"}}],[11,"pad_input","","",19,{"inputs":[{"name":"pkcspadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",19,{"inputs":[{"name":"pkcspadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",20,{"inputs":[{"name":"encpadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",20,{"inputs":[{"name":"encpadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",21,{"inputs":[{"name":"decpadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",21,{"inputs":[{"name":"decpadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"new","","Create a new ECB encryption mode object",22,{"inputs":[{"name":"ecbencryptor"},{"name":"t"},{"name":"x"}],"output":{"name":"ecbencryptor"}}],[11,"reset","","",22,{"inputs":[{"name":"ecbencryptor"}],"output":null}],[11,"encrypt","","",22,{"inputs":[{"name":"ecbencryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new ECB decryption mode object",23,{"inputs":[{"name":"ecbdecryptor"},{"name":"t"},{"name":"x"}],"output":{"name":"ecbdecryptor"}}],[11,"reset","","",23,{"inputs":[{"name":"ecbdecryptor"}],"output":null}],[11,"decrypt","","",23,{"inputs":[{"name":"ecbdecryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CBC encryption mode object",24,{"inputs":[{"name":"cbcencryptor"},{"name":"t"},{"name":"x"},{"name":"vec"}],"output":{"name":"cbcencryptor"}}],[11,"reset","","",24,null],[11,"encrypt","","",24,{"inputs":[{"name":"cbcencryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CBC decryption mode object",25,{"inputs":[{"name":"cbcdecryptor"},{"name":"t"},{"name":"x"},{"name":"vec"}],"output":{"name":"cbcdecryptor"}}],[11,"reset","","",25,null],[11,"decrypt","","",25,{"inputs":[{"name":"cbcdecryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CTR object",26,{"inputs":[{"name":"ctrmode"},{"name":"a"},{"name":"vec"}],"output":{"name":"ctrmode"}}],[11,"reset","","",26,null],[11,"process","","",26,null],[11,"encrypt","","",26,{"inputs":[{"name":"ctrmode"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",26,{"inputs":[{"name":"ctrmode"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CTR object that operates on 8 blocks at a time",27,null],[11,"reset","","",27,null],[11,"process","","",27,null],[11,"encrypt","","",27,{"inputs":[{"name":"ctrmodex8"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",27,{"inputs":[{"name":"ctrmodex8"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"blowfish","crypto","",null,null],[3,"Blowfish","crypto::blowfish","",null,null],[11,"clone","","",28,{"inputs":[{"name":"blowfish"}],"output":{"name":"blowfish"}}],[11,"new","","",28,null],[11,"init_state","","",28,{"inputs":[{"name":"blowfish"}],"output":{"name":"blowfish"}}],[11,"expand_key","","",28,null],[11,"salted_expand_key","","",28,null],[11,"encrypt","","",28,null],[11,"block_size","","",28,{"inputs":[{"name":"blowfish"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",28,null],[11,"block_size","","",28,{"inputs":[{"name":"blowfish"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",28,null],[0,"buffer","crypto","",null,null],[3,"RefReadBuffer","crypto::buffer","",null,null],[3,"OwnedReadBuffer","","",null,null],[3,"RefWriteBuffer","","",null,null],[3,"BorrowedWriteBuffer","","",null,null],[3,"OwnedWriteBuffer","","",null,null],[4,"BufferResult","","",null,null],[13,"BufferUnderflow","","",29,null],[13,"BufferOverflow","","",29,null],[8,"ReadBuffer","","",null,null],[10,"is_empty","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"bool"}}],[10,"is_full","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"bool"}}],[10,"remaining","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"usize"}}],[10,"capacity","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"usize"}}],[11,"position","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"usize"}}],[10,"rewind","","",30,{"inputs":[{"name":"readbuffer"},{"name":"usize"}],"output":null}],[10,"truncate","","",30,{"inputs":[{"name":"readbuffer"},{"name":"usize"}],"output":null}],[10,"reset","","",30,{"inputs":[{"name":"readbuffer"}],"output":null}],[10,"peek_next","","",30,null],[11,"peek_remaining","","",30,null],[10,"take_next","","",30,null],[11,"take_remaining","","",30,null],[11,"push_to","","",30,{"inputs":[{"name":"readbuffer"},{"name":"w"}],"output":null}],[8,"WriteBuffer","","",null,null],[10,"is_empty","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"bool"}}],[10,"is_full","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"bool"}}],[10,"remaining","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"usize"}}],[10,"capacity","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"usize"}}],[11,"position","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"usize"}}],[10,"rewind","","",31,{"inputs":[{"name":"writebuffer"},{"name":"usize"}],"output":null}],[10,"reset","","",31,{"inputs":[{"name":"writebuffer"}],"output":null}],[10,"peek_read_buffer","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"refreadbuffer"}}],[10,"take_next","","",31,null],[11,"take_remaining","","",31,null],[10,"take_read_buffer","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"clone","","",29,{"inputs":[{"name":"bufferresult"}],"output":{"name":"bufferresult"}}],[11,"new","","",32,null],[11,"is_empty","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",32,{"inputs":[{"name":"refreadbuffer"},{"name":"usize"}],"output":null}],[11,"truncate","","",32,{"inputs":[{"name":"refreadbuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":null}],[11,"peek_next","","",32,null],[11,"take_next","","",32,null],[11,"new","","",33,{"inputs":[{"name":"ownedreadbuffer"},{"name":"vec"}],"output":{"name":"ownedreadbuffer"}}],[11,"new_with_len","","",33,{"inputs":[{"name":"ownedreadbuffer"},{"name":"vec"},{"name":"usize"}],"output":{"name":"ownedreadbuffer"}}],[11,"into_write_buffer","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"ownedwritebuffer"}}],[11,"borrow_write_buffer","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"borrowedwritebuffer"}}],[11,"is_empty","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",33,{"inputs":[{"name":"ownedreadbuffer"},{"name":"usize"}],"output":null}],[11,"truncate","","",33,{"inputs":[{"name":"ownedreadbuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":null}],[11,"peek_next","","",33,null],[11,"take_next","","",33,null],[11,"new","","",34,null],[11,"is_empty","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",34,{"inputs":[{"name":"refwritebuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":null}],[11,"peek_read_buffer","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",34,null],[11,"take_read_buffer","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"is_empty","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",35,{"inputs":[{"name":"borrowedwritebuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":null}],[11,"peek_read_buffer","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",35,null],[11,"take_read_buffer","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"new","","",36,{"inputs":[{"name":"ownedwritebuffer"},{"name":"vec"}],"output":{"name":"ownedwritebuffer"}}],[11,"into_read_buffer","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"ownedreadbuffer"}}],[11,"is_empty","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",36,{"inputs":[{"name":"ownedwritebuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":null}],[11,"peek_read_buffer","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",36,null],[11,"take_read_buffer","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[0,"chacha20","crypto","",null,null],[3,"ChaCha20","crypto::chacha20","",null,null],[11,"clone","","",37,{"inputs":[{"name":"chacha20"}],"output":{"name":"chacha20"}}],[11,"new","","",37,null],[11,"new_xchacha20","","",37,null],[11,"process","","",37,null],[11,"encrypt","","",37,{"inputs":[{"name":"chacha20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",37,{"inputs":[{"name":"chacha20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"chacha20poly1305","crypto","",null,null],[3,"ChaCha20Poly1305","crypto::chacha20poly1305","",null,null],[11,"clone","","",38,{"inputs":[{"name":"chacha20poly1305"}],"output":{"name":"chacha20poly1305"}}],[11,"new","","",38,null],[11,"encrypt","","",38,null],[11,"decrypt","","",38,null],[0,"curve25519","crypto","",null,null],[3,"Fe","crypto::curve25519","",null,null],[3,"GeP2","","",null,null],[3,"GeP3","","",null,null],[3,"GeP1P1","","",null,null],[3,"GePrecomp","","",null,null],[3,"GeCached","","",null,null],[5,"ge_scalarmult_base","","",null,null],[5,"sc_reduce","","",null,null],[5,"sc_muladd","","",null,null],[5,"curve25519","","",null,null],[5,"curve25519_base","","",null,null],[11,"clone","","",39,{"inputs":[{"name":"fe"}],"output":{"name":"fe"}}],[11,"eq","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"bool"}}],[11,"add","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"sub","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"mul","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"from_bytes","","",39,null],[11,"to_bytes","","",39,null],[11,"maybe_swap_with","","",39,{"inputs":[{"name":"fe"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"maybe_set","","",39,{"inputs":[{"name":"fe"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"invert","","",39,{"inputs":[{"name":"fe"}],"output":{"name":"fe"}}],[11,"clone","","",40,{"inputs":[{"name":"gep2"}],"output":{"name":"gep2"}}],[11,"clone","","",41,{"inputs":[{"name":"gep3"}],"output":{"name":"gep3"}}],[11,"clone","","",42,{"inputs":[{"name":"gep1p1"}],"output":{"name":"gep1p1"}}],[11,"clone","","",43,{"inputs":[{"name":"geprecomp"}],"output":{"name":"geprecomp"}}],[11,"clone","","",44,{"inputs":[{"name":"gecached"}],"output":{"name":"gecached"}}],[11,"to_bytes","","",40,null],[11,"double_scalarmult_vartime","","",40,null],[11,"from_bytes_negate_vartime","","",41,null],[11,"to_bytes","","",41,null],[11,"add","","",41,{"inputs":[{"name":"gep3"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"add","","",41,{"inputs":[{"name":"gep3"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"sub","","",41,{"inputs":[{"name":"gep3"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"sub","","",41,{"inputs":[{"name":"gep3"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"maybe_set","","",43,{"inputs":[{"name":"geprecomp"},{"name":"geprecomp"},{"name":"i32"}],"output":null}],[11,"select","","",43,{"inputs":[{"name":"geprecomp"},{"name":"usize"},{"name":"i8"}],"output":{"name":"geprecomp"}}],[0,"digest","crypto","",null,null],[8,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions.",null,null],[10,"input","","Provide message data.",45,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",45,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",45,{"inputs":[{"name":"digest"}],"output":null}],[10,"output_bits","","Get the output size in bits.",45,{"inputs":[{"name":"digest"}],"output":{"name":"usize"}}],[11,"output_bytes","","Get the output size in bytes.",45,{"inputs":[{"name":"digest"}],"output":{"name":"usize"}}],[10,"block_size","","Get the block size in bytes.",45,{"inputs":[{"name":"digest"}],"output":{"name":"usize"}}],[11,"input_str","","Convenience function that feeds a string into a digest.",45,{"inputs":[{"name":"digest"},{"name":"str"}],"output":null}],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",45,{"inputs":[{"name":"digest"}],"output":{"name":"string"}}],[0,"ed25519","crypto","",null,null],[5,"keypair","crypto::ed25519","",null,null],[5,"signature","","",null,null],[5,"verify","","",null,null],[5,"exchange","","",null,null],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG",null,null],[3,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)",null,null],[17,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a \"catastrophic\nreseed\" is allowed to happen. (A direct reseed through the\n`SeedableRng` API is not affected by this limit.)",null,null],[11,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",46,{"inputs":[{"name":"fortuna"}],"output":{"name":"fortuna"}}],[11,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",46,null],[11,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",46,null],[11,"next_u32","","",46,{"inputs":[{"name":"fortuna"}],"output":{"name":"u32"}}],[11,"from_seed","","",46,null],[11,"reseed","","",46,null],[0,"ghash","crypto","",null,null],[3,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation",null,null],[3,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided",null,null],[11,"clone","","",47,{"inputs":[{"name":"ghash"}],"output":{"name":"ghash"}}],[11,"clone","","",48,{"inputs":[{"name":"ghashwithc"}],"output":{"name":"ghashwithc"}}],[11,"new","","Creates a new GHASH state, with `h` as the key",47,null],[11,"input_a","","Feeds data for GHASH's A input",47,null],[11,"input_c","","Feeds data for GHASH's C input",47,null],[11,"result","","Retrieve the digest result",47,null],[11,"input_c","","Feeds data for GHASH's C input",48,null],[11,"result","","Retrieve the digest result",48,null],[11,"input","","",47,null],[11,"reset","","",47,{"inputs":[{"name":"ghash"}],"output":null}],[11,"result","","",47,{"inputs":[{"name":"ghash"}],"output":{"name":"macresult"}}],[11,"raw_result","","",47,null],[11,"output_bytes","","",47,{"inputs":[{"name":"ghash"}],"output":{"name":"usize"}}],[0,"hc128","crypto","",null,null],[3,"Hc128","crypto::hc128","",null,null],[11,"clone","","",49,{"inputs":[{"name":"hc128"}],"output":{"name":"hc128"}}],[11,"new","","",49,null],[11,"process","","",49,null],[11,"encrypt","","",49,{"inputs":[{"name":"hc128"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",49,{"inputs":[{"name":"hc128"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest.",null,null],[3,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.",null,null],[11,"new","","Create a new Hmac instance.",50,null],[11,"input","","",50,null],[11,"reset","","",50,{"inputs":[{"name":"hmac"}],"output":null}],[11,"result","","",50,{"inputs":[{"name":"hmac"}],"output":{"name":"macresult"}}],[11,"raw_result","","",50,null],[11,"output_bytes","","",50,{"inputs":[{"name":"hmac"}],"output":{"name":"usize"}}],[0,"hkdf","crypto","This module implements the HMAC-based Extract-and-Expand Key\nDerivation Function as specified by  https://tools.ietf.org/html/rfc5869.",null,null],[5,"hkdf_extract","crypto::hkdf","Execute the HKDF-Extract function.  Applications MUST NOT use this for\npassword hashing.",null,null],[5,"hkdf_expand","","Execute the HKDF-Expand function.  Applications MUST NOT use this for\npassword hashing.",null,null],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait.",null,null],[3,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.",null,null],[8,"Mac","","The Mac trait defines methods for a Message Authentication function.",null,null],[10,"input","","Process input data.",51,null],[10,"reset","","Reset the Mac state to begin processing another input stream.",51,{"inputs":[{"name":"mac"}],"output":null}],[10,"result","","Obtain the result of a Mac computation as a MacResult.",51,{"inputs":[{"name":"mac"}],"output":{"name":"macresult"}}],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully\nsince incorrect use of the Mac code could result in permitting a timing attack which defeats\nthe security provided by a Mac function.",51,null],[10,"output_bytes","","Get the size of the Mac code, in bytes.",51,{"inputs":[{"name":"mac"}],"output":{"name":"usize"}}],[11,"new","","Create a new MacResult.",52,null],[11,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",52,{"inputs":[{"name":"macresult"},{"name":"vec"}],"output":{"name":"macresult"}}],[11,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value\nmay permit timing attacks which defeat the security provided by the Mac function.",52,null],[11,"eq","","",52,{"inputs":[{"name":"macresult"},{"name":"macresult"}],"output":{"name":"bool"}}],[0,"md5","crypto","",null,null],[3,"Md5","crypto::md5","The MD5 Digest algorithm",null,null],[11,"new","","Construct a new instance of the MD5 Digest.",53,{"inputs":[{"name":"md5"}],"output":{"name":"md5"}}],[11,"input","","",53,null],[11,"reset","","",53,{"inputs":[{"name":"md5"}],"output":null}],[11,"result","","",53,null],[11,"output_bits","","",53,{"inputs":[{"name":"md5"}],"output":{"name":"usize"}}],[11,"block_size","","",53,{"inputs":[{"name":"md5"}],"output":{"name":"usize"}}],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by\nhttp://tools.ietf.org/html/rfc2898.",null,null],[5,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides\nbetter security, so, applications that do not have a requirement to use PBKDF2 specifically\nshould consider using that function instead.",null,null],[5,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where\nan application needs to use PBKDF2 to hash a password for storage. The result is a String that\ncontains the parameters used as part of its encoding. The pbkdf2_check function may be used on\na password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[5,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and\nreturns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"poly1305","crypto","",null,null],[3,"Poly1305","crypto::poly1305","",null,null],[11,"clone","","",54,{"inputs":[{"name":"poly1305"}],"output":{"name":"poly1305"}}],[11,"new","","",54,null],[11,"input","","",54,null],[11,"reset","","",54,{"inputs":[{"name":"poly1305"}],"output":null}],[11,"result","","",54,{"inputs":[{"name":"poly1305"}],"output":{"name":"macresult"}}],[11,"raw_result","","",54,null],[11,"output_bytes","","",54,{"inputs":[{"name":"poly1305"}],"output":{"name":"usize"}}],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS\nNOT A FIXED TIME IMPLEMENTATION.",null,null],[3,"Rc4","crypto::rc4","",null,null],[11,"clone","","",55,{"inputs":[{"name":"rc4"}],"output":{"name":"rc4"}}],[11,"new","","",55,null],[11,"process","","",55,null],[11,"encrypt","","",55,{"inputs":[{"name":"rc4"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",55,{"inputs":[{"name":"rc4"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash.",null,null],[3,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation",null,null],[11,"clone","","",56,{"inputs":[{"name":"ripemd160"}],"output":{"name":"ripemd160"}}],[11,"new","","",56,{"inputs":[{"name":"ripemd160"}],"output":{"name":"ripemd160"}}],[11,"reset","","Resets the hash to its original state also clearing the buffer.\nTo be used in between hashing separate messages to avoid having\nto recreate and allocate the whole structure.",56,{"inputs":[{"name":"ripemd160"}],"output":null}],[11,"input","","Adds the input `msg` to the hash. This method can be called repeatedly\nfor use with streaming messages.",56,null],[11,"result","","Returns the resulting digest of the entire message.\nNote: `out` must be at least 20 bytes (160 bits)",56,null],[11,"output_bits","","Returns the size of the digest in bits",56,{"inputs":[{"name":"ripemd160"}],"output":{"name":"usize"}}],[11,"block_size","","Returns the block size the hash operates on in bytes",56,{"inputs":[{"name":"ripemd160"}],"output":{"name":"usize"}}],[0,"salsa20","crypto","",null,null],[3,"Salsa20","crypto::salsa20","",null,null],[5,"hsalsa20","","",null,null],[11,"clone","","",57,{"inputs":[{"name":"salsa20"}],"output":{"name":"salsa20"}}],[11,"new","","",57,null],[11,"new_xsalsa20","","",57,null],[11,"process","","",57,null],[11,"encrypt","","",57,{"inputs":[{"name":"salsa20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",57,{"inputs":[{"name":"salsa20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1].",null,null],[3,"ScryptParams","crypto::scrypt","The Scrypt parameter values.",null,null],[5,"scrypt","","The scrypt key derivation function.",null,null],[5,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where\nan application needs to use Scrypt to hash a password for storage. The result is a String that\ncontains the parameters used as part of its encoding. The scrypt_check function may be used on\na password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"scryptparams"}],"output":{"name":"result"}}],[5,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and\nreturns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"scryptparams"}],"output":{"name":"scryptparams"}}],[11,"new","","Create a new instance of ScryptParams.",58,{"inputs":[{"name":"scryptparams"},{"name":"u8"},{"name":"u32"},{"name":"u32"}],"output":{"name":"scryptparams"}}],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash algorithm.",null,null],[3,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation",null,null],[5,"sha1_first","","Not an intrinsic, but gets the first element of a vector.",null,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32"}}],[5,"sha1_first_add","","Not an intrinsic, but adds a word to the first element of a vector.",null,{"inputs":[{"name":"u32"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_schedule_x4","","Performs 4 rounds of the message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_first_half","","Emulates `llvm.x86.sha1nexte` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_round_x4","","Emulates `llvm.x86.sha1rnds4` intrinsic.\nPerforms 4 rounds of the message block digest.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"i8"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_block_u32","","Process a block with the SHA-1 algorithm.",null,null],[5,"sha1_digest_block","","Process a block with the SHA-1 algorithm. (See more...)",null,null],[11,"clone","","",59,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"new","","Construct a `sha` object",59,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"reset","","",59,{"inputs":[{"name":"sha1"}],"output":null}],[11,"input","","",59,null],[11,"result","","",59,null],[11,"output_bits","","",59,{"inputs":[{"name":"sha1"}],"output":{"name":"usize"}}],[11,"block_size","","",59,{"inputs":[{"name":"sha1"}],"output":{"name":"usize"}}],[0,"sha2","crypto","An implementation of the SHA-2 cryptographic hash algorithms.",null,null],[3,"Sha512","crypto::sha2","The SHA-512 hash algorithm with the SHA-512 initial hash value.",null,null],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",null,null],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",null,null],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",null,null],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",null,null],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",null,null],[5,"sha256_schedule_x4","","Performs 4 rounds of the SHA-256 message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_round_x2","","Emulates `llvm.x86.sha256rnds2` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_block_u32","","Process a block with the SHA-256 algorithm.",null,null],[5,"sha256_digest_block","","Process a block with the SHA-256 algorithm. (See more...)",null,null],[5,"sha512_schedule_x2","","Performs 2 rounds of the SHA-512 message schedule update.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_round","","Performs one round of the SHA-512 message block digest.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_block_u64","","Process a block with the SHA-512 algorithm.",null,null],[5,"sha512_digest_block","","Process a block with the SHA-512 algorithm. (See more...)",null,null],[17,"K64","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K64X2","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K32","","Constants necessary for SHA-256 family of digests.",null,null],[17,"K32X4","","Constants necessary for SHA-256 family of digests.",null,null],[11,"new","","Construct an new instance of a SHA-512 digest.",60,{"inputs":[{"name":"sha512"}],"output":{"name":"sha512"}}],[11,"input","","",60,null],[11,"result","","",60,null],[11,"reset","","",60,{"inputs":[{"name":"sha512"}],"output":null}],[11,"output_bits","","",60,{"inputs":[{"name":"sha512"}],"output":{"name":"usize"}}],[11,"block_size","","",60,{"inputs":[{"name":"sha512"}],"output":{"name":"usize"}}],[11,"new","","Construct an new instance of a SHA-384 digest.",61,{"inputs":[{"name":"sha384"}],"output":{"name":"sha384"}}],[11,"input","","",61,null],[11,"result","","",61,null],[11,"reset","","",61,{"inputs":[{"name":"sha384"}],"output":null}],[11,"output_bits","","",61,{"inputs":[{"name":"sha384"}],"output":{"name":"usize"}}],[11,"block_size","","",61,{"inputs":[{"name":"sha384"}],"output":{"name":"usize"}}],[11,"new","","Construct an new instance of a SHA-512/256 digest.",62,{"inputs":[{"name":"sha512trunc256"}],"output":{"name":"sha512trunc256"}}],[11,"input","","",62,null],[11,"result","","",62,null],[11,"reset","","",62,{"inputs":[{"name":"sha512trunc256"}],"output":null}],[11,"output_bits","","",62,{"inputs":[{"name":"sha512trunc256"}],"output":{"name":"usize"}}],[11,"block_size","","",62,{"inputs":[{"name":"sha512trunc256"}],"output":{"name":"usize"}}],[11,"new","","Construct an new instance of a SHA-512/224 digest.",63,{"inputs":[{"name":"sha512trunc224"}],"output":{"name":"sha512trunc224"}}],[11,"input","","",63,null],[11,"result","","",63,null],[11,"reset","","",63,{"inputs":[{"name":"sha512trunc224"}],"output":null}],[11,"output_bits","","",63,{"inputs":[{"name":"sha512trunc224"}],"output":{"name":"usize"}}],[11,"block_size","","",63,{"inputs":[{"name":"sha512trunc224"}],"output":{"name":"usize"}}],[11,"clone","","",64,{"inputs":[{"name":"sha256"}],"output":{"name":"sha256"}}],[11,"new","","Construct an new instance of a SHA-256 digest.",64,{"inputs":[{"name":"sha256"}],"output":{"name":"sha256"}}],[11,"input","","",64,null],[11,"result","","",64,null],[11,"reset","","",64,{"inputs":[{"name":"sha256"}],"output":null}],[11,"output_bits","","",64,{"inputs":[{"name":"sha256"}],"output":{"name":"usize"}}],[11,"block_size","","",64,{"inputs":[{"name":"sha256"}],"output":{"name":"usize"}}],[11,"clone","","",65,{"inputs":[{"name":"sha224"}],"output":{"name":"sha224"}}],[11,"new","","Construct an new instance of a SHA-224 digest.",65,{"inputs":[{"name":"sha224"}],"output":{"name":"sha224"}}],[11,"input","","",65,null],[11,"result","","",65,null],[11,"reset","","",65,{"inputs":[{"name":"sha224"}],"output":null}],[11,"output_bits","","",65,{"inputs":[{"name":"sha224"}],"output":{"name":"usize"}}],[11,"block_size","","",65,{"inputs":[{"name":"sha224"}],"output":{"name":"usize"}}],[0,"sosemanuk","crypto","",null,null],[3,"Sosemanuk","crypto::sosemanuk","",null,null],[11,"clone","","",66,{"inputs":[{"name":"sosemanuk"}],"output":{"name":"sosemanuk"}}],[11,"new","","",66,null],[11,"process","","",66,null],[11,"encrypt","","",66,{"inputs":[{"name":"sosemanuk"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",66,{"inputs":[{"name":"sosemanuk"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"symmetriccipher","crypto","",null,null],[4,"SymmetricCipherError","crypto::symmetriccipher","",null,null],[13,"InvalidLength","","",67,null],[13,"InvalidPadding","","",67,null],[8,"BlockEncryptor","","",null,null],[10,"block_size","","",68,{"inputs":[{"name":"blockencryptor"}],"output":{"name":"usize"}}],[10,"encrypt_block","","",68,null],[8,"BlockEncryptorX8","","",null,null],[10,"block_size","","",69,{"inputs":[{"name":"blockencryptorx8"}],"output":{"name":"usize"}}],[10,"encrypt_block_x8","","",69,null],[8,"BlockDecryptor","","",null,null],[10,"block_size","","",70,{"inputs":[{"name":"blockdecryptor"}],"output":{"name":"usize"}}],[10,"decrypt_block","","",70,null],[8,"BlockDecryptorX8","","",null,null],[10,"block_size","","",71,{"inputs":[{"name":"blockdecryptorx8"}],"output":{"name":"usize"}}],[10,"decrypt_block_x8","","",71,null],[8,"Encryptor","","",null,null],[10,"encrypt","","",72,{"inputs":[{"name":"encryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[8,"Decryptor","","",null,null],[10,"decrypt","","",73,{"inputs":[{"name":"decryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[8,"SynchronousStreamCipher","","",null,null],[10,"process","","",74,null],[11,"clone","","",67,{"inputs":[{"name":"symmetricciphererror"}],"output":{"name":"symmetricciphererror"}}],[11,"fmt","","",67,{"inputs":[{"name":"symmetricciphererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"process","alloc::boxed","",75,null],[11,"encrypt","","",75,{"inputs":[{"name":"box"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",75,{"inputs":[{"name":"box"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"util","crypto","",null,null],[5,"supports_aesni","crypto::util","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"secure_memset","","",null,null],[5,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal\nlength, the function returns false immediately.",null,null],[5,"rust_crypto_util_supports_aesni","","",null,null],[5,"rust_crypto_util_fixed_time_eq_asm","","",null,null],[5,"rust_crypto_util_secure_memset","","",null,null],[0,"whirlpool","crypto","An implementation of the Whirlpool cryptographic hash algorithm.",null,null],[3,"Whirlpool","crypto::whirlpool","",null,null],[11,"new","","",76,{"inputs":[{"name":"whirlpool"}],"output":{"name":"whirlpool"}}],[11,"input","","",76,null],[11,"result","","",76,null],[11,"reset","","",76,{"inputs":[{"name":"whirlpool"}],"output":null}],[11,"output_bits","","",76,{"inputs":[{"name":"whirlpool"}],"output":{"name":"usize"}}],[11,"block_size","","",76,{"inputs":[{"name":"whirlpool"}],"output":{"name":"usize"}}],[0,"aesni","crypto","",null,null],[3,"AesNiEncryptor","crypto::aesni","",null,null],[3,"AesNiDecryptor","","",null,null],[11,"clone","","",77,{"inputs":[{"name":"aesniencryptor"}],"output":{"name":"aesniencryptor"}}],[11,"clone","","",78,{"inputs":[{"name":"aesnidecryptor"}],"output":{"name":"aesnidecryptor"}}],[11,"new","","",77,null],[11,"new","","",78,null],[11,"block_size","","",77,{"inputs":[{"name":"aesniencryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",77,null],[11,"block_size","","",78,{"inputs":[{"name":"aesnidecryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",78,null]],"paths":[[8,"AeadEncryptor"],[8,"AeadDecryptor"],[4,"KeySize"],[3,"AesGcm"],[3,"AesSafe128Encryptor"],[3,"AesSafe128Decryptor"],[3,"AesSafe192Encryptor"],[3,"AesSafe192Decryptor"],[3,"AesSafe256Encryptor"],[3,"AesSafe256Decryptor"],[3,"AesSafe128EncryptorX8"],[3,"AesSafe128DecryptorX8"],[3,"AesSafe192EncryptorX8"],[3,"AesSafe192DecryptorX8"],[3,"AesSafe256EncryptorX8"],[3,"AesSafe256DecryptorX8"],[3,"Blake2b"],[8,"PaddingProcessor"],[3,"NoPadding"],[3,"PkcsPadding"],[3,"EncPadding"],[3,"DecPadding"],[3,"EcbEncryptor"],[3,"EcbDecryptor"],[3,"CbcEncryptor"],[3,"CbcDecryptor"],[3,"CtrMode"],[3,"CtrModeX8"],[3,"Blowfish"],[4,"BufferResult"],[8,"ReadBuffer"],[8,"WriteBuffer"],[3,"RefReadBuffer"],[3,"OwnedReadBuffer"],[3,"RefWriteBuffer"],[3,"BorrowedWriteBuffer"],[3,"OwnedWriteBuffer"],[3,"ChaCha20"],[3,"ChaCha20Poly1305"],[3,"Fe"],[3,"GeP2"],[3,"GeP3"],[3,"GeP1P1"],[3,"GePrecomp"],[3,"GeCached"],[8,"Digest"],[3,"Fortuna"],[3,"Ghash"],[3,"GhashWithC"],[3,"Hc128"],[3,"Hmac"],[8,"Mac"],[3,"MacResult"],[3,"Md5"],[3,"Poly1305"],[3,"Rc4"],[3,"Ripemd160"],[3,"Salsa20"],[3,"ScryptParams"],[3,"Sha1"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"],[3,"Sha256"],[3,"Sha224"],[3,"Sosemanuk"],[4,"SymmetricCipherError"],[8,"BlockEncryptor"],[8,"BlockEncryptorX8"],[8,"BlockDecryptor"],[8,"BlockDecryptorX8"],[8,"Encryptor"],[8,"Decryptor"],[8,"SynchronousStreamCipher"],[3,"Box"],[3,"Whirlpool"],[3,"AesNiEncryptor"],[3,"AesNiDecryptor"]]};
searchIndex['serde'] = {"items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"Bytes","serde::bytes","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",null,null],[3,"ByteBuf","","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[11,"cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",0,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"bytes"},{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",0,null],[11,"deref","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"from","","",1,{"inputs":[{"name":"bytebuf"},{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"bytebufvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",2,null],[11,"visit_byte_buf","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"d"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::kind_mismatch`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option<T>` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PrimitiveVisitor","","A visitor that produces a primitive type.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"unitvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"unitvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `PrimitiveVisitor`.",6,{"inputs":[{"name":"primitivevisitor"}],"output":{"name":"self"}}],[11,"visit_isize","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","collections::string","",7,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",8,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",9,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",9,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",9,{"inputs":[{"name":"binaryheapvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::binary_heap","",10,{"inputs":[{"name":"binaryheap"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",11,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",11,{"inputs":[{"name":"btreesetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::set","",12,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",13,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",13,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",13,{"inputs":[{"name":"linkedlistvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::linked_list","",14,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",15,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",15,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",15,{"inputs":[{"name":"hashsetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",17,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",17,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",17,{"inputs":[{"name":"vecvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec","",18,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",19,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",19,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",19,{"inputs":[{"name":"vecdequevisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec_deque","",20,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*<T>`.",21,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"self"}}],[11,"visit_seq","","",21,{"inputs":[{"name":"tuplevisitor1"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",22,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"tuplevisitor2"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",23,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"tuplevisitor3"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",24,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"tuplevisitor4"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",25,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"tuplevisitor5"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",26,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"tuplevisitor6"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",27,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"tuplevisitor7"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",28,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"tuplevisitor8"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",29,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"self"}}],[11,"visit_seq","","",29,{"inputs":[{"name":"tuplevisitor9"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",30,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"self"}}],[11,"visit_seq","","",30,{"inputs":[{"name":"tuplevisitor10"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",31,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"self"}}],[11,"visit_seq","","",31,{"inputs":[{"name":"tuplevisitor11"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",32,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"self"}}],[11,"visit_seq","","",32,{"inputs":[{"name":"tuplevisitor12"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",33,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",33,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",33,{"inputs":[{"name":"btreemapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::map","",34,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*<T>`.",35,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",35,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",35,{"inputs":[{"name":"hashmapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",37,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",38,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",39,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",40,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",41,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",42,{"inputs":[{"name":"result"},{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"SyntaxError","","The value had some syntatic error.",43,null],[13,"EndOfStreamError","","EOF while deserializing a value.",43,null],[13,"UnknownFieldError","","Unknown field in struct.",43,null],[13,"MissingFieldError","","Struct is missing a field.",43,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",44,null],[10,"into_deserializer","","Convert this value into a deserializer.",44,{"inputs":[{"name":"valuedeserializer"}],"output":{"name":"deserializer"}}],[11,"eq","","",43,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"syntax","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"end_of_stream","","",43,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"unknown_field","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"visit","","",45,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","",45,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",46,{"inputs":[{"name":"booldeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",47,{"inputs":[{"name":"i8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",48,{"inputs":[{"name":"i16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",49,{"inputs":[{"name":"i32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",50,{"inputs":[{"name":"i64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",51,{"inputs":[{"name":"isizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",52,{"inputs":[{"name":"u8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",53,{"inputs":[{"name":"u16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",54,{"inputs":[{"name":"u32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",55,{"inputs":[{"name":"u64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",56,{"inputs":[{"name":"usizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",57,{"inputs":[{"name":"f32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",58,{"inputs":[{"name":"f64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",59,{"inputs":[{"name":"chardeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",60,{"inputs":[{"name":"strdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",60,null],[11,"visit_variant","","",60,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",60,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"into_deserializer","collections::string","",7,{"inputs":[{"name":"string"}],"output":{"name":"stringdeserializer"}}],[11,"visit","serde::de::value","",61,{"inputs":[{"name":"stringdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",61,null],[11,"visit_variant","","",61,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",61,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",62,{"inputs":[{"name":"seqdeserializer"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",62,{"inputs":[{"name":"seqdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",62,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"end","","",62,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",62,null],[11,"into_deserializer","collections::vec","",18,{"inputs":[{"name":"vec"}],"output":{"name":"seqdeserializer"}}],[11,"into_deserializer","collections::btree::set","",12,{"inputs":[{"name":"btreeset"}],"output":{"name":"seqdeserializer"}}],[11,"into_deserializer","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"}],"output":{"name":"seqdeserializer"}}],[11,"new","serde::de::value","Construct a new `MapDeserializer<I, K, V>`.",63,{"inputs":[{"name":"mapdeserializer"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",63,{"inputs":[{"name":"mapdeserializer"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"visit_value","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"end","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",63,null],[11,"into_deserializer","collections::btree::map","",34,{"inputs":[{"name":"btreemap"}],"output":{"name":"mapdeserializer"}}],[11,"into_deserializer","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"mapdeserializer"}}],[11,"into_deserializer","serde::bytes","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesdeserializer"}}],[11,"visit","serde::de::value","",64,{"inputs":[{"name":"bytesdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"deserializer"}}],[11,"visit","serde::de::value","",65,{"inputs":[{"name":"bytebufdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"syntax","","Raised when there is general error when deserializing a type.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"length_mismatch","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",66,{"inputs":[{"name":"error"},{"name":"usize"}],"output":{"name":"self"}}],[11,"type_mismatch","","Raised when a `Deserialize` was passed an incorrect type.",66,{"inputs":[{"name":"error"},{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",66,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[10,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[10,"missing_field","","Raised when a `Deserialize` struct type did not receive a field.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",67,{"inputs":[{"name":"deserialize"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",68,null],[10,"visit","","This method walks a visitor through a value as it is being deserialized.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_char","","This method hints that the `Deserialize` type is expecting a `char` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_string","","This method hints that the `Deserialize` type is expecting a `String` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren't tagged as sequences.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren't tagged as maps.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren't tagged as a unit struct.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren't tagged as a newtype struct.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren't tagged as sequences.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren't tagged as maps.",68,null],[11,"visit_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",68,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",68,null],[11,"visit_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","Specify a format string for the deserializer.",68,{"inputs":[{"name":"deserializer"}],"output":{"name":"str"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",69,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",69,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",69,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",69,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",70,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",70,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",70,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",70,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",71,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",71,null],[11,"missing_field","","Report that there",71,{"inputs":[{"name":"mapvisitor"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",72,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",72,{"inputs":[{"name":"enumvisitor"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",73,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",73,{"inputs":[{"name":"variantvisitor"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",73,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",null,null],[11,"new","","Construct a new `LineColIterator<Iter>`.",74,{"inputs":[{"name":"linecoliterator"},{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust's builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",7,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::option","",8,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit","","",8,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",8,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor<Iter>`.",75,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",75,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",75,{"inputs":[{"name":"seqiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::binary_heap","",10,{"inputs":[{"name":"binaryheap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::btree::set","",12,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::linked_list","",14,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec","",18,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec_deque","",20,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",76,null],[11,"visit","","",76,{"inputs":[{"name":"tuplevisitor1"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",76,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",77,null],[11,"visit","","",77,{"inputs":[{"name":"tuplevisitor2"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",77,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",78,null],[11,"visit","","",78,{"inputs":[{"name":"tuplevisitor3"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",78,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",79,null],[11,"visit","","",79,{"inputs":[{"name":"tuplevisitor4"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",79,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",80,null],[11,"visit","","",80,{"inputs":[{"name":"tuplevisitor5"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",80,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",81,null],[11,"visit","","",81,{"inputs":[{"name":"tuplevisitor6"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",81,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",82,null],[11,"visit","","",82,{"inputs":[{"name":"tuplevisitor7"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",82,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",83,null],[11,"visit","","",83,{"inputs":[{"name":"tuplevisitor8"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",83,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",84,null],[11,"visit","","",84,{"inputs":[{"name":"tuplevisitor9"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",84,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",85,null],[11,"visit","","",85,{"inputs":[{"name":"tuplevisitor10"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",85,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",86,null],[11,"visit","","",86,{"inputs":[{"name":"tuplevisitor11"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",86,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",87,null],[11,"visit","","",87,{"inputs":[{"name":"tuplevisitor12"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",87,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor<Iter>`.",88,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",88,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",88,{"inputs":[{"name":"mapiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::btree::map","",34,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::boxed","",38,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::rc","",40,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::arc","",39,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::borrow","",41,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::result","",42,{"inputs":[{"name":"result"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::path","",89,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",37,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serialize","serde::ser","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",90,{"inputs":[{"name":"serialize"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",91,null],[10,"visit_bool","","`visit_bool` serializes a `bool` value.",91,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[10,"visit_i64","","`visit_i64` serializes a `i64` value.",91,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[10,"visit_u64","","`visit_u64` serializes a `u64` value.",91,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `visit_f64` method.",91,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[10,"visit_f64","","`visit_f64` serializes a `f64` value.",91,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` serializes a character. By default it serializes it as a `&str` containing a\nsingle character.",91,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[10,"visit_str","","`visit_str` serializes a `&str`.",91,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` is a hook that enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",91,null],[10,"visit_unit","","Serializes a `()` value.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","Serializes a unit struct value.",91,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The `visit_newtype_struct` allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_newtype_variant","","The `visit_newtype_variant` allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"visit_none","","Serializes a `None` value.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[10,"visit_some","","Serializes a `Some(...)` value.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_seq","","Serializes a sequence.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_seq_elt","","Serializes a sequence element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple","","Serializes a tuple.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_elt","","Serializes a tuple element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple_struct","","Serializes a tuple struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_struct_elt","","Serializes a tuple struct element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple_variant","","Serializes a tuple variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_variant_elt","","Serializes a tuple element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[10,"visit_map","","Serializes a map.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_map_elt","","Serializes a map element (key-value pair).",91,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","Serializes a struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_elt","","Serializes an element of a struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant","","Serializes a struct variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant_elt","","Serializes an element of a struct variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","Specify a format string for the serializer.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"str"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",92,{"inputs":[{"name":"seqvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",92,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",93,{"inputs":[{"name":"mapvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",93,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"option"}}]],"paths":[[3,"Bytes"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PrimitiveVisitor"],[3,"String"],[4,"Option"],[3,"BinaryHeapVisitor"],[3,"BinaryHeap"],[3,"BTreeSetVisitor"],[3,"BTreeSet"],[3,"LinkedListVisitor"],[3,"LinkedList"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"Vec"],[3,"VecDequeVisitor"],[3,"VecDeque"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"BTreeMap"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"PathBuf"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Cow"],[4,"Result"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"MapDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex['num'] = {"items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",15,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['rustc_serialize'] = {"items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['itertools'] = {"items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",2,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",2,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",2,null],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"interleave"}],"output":{"name":"interleave"}}],[11,"new","","Creat a new `Interleave` iterator.",3,{"inputs":[{"name":"interleave"},{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",3,{"inputs":[{"name":"interleave"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"interleaveshortest"}}],[11,"new","","Create a new `InterleaveShortest` iterator.",4,{"inputs":[{"name":"interleaveshortest"},{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",4,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"putback"}],"output":{"name":"putback"}}],[11,"new","","Iterator element type is `A`",5,{"inputs":[{"name":"putback"},{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Put back a single value to the front of the iterator.",5,{"inputs":[{"name":"putback"},{"name":"item"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"putback"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"new","","Iterator element type is `A`",6,{"inputs":[{"name":"putbackn"},{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",6,{"inputs":[{"name":"putbackn"},{"name":"item"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"putbackn"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"putbackn"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"new","","Create a new cartesian product iterator",7,{"inputs":[{"name":"product"},{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",7,{"inputs":[{"name":"product"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"batching"}],"output":{"name":"batching"}}],[11,"new","","Create a new Batching iterator.",8,{"inputs":[{"name":"batching"},{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",8,{"inputs":[{"name":"batching"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"groupby"}],"output":{"name":"groupby"}}],[11,"new","","Create a new `GroupBy` iterator.",9,{"inputs":[{"name":"groupby"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",9,{"inputs":[{"name":"groupby"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"new","","Create a `Step` iterator.",10,{"inputs":[{"name":"step"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",10,{"inputs":[{"name":"step"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"merge"}],"output":{"name":"self"}}],[11,"next","","",11,{"inputs":[{"name":"merge"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"mergeby"}],"output":{"name":"self"}}],[11,"next","","",12,{"inputs":[{"name":"mergeby"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"multipeek"}],"output":{"name":"multipeek"}}],[11,"new","","Create a `MultiPeek` iterator.",13,{"inputs":[{"name":"multipeek"},{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn't\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",13,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"coalesce"}],"output":{"name":"self"}}],[11,"new","","Create a new `Coalesce`.",14,{"inputs":[{"name":"coalesce"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",14,{"inputs":[{"name":"coalesce"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"dedup"}],"output":{"name":"self"}}],[11,"new","","Create a new `Dedup`.",15,{"inputs":[{"name":"dedup"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",15,{"inputs":[{"name":"dedup"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"mendslices"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",16,{"inputs":[{"name":"mendslices"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"mendslices"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",17,{"inputs":[{"name":"takewhileref"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"takewhileref"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"whilesome"}],"output":{"name":"whilesome"}}],[11,"new","","Create a new `WhileSome<I>`.",18,{"inputs":[{"name":"whilesome"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",18,{"inputs":[{"name":"whilesome"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"combinations"}],"output":{"name":"combinations"}}],[11,"new","","Create a new `Combinations` from a clonable iterator.",19,{"inputs":[{"name":"combinations"},{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",19,{"inputs":[{"name":"combinations"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"uniqueby"}],"output":{"name":"uniqueby"}}],[11,"new","","Create a new `UniqueBy` iterator.",20,{"inputs":[{"name":"uniqueby"},{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",20,{"inputs":[{"name":"uniqueby"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next","","",21,{"inputs":[{"name":"unique"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"unique"}],"output":{"name":"unique"}}],[11,"new","","Create a new `Flatten` iterator.",22,{"inputs":[{"name":"flatten"},{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",22,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"flatten"}],"output":{"name":"self"}}],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"fmt","itertools","",23,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"groups"}],"output":{"name":"option"}}],[11,"drop","","",25,{"inputs":[{"name":"group"}],"output":null}],[11,"next","","",25,{"inputs":[{"name":"group"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"drop","","",27,{"inputs":[{"name":"chunk"}],"output":null}],[11,"next","","",27,{"inputs":[{"name":"chunk"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"intersperse"}],"output":{"name":"intersperse"}}],[11,"new","","Create a new Intersperse iterator",28,{"inputs":[{"name":"intersperse"},{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",28,{"inputs":[{"name":"intersperse"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"clone","","",29,{"inputs":[{"name":"islice"}],"output":{"name":"islice"}}],[11,"new","","Create a new **ISlice**.",29,{"inputs":[{"name":"islice"},{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"islice"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next","","",30,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",31,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",31,{"inputs":[{"name":"intoiteratortuple"}],"output":{"name":"output"}}],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w => (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",32,null],[10,"append","","“Append” value `x` to a tuple.",32,{"inputs":[{"name":"appendtuple"},{"name":"x"}],"output":{"name":"result"}}],[8,"GenericRange","","`GenericRange` is implemented by Rust's built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&[T]` and `&mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice's elements",33,null],[11,"clone","","",34,{"inputs":[{"name":"flattuples"}],"output":{"name":"flattuples"}}],[11,"next","","",34,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next_back","","",34,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"start","core::ops","",35,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",36,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",37,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",37,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","itertools","",38,{"inputs":[{"name":"padusing"}],"output":{"name":"padusing"}}],[11,"new","","Create a new **PadUsing** iterator.",38,{"inputs":[{"name":"padusing"},{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",38,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"rciter"},{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"rciter"}}],[11,"next","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"new","","Create a new **RepeatN** with **n** repetitions.",39,{"inputs":[{"name":"repeatn"},{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",39,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"new","","Create a new `RepeatCall` from a closure.",40,{"inputs":[{"name":"repeatcall"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",40,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",41,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",42,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",41,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",41,{"inputs":[{"name":"stride"},{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",41,{"inputs":[{"name":"stride"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",41,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"next","","",41,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",41,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",41,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",41,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",41,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",42,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",42,{"inputs":[{"name":"stridemut"},{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",42,{"inputs":[{"name":"stridemut"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",42,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"next","","",42,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",42,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",42,{"inputs":[{"name":"stridemut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",42,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",42,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"clone","","",41,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",42,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"next","","",43,{"inputs":[{"name":"tee"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"clone","","",44,{"inputs":[{"name":"ziplongest"}],"output":{"name":"ziplongest"}}],[11,"new","","Create a new `ZipLongest` iterator.",44,{"inputs":[{"name":"ziplongest"},{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",44,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"eitherorboth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"eitherorboth"}],"output":{"name":"eitherorboth"}}],[11,"clone","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"new","","Create a new `Zip` from a tuple of iterators.",45,{"inputs":[{"name":"zip"},{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",45,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"clone","","",46,{"inputs":[{"name":"zipslices"}],"output":{"name":"zipslices"}}],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",46,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",46,{"inputs":[{"name":"zipslices"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",46,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"len","","",46,{"inputs":[{"name":"zipslices"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",46,{"inputs":[{"name":"zipslices"},{"name":"usize"}],"output":{"name":"item"}}],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",47,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",47,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",47,{"inputs":[{"name":"itertools"},{"name":"item"}],"output":{"name":"intersperse"}}],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",47,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",47,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",47,null],[11,"slice","","Return a sliced iterator.",47,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",47,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",47,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",47,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",47,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements. For each pair the closure\nis passed the latest two elements, `x`, `y` and may return either `Ok(z)`\nto merge the two values or `Err((x, y))` to indicate they can't be merged.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",47,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",47,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",47,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",47,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",47,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",47,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",47,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",47,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",47,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",47,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",47,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it's possible to tell.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",47,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",47,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"EitherOrBoth"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex['mio'] = {"items":[[11,"new","std::net::ip","Creates a new IPv4 address from four eight-bit octets.",0,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",0,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"from","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",2,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",3,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",5,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",7,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","","Returns true if the boxed type is the same as `T`",8,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",9,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",10,null],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",10,null],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",10,null],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",10,null],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",10,null],[11,"rem","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",10,null],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",10,null],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",10,null],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",10,null],[11,"clone","std::thread::local","",11,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",11,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",12,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",12,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",13,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",13,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",14,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",14,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",15,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",15,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",15,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",16,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",16,null],[11,"get","","",16,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",17,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",17,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",17,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",17,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",18,null],[11,"name","","Gets the thread's name.",18,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",19,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",19,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",20,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",21,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",22,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",22,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",22,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",23,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",23,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",23,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",24,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",24,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",21,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",21,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",21,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",21,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",21,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",21,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",21,null],[11,"next","","",24,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",24,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",24,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",24,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",23,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",23,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",23,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",23,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",23,null],[11,"take","","Removes this bucket's key and value from the hashtable.",23,null],[11,"replace","","",23,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",23,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",23,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",23,null],[11,"expect_full","","",25,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",26,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",26,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",27,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",27,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",27,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",27,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",27,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",27,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",27,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",28,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",28,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",30,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"len","","",30,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",31,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"len","","",31,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",32,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"len","","",32,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",33,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"len","","",33,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",33,null],[11,"clone","","",27,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",27,null],[11,"clone","std::collections::hash::map","",34,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",35,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",35,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",35,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",35,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",35,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",35,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",35,null],[11,"get","","Returns a reference to the value corresponding to the key.",35,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",35,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",35,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",35,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",35,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",35,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",35,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",37,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",38,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",35,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"len","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",39,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",37,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"len","","",37,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",41,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"len","","",41,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",42,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",42,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",43,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",44,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",35,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",35,null],[11,"extend","","",35,null],[11,"clone","","",45,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",45,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",45,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",45,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",35,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",35,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",35,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",46,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",46,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",46,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",46,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",46,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",46,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",46,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",46,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",46,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",46,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",46,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",46,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",46,null],[11,"contains","","Returns `true` if the set contains a value.",46,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",46,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",46,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",46,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",46,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",46,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",46,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",46,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"default","","",46,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",46,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"len","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",48,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"len","","",48,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",49,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"len","","",49,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",50,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",50,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",51,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",52,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",53,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"hasher","std::collections::hash::state","",54,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",54,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",54,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",55,null],[11,"default","","",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",55,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",55,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",55,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",55,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",55,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",55,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",55,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",55,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",55,null],[11,"drop","","",56,null],[11,"clone","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",59,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",55,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",60,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",55,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",55,null],[11,"extend","","",55,null],[11,"clone","collections::linked_list","",61,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",63,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",63,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",64,null],[11,"iter","","Provides a forward iterator.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",64,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",64,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",64,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",64,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",64,null],[11,"next","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",65,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",64,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",64,null],[11,"extend","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",64,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",64,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",64,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"clone","collections::vec_deque","",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",66,null],[11,"default","","",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",66,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",66,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",66,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",66,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",66,null],[11,"iter","","Returns a front-to-back iterator.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",66,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",66,null],[11,"len","","Returns the number of elements in the `VecDeque`.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",66,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",66,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",66,null],[11,"push_back","","Appends an element to the back of a buffer",66,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",66,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",66,null],[11,"retain","","Retains only the elements specified by the predicate.",66,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",66,null],[11,"clone","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",70,null],[11,"next","","",70,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",66,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",66,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",66,null],[11,"index","","",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",66,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",66,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",66,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",66,null],[11,"extend","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",71,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",71,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",71,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",71,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",71,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",71,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",71,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",72,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next","","",73,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",74,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",74,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",75,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"fmt","","",76,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",76,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",77,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"len","","",77,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",78,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"len","","",78,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",79,null],[11,"cmp","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"fmt","","",81,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",82,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",79,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",79,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",79,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",79,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",79,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",79,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",79,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",79,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",79,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",80,null],[11,"as_ptr","","Returns the inner pointer to this C string.",80,null],[11,"to_bytes","","Converts this C string to a byte slice.",80,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",80,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",80,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",80,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",79,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",60,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",80,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",81,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",81,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",83,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",82,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",82,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",80,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",80,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",79,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",79,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",80,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",79,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",84,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",84,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",84,null],[11,"from","","",84,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",84,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",84,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",85,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",85,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",84,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"eq","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",85,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",85,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",85,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",86,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",88,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",89,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",91,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",91,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",91,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",91,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",91,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",91,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",91,null],[11,"read_to_end","","",91,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",91,null],[11,"flush","","",91,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",91,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",88,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",88,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",88,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",88,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",88,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",88,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",88,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",87,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",87,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",87,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",87,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",87,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",89,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",89,null],[11,"is_dir","","Test whether this file type represents a directory.",90,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",90,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",90,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",92,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",93,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",93,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",93,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",93,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",94,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",95,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",95,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",95,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",96,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",96,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",96,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",96,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",96,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",96,null],[11,"fill_buf","","",96,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",96,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",98,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",98,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",98,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",98,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",98,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",98,null],[11,"flush","","",98,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",98,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",98,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",97,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",97,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",83,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",97,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",97,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",99,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",99,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",99,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",99,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",99,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",100,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",100,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",100,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",100,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",100,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",100,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",100,null],[11,"seek","","",100,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",100,null],[11,"fill_buf","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",100,null],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",83,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",102,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",83,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",83,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",83,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",83,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",103,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",83,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",83,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",1,null],[11,"read_to_end","","",1,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",1,null],[11,"write_fmt","","",1,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",1,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",1,null],[11,"read_until","","",1,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",60,null],[11,"write_all","","",60,null],[11,"flush","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",104,null],[11,"get","","",104,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",105,null],[11,"fill_buf","","",105,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",105,null],[11,"read","","",106,null],[11,"write","","",107,null],[11,"flush","","",107,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",108,null],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",111,null],[11,"flush","","",111,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",111,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",112,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",112,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",112,null],[11,"read_to_end","","",112,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",112,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",112,null],[11,"read","","",113,null],[11,"read_to_end","","",113,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",113,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",113,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",114,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",114,null],[11,"write_fmt","","",114,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",116,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",116,null],[11,"flush","","",116,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",116,null],[11,"write_fmt","","",116,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",118,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",118,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",120,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",121,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",121,null],[11,"fill_buf","","",121,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",121,null],[11,"read","","",122,null],[11,"next","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",124,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",125,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",124,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",124,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",124,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",127,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",128,null],[11,"fmt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",129,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"clone","","",129,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",129,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",130,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",130,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",130,null],[11,"partial_cmp","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",131,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",131,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",132,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",133,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",131,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"hash","","",133,null],[11,"to_socket_addrs","","",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",134,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",134,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",134,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",134,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",134,null],[11,"read_to_end","","",134,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",134,null],[11,"flush","","",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",135,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",136,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",135,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",137,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",137,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",137,null],[11,"local_addr","","Returns the socket address that this socket was created from.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",137,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",137,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",128,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",131,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",138,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",138,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",138,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",139,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",140,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::macos::raw","",141,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",91,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",91,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",91,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",134,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",135,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",137,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",84,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",85,null],[11,"as_bytes","","",85,null],[11,"mode","std::fs","",89,{"inputs":[{"name":"permissions"}],"output":{"name":"u16"}}],[11,"set_mode","","",89,null],[11,"from_mode","","",89,{"inputs":[{"name":"permissions"},{"name":"u16"}],"output":{"name":"permissions"}}],[11,"mode","","",88,{"inputs":[{"name":"openoptions"},{"name":"u16"}],"output":{"name":"openoptions"}}],[11,"dev","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"ino","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"nlink","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"uid","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"size","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"blocks","","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",90,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",90,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",90,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",90,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",93,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",95,{"inputs":[{"name":"dirbuilder"},{"name":"u16"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",142,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",142,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",142,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",144,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",146,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",147,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",146,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",147,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",19,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"into_pthread_t","","",19,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",148,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",148,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",148,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"fmt","","",149,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",149,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",151,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",151,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",151,null],[11,"fmt","","",152,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"cmp","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",152,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",152,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",153,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",153,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",153,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",153,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",153,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",154,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",153,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",153,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",153,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",155,null],[11,"pop","","Truncate `self` to `self.parent()`.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",155,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",155,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",155,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",155,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",155,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",155,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",156,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",156,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",156,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",156,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",156,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",156,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",156,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",156,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",156,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",157,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",156,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",155,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"partial_cmp","","",155,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",155,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",156,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",156,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"partial_cmp","","",156,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",156,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",156,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",85,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",84,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",86,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",155,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",155,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",156,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",155,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",158,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",145,null],[11,"flush","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",146,null],[11,"read","","",147,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",142,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",142,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",142,null],[11,"env","","Inserts or updates an environment variable mapping.",142,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",142,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",142,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",142,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",142,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",160,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",143,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",143,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",143,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",161,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",162,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",163,null],[11,"new","std::sync::mpsc::oneshot","",164,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",164,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",164,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",164,null],[11,"drop_port","","",164,null],[11,"can_recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",164,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",164,null],[11,"eq","std::sync::mpsc::select","",165,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",166,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",166,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",166,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",167,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",167,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",167,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",167,null],[11,"drop","","",166,null],[11,"drop","","",167,null],[11,"next","","",168,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",169,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",169,null],[11,"send","","",169,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",169,null],[11,"drop_chan","","",169,null],[11,"drop_port","","",169,null],[11,"can_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",169,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",169,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",169,null],[11,"new","std::sync::mpsc::stream","",170,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",170,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",170,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",170,null],[11,"drop_port","","",170,null],[11,"can_recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",170,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",170,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",170,null],[11,"fmt","std::sync::mpsc::sync","",171,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",172,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",172,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",172,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",172,null],[11,"drop_chan","","",172,null],[11,"drop_port","","",172,null],[11,"can_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",172,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",172,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",173,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",173,null],[11,"pop","","Pops some data from this queue.",173,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",173,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",174,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",174,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",174,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",174,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",174,null],[11,"clone","std::sync::mpsc","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",175,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",176,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",178,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",179,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",179,null],[11,"send","","Sends a value on this synchronous channel.",180,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",180,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",180,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",181,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",181,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",181,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",182,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",183,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",181,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",181,null],[11,"fmt","","",175,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",178,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",184,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",184,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",185,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",186,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",186,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",187,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",187,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",187,null],[11,"drop","","",187,null],[11,"new","","Creates a new condition variable",188,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",188,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",188,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",188,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",189,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",189,null],[11,"fmt","","",189,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",190,null],[11,"deref","","",191,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",191,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",191,null],[11,"new","std::sync::once","Creates a new `Once` value.",192,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",192,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",193,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",194,null],[11,"deref","","",195,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",196,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",196,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",195,null],[11,"drop","","",196,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",197,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",197,null],[11,"release","","Release a resource from this semaphore.",197,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",197,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",198,null],[11,"default","core::sync::atomic","",199,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",200,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",201,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",202,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",203,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",199,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",199,null],[11,"swap","","Stores a value into the bool, returning the old value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",200,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",200,null],[11,"swap","","Stores a value into the isize, returning the old value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",201,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",201,null],[11,"swap","","Stores a value into the usize, returning the old value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",202,null],[11,"load","","Loads a value from the pointer.",202,null],[11,"store","","Stores a value into the pointer.",202,null],[11,"swap","","Stores a value into the pointer, returning the old value.",202,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",202,null],[11,"fmt","","",201,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",204,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",204,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",204,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",204,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",204,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",204,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",204,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",204,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",207,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",205,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",205,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",205,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",205,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",205,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",206,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",206,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",206,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",207,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",208,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",208,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",208,null],[11,"wait","","Waits for a signal on the specified mutex.",208,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",208,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",208,null],[11,"clone","std::sys_common::dwarf::eh","",209,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",210,null],[11,"read","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",211,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",212,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",213,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",213,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",213,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",213,null],[11,"destroy","","Deallocates all resources associated with this mutex.",213,null],[11,"next","std::sys_common::net","",214,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",214,null],[11,"connect","","",215,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",215,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",215,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",215,null],[11,"write","","",215,null],[11,"peer_addr","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",215,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",216,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",217,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",217,null],[11,"send_to","","",217,null],[11,"duplicate","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",217,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",217,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",218,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",218,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",218,null],[11,"get","","",218,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",219,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",219,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",220,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",220,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",220,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",220,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",221,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",221,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",221,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",221,null],[11,"fmt","","",221,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",222,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",222,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",223,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",223,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",223,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",223,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",223,null],[11,"new","std::sys_common::thread_local","",224,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",224,null],[11,"set","","Sets this TLS key to a new value.",224,null],[11,"destroy","","Deallocates this OS TLS key.",224,null],[11,"new","","Creates a new managed OS TLS key.",225,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",225,null],[11,"set","","See StaticKey::set",225,null],[11,"drop","","",225,null],[11,"clone","std::sys_common::wtf8","",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",226,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",226,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",226,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",226,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",228,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",228,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",227,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",227,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",227,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",227,null],[11,"as_slice","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",227,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",227,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",227,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",227,null],[11,"push","","Append a code point at the end of the string.",227,null],[11,"truncate","","Shortens a string to the specified length.",227,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",227,null],[11,"partial_cmp","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",228,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",229,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",229,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","","",230,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",230,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"hash","","",226,null],[11,"hash","","",227,null],[11,"hash","","",228,null],[11,"is_ascii","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",228,null],[11,"make_ascii_lowercase","","",228,null],[11,"new","std::sys::condvar","",231,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",231,null],[11,"notify_all","","",231,null],[11,"wait","","",231,null],[11,"wait_timeout","","",231,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",231,null],[11,"new","std::sys::fd","",232,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",232,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",232,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",232,null],[11,"write","","",232,null],[11,"set_cloexec","","",232,null],[11,"drop","","",232,null],[11,"clone","std::sys::fs","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",234,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",235,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",235,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",235,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",236,null],[11,"eq","","",236,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",87,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",235,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",235,null],[11,"mode","","",235,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u16"}}],[11,"is_dir","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",236,{"inputs":[{"name":"filetype"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"next","","",237,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",238,null],[11,"path","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",234,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",234,null],[11,"write","","",234,null],[11,"append","","",234,null],[11,"truncate","","",234,null],[11,"create","","",234,null],[11,"mode","","",234,null],[11,"open","","",240,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",240,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",240,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",240,null],[11,"write","","",240,null],[11,"flush","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",240,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",240,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",240,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",241,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",241,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",241,null],[11,"fmt","","",240,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",242,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",242,null],[11,"unlock","","",242,null],[11,"try_lock","","",242,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",242,null],[11,"uninitialized","","",243,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",243,null],[11,"lock","","",243,null],[11,"try_lock","","",243,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",243,null],[11,"destroy","","",243,null],[11,"new","std::sys::net","",244,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",244,null],[11,"duplicate","","",244,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",244,null],[11,"set_timeout","","",244,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",244,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",244,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",245,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",246,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",247,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",248,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",249,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",250,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",251,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",252,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",253,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",254,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",255,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",256,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::bsd","",257,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",258,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",259,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",260,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",261,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",262,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",263,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",264,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",265,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",266,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",267,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",268,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",269,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",270,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",271,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",272,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",273,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",274,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",275,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",276,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",277,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",278,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",279,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",280,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",281,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",282,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",283,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",284,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",285,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",286,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",287,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",288,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",289,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",290,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","libc::unix::bsd::apple::b64","",291,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"next","std::sys::os","",292,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"fmt","","",293,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",293,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",294,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",294,null],[11,"len","","",294,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",295,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",295,null],[11,"hash","std::sys::os_str","",296,null],[11,"clone","","",296,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",297,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",296,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",296,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",296,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",296,null],[11,"from_str","","",297,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",297,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",297,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",297,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",298,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",298,null],[11,"write","","",298,null],[11,"raw","","",298,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",298,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",298,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",299,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",299,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",299,null],[11,"args","","",299,null],[11,"env","","",299,null],[11,"env_remove","","",299,null],[11,"env_clear","","",299,null],[11,"cwd","","",299,null],[11,"fmt","","",300,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",300,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",300,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",301,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",301,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",301,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",301,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",301,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",302,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",302,null],[11,"try_read","","",302,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",302,null],[11,"try_write","","",302,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",302,null],[11,"write_unlock","","",302,null],[11,"destroy","","",302,null],[11,"new","std::sys::stack_overflow","",303,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",303,null],[11,"new","std::sys::thread","",304,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",304,null],[11,"set_name","","",304,null],[11,"sleep","","",304,null],[11,"join","","",304,null],[11,"id","","",304,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"into_id","","",304,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"drop","","",304,null],[11,"fmt","std::sys::time::inner","",305,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",305,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"clone","","",306,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",305,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",305,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",305,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"now","","",306,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",306,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",306,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"eq","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"cmp","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",306,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",307,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",307,null],[11,"new","","",308,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",308,null],[11,"new","","",309,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",309,null],[11,"write","","",309,null],[11,"flush","","",309,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",310,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",311,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",311,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",312,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",312,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",313,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",313,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",314,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",314,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",314,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",314,null],[11,"clone","std::rand","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",315,null],[11,"from_seed","","",315,null],[11,"reseed","","",316,null],[11,"clone","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",317,null],[11,"fmt","","",318,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",318,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",318,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",319,null],[11,"fmt","","",319,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",319,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",319,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",319,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",320,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",320,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",320,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",320,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",320,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",320,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",320,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",321,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",321,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",321,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",321,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",322,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",322,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",322,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",322,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",322,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",323,null],[11,"clone","","",323,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",324,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",324,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",324,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",324,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",325,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",325,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",326,null],[11,"deref","","",325,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",325,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",327,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",327,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",327,null],[11,"fmt","core::cmp","",328,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",328,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",328,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",329,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",329,null],[11,"finish","","",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"clone","core::iter","",330,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",330,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",330,null],[11,"next_back","","",330,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",331,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",331,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",331,null],[11,"next_back","","",331,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",332,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",332,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"clone","","",333,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",334,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",333,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",333,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",333,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",333,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"next_back","","",333,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",335,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",335,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"next_back","","",335,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",336,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",336,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"next_back","","",336,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",337,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",337,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",337,null],[11,"next_back","","",337,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",338,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",338,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",338,null],[11,"next_back","","",338,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",339,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",339,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"nth","","",339,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",339,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",339,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",340,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",340,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",340,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",340,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",340,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",340,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",340,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",341,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",341,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"clone","","",342,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",342,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"clone","","",343,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",343,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",343,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",343,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",343,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"clone","","",344,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",344,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",344,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"clone","","",345,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",345,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"clone","","",346,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",346,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"next_back","","",346,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",347,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",347,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",347,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",347,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",347,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",347,null],[11,"next_back","","",347,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",348,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",348,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"next_back","","",348,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",349,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",350,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",351,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",349,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"clone","","",352,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",352,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",349,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"next","core::ops","",351,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"next_back","","",351,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",350,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",353,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",353,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next_back","","",353,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",354,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"next_back","","",354,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",354,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",354,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",354,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",355,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",355,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"next_back","","",355,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",355,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",356,null],[11,"eq","","",356,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",356,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",356,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",356,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",356,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",357,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",357,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",357,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",357,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",351,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",351,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",351,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",351,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",350,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",350,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",350,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",350,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",358,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",358,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",358,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",359,null],[11,"get","","Dereferences the content.",359,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",359,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",359,null],[11,"fmt","","",359,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",360,null],[11,"clone","","",360,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",360,null],[11,"fmt","","",360,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",361,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",362,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",363,null],[11,"fmt","","",363,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",363,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",363,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",363,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",363,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",363,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",363,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",363,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",363,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",363,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",363,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",363,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",363,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",363,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",363,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",363,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",363,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",363,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",363,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",363,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",363,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",364,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",364,null],[11,"next_back","","",364,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",364,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",365,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",365,null],[11,"next_back","","",365,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",366,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"next_back","","",366,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",363,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",367,null],[11,"fmt","","",367,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",367,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",367,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",367,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",367,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",367,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",367,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",367,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",367,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",367,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",367,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",367,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",367,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",367,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",367,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",367,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",367,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",367,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",367,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",367,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",367,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",367,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",367,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",367,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",367,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",368,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",368,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",369,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",369,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",370,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",371,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",371,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next_back","","",371,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",367,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",372,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",373,null],[11,"make_place","","",373,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",373,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",1,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",372,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",373,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",1,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",1,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",1,null],[11,"default","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",1,null],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",1,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",1,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",1,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",374,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",374,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",374,null],[11,"clone","","Makes a clone of the `Rc<T>`.",374,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",374,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",374,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",374,null],[11,"fmt","","",374,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",374,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",374,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",374,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",375,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",375,null],[11,"clone","","Makes a clone of the `Weak<T>`.",375,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",375,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",375,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",374,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",374,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",157,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",157,null],[11,"into_owned","","Extracts the owned data.",157,null],[11,"deref","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",157,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"into_cow","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",376,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",377,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",378,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",378,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",378,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",379,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",380,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",60,null],[11,"borrow_mut","","",60,null],[11,"clone","collections::str","",381,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",381,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",381,null],[11,"borrow","collections::string","",86,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",382,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",382,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",382,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",382,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",383,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",384,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",383,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",383,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",383,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",385,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",386,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",387,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",388,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",388,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",389,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",389,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",390,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",390,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",388,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",388,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",388,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",388,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",388,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",391,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",391,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",392,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",392,null],[11,"matching","","",392,null],[11,"use_early_reject","","",393,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",393,null],[11,"matching","","",393,null],[11,"cmp","collections::string","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",86,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",86,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",86,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",86,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",86,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",86,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",86,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",86,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",86,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",86,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",86,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",86,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",86,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",86,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",86,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",86,null],[11,"push","","Appends the given `char` to the end of this `String`.",86,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",86,null],[11,"truncate","","Shortens this `String` to the specified length.",86,null],[11,"pop","","Removes the last character from the string buffer and returns it.",86,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",86,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",86,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",86,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",86,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",86,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",86,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",86,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",86,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",86,null],[11,"from_iter","","",86,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",86,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",86,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",86,null],[11,"extend","","",86,null],[11,"extend","","",86,null],[11,"extend","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",86,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",86,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",86,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"add","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",86,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",86,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",86,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",86,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",86,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",86,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",86,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",86,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",86,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",86,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",394,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",394,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",394,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",86,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",86,null],[11,"from","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",157,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",86,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",86,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",86,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",86,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",395,null],[11,"next","","",395,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",395,null],[11,"next_back","","",395,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",60,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",60,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",60,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",60,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",60,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",60,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",60,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",60,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",60,null],[11,"as_slice","","Extracts a slice containing the entire vector.",60,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",60,null],[11,"set_len","","Sets the length of a vector.",60,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",60,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",60,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",60,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",60,null],[11,"push","","Appends an element to the back of a collection.",60,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",60,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",60,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",60,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",60,null],[11,"len","","Returns the number of elements in the vector.",60,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",60,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",60,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",60,null],[11,"push_all","","",60,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",60,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",60,null],[11,"clone","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",60,null],[11,"hash","","",60,null],[11,"index","","",60,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",60,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",60,null],[11,"index","","",60,null],[11,"index","","",60,null],[11,"index","","",60,null],[11,"index_mut","","",60,null],[11,"index_mut","","",60,null],[11,"index_mut","","",60,null],[11,"index_mut","","",60,null],[11,"deref","","",60,null],[11,"deref_mut","","",60,null],[11,"from_iter","","",60,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",60,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",60,null],[11,"extend","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","collections::borrow","",157,null],[11,"ne","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"partial_cmp","","",60,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",60,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",60,null],[11,"default","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",60,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",60,null],[11,"as_mut","","",60,null],[11,"from","","",60,null],[11,"from","","",60,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",60,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",396,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",396,null],[11,"count","","",396,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",396,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",396,null],[11,"next","","",397,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",397,null],[11,"next_back","","",397,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",397,null],[11,"next","rustc_unicode::char","",398,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",399,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",400,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",401,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",401,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",401,null],[3,"Ipv4Addr","mio","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",402,null],[12,"token","","",402,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",403,null],[13,"V6","","",403,null],[4,"NotifyError","","",null,null],[13,"Io","","",404,null],[13,"Full","","",404,null],[13,"Closed","","",404,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",405,{"inputs":[{"name":"boundedqueue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",405,{"inputs":[{"name":"boundedqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",405,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"option"}}],[11,"clone","","",405,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"queue"}}],[6,"Slab","","",null,null],[11,"cmp","mio","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"eq","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"edge","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"empty","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"level","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"oneshot","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"all","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"is_edge","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_level","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"bits","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"usize"}}],[11,"contains","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"remove","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",406,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",406,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",406,{"inputs":[{"name":"pollopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"option"}}],[11,"lt","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"eq","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"none","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"readable","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"writable","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"error","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"hup","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"all","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"is_readable","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_writable","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_error","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_hup","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"insert","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"remove","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"bits","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"usize"}}],[11,"contains","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",407,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",407,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"fmt","","",407,{"inputs":[{"name":"eventset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",402,{"inputs":[{"name":"ioevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",402,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"ne","","",402,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"clone","","",402,{"inputs":[{"name":"ioevent"}],"output":{"name":"ioevent"}}],[11,"new","","Create a new IoEvent.",402,{"inputs":[{"name":"ioevent"},{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"fmt","","",408,{"inputs":[{"name":"eventloopconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",408,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"new","","Creates a new configuration for the event loop with all default options\nspecified.",408,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event\nloop's notification channel before a send will fail.",408,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of\nthe event loop.",408,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_tick_ms","","",408,{"inputs":[{"name":"eventloopconfig"},{"name":"u64"}],"output":{"name":"self"}}],[11,"timer_wheel_size","","",408,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_capacity","","",408,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",408,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",409,{"inputs":[{"name":"eventloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",409,{"inputs":[{"name":"eventloop"}],"output":{"name":"result"}}],[11,"configured","","",409,{"inputs":[{"name":"eventloop"},{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",409,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",409,{"inputs":[{"name":"eventloop"},{"name":"timeout"},{"name":"u64"}],"output":{"name":"timerresult"}}],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",409,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",409,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either\nstopped or is scheduled to stop on the next tick.",409,{"inputs":[{"name":"eventloop"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",409,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",409,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",409,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",409,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",409,{"inputs":[{"name":"eventloop"},{"name":"h"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",409,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"clone","","",410,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",410,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",410,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"read_to_end","mio::io","Read all bytes until EOF in this source, placing them into `buf`.",411,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",411,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",411,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",411,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",411,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",411,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",411,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",411,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",411,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",412,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",412,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",412,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",412,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[11,"from_str","mio","",403,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",404,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",404,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",404,{"inputs":[{"name":"notifyerror"}],"output":{"name":"str"}}],[11,"cause","","",404,{"inputs":[{"name":"notifyerror"}],"output":{"name":"option"}}],[11,"new","","",413,{"inputs":[{"name":"poll"}],"output":{"name":"result"}}],[11,"register","","",413,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",413,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",413,{"inputs":[{"name":"poll"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",413,{"inputs":[{"name":"poll"},{"name":"option"}],"output":{"name":"result"}}],[11,"event","","",413,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"events","","",413,{"inputs":[{"name":"poll"}],"output":{"name":"events"}}],[11,"fmt","","",413,{"inputs":[{"name":"poll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",414,{"inputs":[{"name":"events"}],"output":{"name":"option"}}],[11,"fmt","","",415,{"inputs":[{"name":"selector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",415,{"inputs":[{"name":"selector"}],"output":{"name":"result"}}],[11,"id","","",415,{"inputs":[{"name":"selector"}],"output":{"name":"usize"}}],[11,"select","","",415,{"inputs":[{"name":"selector"},{"name":"events"},{"name":"option"}],"output":{"name":"result"}}],[11,"register","","",415,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",415,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",415,{"inputs":[{"name":"selector"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",416,{"inputs":[{"name":"io"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",416,{"inputs":[{"name":"io"},{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from","","",416,{"inputs":[{"name":"io"},{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",416,{"inputs":[{"name":"io"},{"name":"rawfd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",416,{"inputs":[{"name":"io"}],"output":{"name":"rawfd"}}],[11,"register","","",416,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",416,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",416,{"inputs":[{"name":"io"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",416,null],[11,"write","","",416,null],[11,"flush","","",416,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[11,"drop","","",416,{"inputs":[{"name":"io"}],"output":null}],[11,"clone","libc::types::os::common::posix01","",417,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",418,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",419,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",420,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","libc::types::os::common::bsd43","",421,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","libc::types::os::common::bsd44","",422,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",423,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",424,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",425,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",426,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",427,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",428,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",429,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",430,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",431,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",432,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","libc::types::os::arch::posix01","",433,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",434,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",435,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::types::os::arch::extra","",436,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"from_errno","nix","",437,{"inputs":[{"name":"error"},{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",437,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"invalid_argument","","",437,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"errno","","",437,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"eq","nix::errno::consts","",438,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",438,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",438,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",438,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",438,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",438,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",438,{"inputs":[{"name":"errno"},{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",438,null],[11,"fmt","nix::fcntl::ffi::os","",439,{"inputs":[{"name":"flock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",439,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",439,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","nix::fcntl::consts","",440,null],[11,"cmp","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",440,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",440,{"inputs":[{"name":"oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",440,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",440,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",440,{"inputs":[{"name":"oflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",440,{"inputs":[{"name":"oflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",440,{"inputs":[{"name":"oflag"},{"name":"i32"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",440,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",440,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",440,null],[11,"remove","","Removes the specified flags in-place.",440,null],[11,"toggle","","Toggles the specified flags in-place.",440,null],[11,"bitor","","Returns the union of the two sets of flags.",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",440,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",440,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"from_iter","","",440,{"inputs":[{"name":"oflag"},{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",441,null],[11,"cmp","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",441,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",441,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",441,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",441,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",441,{"inputs":[{"name":"fdflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",441,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",441,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",441,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",441,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",441,null],[11,"remove","","Removes the specified flags in-place.",441,null],[11,"toggle","","Toggles the specified flags in-place.",441,null],[11,"bitor","","Returns the union of the two sets of flags.",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",441,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",441,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",441,{"inputs":[{"name":"fdflag"},{"name":"t"}],"output":{"name":"fdflag"}}],[11,"clone","nix::sys::event::ffi","",442,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"eq","nix::sys::event","",443,{"inputs":[{"name":"eventfilter"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"ne","","",443,{"inputs":[{"name":"eventfilter"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"fmt","","",443,{"inputs":[{"name":"eventfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",443,{"inputs":[{"name":"eventfilter"}],"output":{"name":"eventfilter"}}],[11,"hash","","",444,null],[11,"cmp","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"option"}}],[11,"lt","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"le","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"gt","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ge","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"clone","","",444,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"eq","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ne","","",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"fmt","","",444,{"inputs":[{"name":"eventflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",444,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"all","","Returns the set containing all flags.",444,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",444,{"inputs":[{"name":"eventflag"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",444,{"inputs":[{"name":"eventflag"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",444,{"inputs":[{"name":"eventflag"},{"name":"u16"}],"output":{"name":"eventflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",444,{"inputs":[{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",444,{"inputs":[{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",444,null],[11,"remove","","Removes the specified flags in-place.",444,null],[11,"toggle","","Toggles the specified flags in-place.",444,null],[11,"bitor","","Returns the union of the two sets of flags.",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",444,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"not","","Returns the complement of this set of flags.",444,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"from_iter","","",444,{"inputs":[{"name":"eventflag"},{"name":"t"}],"output":{"name":"eventflag"}}],[11,"hash","","",445,null],[11,"cmp","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"option"}}],[11,"lt","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"le","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"gt","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ge","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"clone","","",445,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"eq","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ne","","",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"fmt","","",445,{"inputs":[{"name":"filterflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",445,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"all","","Returns the set containing all flags.",445,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",445,{"inputs":[{"name":"filterflag"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",445,{"inputs":[{"name":"filterflag"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",445,{"inputs":[{"name":"filterflag"},{"name":"u32"}],"output":{"name":"filterflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",445,{"inputs":[{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",445,{"inputs":[{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",445,null],[11,"remove","","Removes the specified flags in-place.",445,null],[11,"toggle","","Toggles the specified flags in-place.",445,null],[11,"bitor","","Returns the union of the two sets of flags.",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",445,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"not","","Returns the complement of this set of flags.",445,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"from_iter","","",445,{"inputs":[{"name":"filterflag"},{"name":"t"}],"output":{"name":"filterflag"}}],[11,"hash","nix::sys::signal::signal","",446,null],[11,"cmp","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",446,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",446,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",446,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",446,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",446,{"inputs":[{"name":"sockflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",446,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",446,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",446,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",446,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",446,null],[11,"remove","","Removes the specified flags in-place.",446,null],[11,"toggle","","Toggles the specified flags in-place.",446,null],[11,"bitor","","Returns the union of the two sets of flags.",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",446,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",446,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",446,{"inputs":[{"name":"sockflag"},{"name":"t"}],"output":{"name":"sockflag"}}],[11,"hash","","",447,null],[11,"cmp","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"option"}}],[11,"lt","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"le","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"gt","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ge","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"clone","","",447,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"eq","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ne","","",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"fmt","","",447,{"inputs":[{"name":"howflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",447,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"all","","Returns the set containing all flags.",447,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",447,{"inputs":[{"name":"howflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",447,{"inputs":[{"name":"howflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",447,{"inputs":[{"name":"howflag"},{"name":"i32"}],"output":{"name":"howflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",447,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",447,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",447,null],[11,"remove","","Removes the specified flags in-place.",447,null],[11,"toggle","","Toggles the specified flags in-place.",447,null],[11,"bitor","","Returns the union of the two sets of flags.",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",447,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"not","","Returns the complement of this set of flags.",447,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"from_iter","","",447,{"inputs":[{"name":"howflag"},{"name":"t"}],"output":{"name":"howflag"}}],[11,"clone","","",448,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[11,"clone","nix::sys::signal","",449,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"all","","",449,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"empty","","",449,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"add","","",449,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove","","",449,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"contains","","",449,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",449,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",449,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",449,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",449,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",449,{"inputs":[{"name":"sigset"},{"name":"howflag"}],"output":{"name":"result"}}],[11,"as_ref","","",449,{"inputs":[{"name":"sigset"}],"output":{"name":"u32"}}],[11,"new","","",450,null],[11,"hash","nix::sys::socket::addr","",451,null],[11,"fmt","","",451,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",451,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",451,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",451,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",452,{"inputs":[{"name":"inetaddr"},{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",452,{"inputs":[{"name":"inetaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",452,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",452,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",452,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",452,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",452,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",452,null],[11,"clone","","",452,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",452,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",453,{"inputs":[{"name":"ipaddr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",453,{"inputs":[{"name":"ipaddr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",453,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",454,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",454,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",454,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"octets","","",454,null],[11,"to_std","","",454,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",454,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",454,null],[11,"clone","","",454,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",454,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",455,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",455,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",455,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",455,null],[11,"to_std","","",455,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",455,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",456,{"inputs":[{"name":"unixaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n\"abstract namespace\". This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",456,null],[11,"path","","If this address represents a filesystem path, return that path.",456,{"inputs":[{"name":"unixaddr"}],"output":{"name":"option"}}],[11,"eq","","",456,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",456,null],[11,"clone","","",456,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",456,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",457,{"inputs":[{"name":"sockaddr"},{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",457,{"inputs":[{"name":"sockaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",457,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",457,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",457,null],[11,"eq","","",457,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",457,null],[11,"clone","","",457,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",457,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","nix::sys::socket::multicast","",458,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",458,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",458,{"inputs":[{"name":"ip_mreq"},{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",459,{"inputs":[{"name":"ipv6_mreq"},{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[11,"fmt","nix::sys::socket::sockopt","",460,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",460,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"set","","",460,{"inputs":[{"name":"reuseaddr"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",460,{"inputs":[{"name":"reuseaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",461,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",461,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"set","","",461,{"inputs":[{"name":"reuseport"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",461,{"inputs":[{"name":"reuseport"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",462,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",462,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"set","","",462,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",462,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",463,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",463,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"set","","",463,{"inputs":[{"name":"linger"},{"name":"i32"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",463,{"inputs":[{"name":"linger"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",464,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",464,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"set","","",464,{"inputs":[{"name":"ipaddmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",465,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",465,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"set","","",465,{"inputs":[{"name":"ipdropmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",466,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",466,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"set","","",466,{"inputs":[{"name":"ipv6addmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",467,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",467,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"set","","",467,{"inputs":[{"name":"ipv6dropmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",468,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",468,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"set","","",468,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",468,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",469,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",469,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"set","","",469,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",469,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",470,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",470,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"set","","",470,{"inputs":[{"name":"receivetimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",470,{"inputs":[{"name":"receivetimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",471,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",471,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"set","","",471,{"inputs":[{"name":"sendtimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",471,{"inputs":[{"name":"sendtimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",472,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",472,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"set","","",472,{"inputs":[{"name":"broadcast"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",472,{"inputs":[{"name":"broadcast"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",473,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",473,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"set","","",473,{"inputs":[{"name":"oobinline"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",473,{"inputs":[{"name":"oobinline"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",474,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",474,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"get","","",474,{"inputs":[{"name":"socketerror"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",475,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",475,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"set","","",475,{"inputs":[{"name":"keepalive"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",475,{"inputs":[{"name":"keepalive"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",476,{"inputs":[{"name":"tcpkeepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",476,{"inputs":[{"name":"tcpkeepalive"}],"output":{"name":"tcpkeepalive"}}],[11,"set","","",476,{"inputs":[{"name":"tcpkeepalive"},{"name":"i32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",476,{"inputs":[{"name":"tcpkeepalive"},{"name":"i32"}],"output":{"name":"result"}}],[11,"blank","","",477,{"inputs":[{"name":"getstruct"}],"output":{"name":"getstruct"}}],[11,"ffi_ptr","","",477,null],[11,"ffi_len","","",477,null],[11,"unwrap","","",477,{"inputs":[{"name":"getstruct"}],"output":{"name":"t"}}],[11,"new","","",478,{"inputs":[{"name":"setstruct"},{"name":"t"}],"output":{"name":"setstruct"}}],[11,"ffi_ptr","","",478,null],[11,"ffi_len","","",478,{"inputs":[{"name":"setstruct"}],"output":{"name":"u32"}}],[11,"blank","","",479,{"inputs":[{"name":"getbool"}],"output":{"name":"getbool"}}],[11,"ffi_ptr","","",479,null],[11,"ffi_len","","",479,null],[11,"unwrap","","",479,{"inputs":[{"name":"getbool"}],"output":{"name":"bool"}}],[11,"new","","",480,{"inputs":[{"name":"setbool"},{"name":"bool"}],"output":{"name":"setbool"}}],[11,"ffi_ptr","","",480,null],[11,"ffi_len","","",480,{"inputs":[{"name":"setbool"}],"output":{"name":"u32"}}],[11,"blank","","",481,{"inputs":[{"name":"getu8"}],"output":{"name":"getu8"}}],[11,"ffi_ptr","","",481,null],[11,"ffi_len","","",481,null],[11,"unwrap","","",481,{"inputs":[{"name":"getu8"}],"output":{"name":"u8"}}],[11,"new","","",482,{"inputs":[{"name":"setu8"},{"name":"u8"}],"output":{"name":"setu8"}}],[11,"ffi_ptr","","",482,null],[11,"ffi_len","","",482,{"inputs":[{"name":"setu8"}],"output":{"name":"u32"}}],[11,"fmt","nix::sys::socket","",483,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",483,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",483,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",483,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",484,null],[11,"cmp","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",484,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",484,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",484,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",484,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",484,{"inputs":[{"name":"sockflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",484,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",484,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",484,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",484,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",484,null],[11,"remove","","Removes the specified flags in-place.",484,null],[11,"toggle","","Toggles the specified flags in-place.",484,null],[11,"bitor","","Returns the union of the two sets of flags.",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",484,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",484,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",484,{"inputs":[{"name":"sockflag"},{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace<T>. The structure is used only for space, so\nthe fields are uninitialized.",485,{"inputs":[{"name":"cmsgspace"}],"output":{"name":"cmsgspace"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",486,{"inputs":[{"name":"recvmsg"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",487,{"inputs":[{"name":"cmsgiterator"}],"output":{"name":"option"}}],[11,"fmt","","",488,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",488,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",489,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",489,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",489,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",489,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"hash","nix::sys::stat","",490,null],[11,"cmp","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",490,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"fmt","","",490,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",490,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",490,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",490,{"inputs":[{"name":"sflag"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",490,{"inputs":[{"name":"sflag"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",490,{"inputs":[{"name":"sflag"},{"name":"u16"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",490,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",490,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",490,null],[11,"remove","","Removes the specified flags in-place.",490,null],[11,"toggle","","Toggles the specified flags in-place.",490,null],[11,"bitor","","Returns the union of the two sets of flags.",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",490,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",490,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"from_iter","","",490,{"inputs":[{"name":"sflag"},{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",491,null],[11,"cmp","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",491,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"fmt","","",491,{"inputs":[{"name":"mode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",491,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",491,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",491,{"inputs":[{"name":"mode"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",491,{"inputs":[{"name":"mode"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",491,{"inputs":[{"name":"mode"},{"name":"u16"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",491,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",491,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",491,null],[11,"remove","","Removes the specified flags in-place.",491,null],[11,"toggle","","Toggles the specified flags in-place.",491,null],[11,"bitor","","Returns the union of the two sets of flags.",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",491,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",491,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"from_iter","","",491,{"inputs":[{"name":"mode"},{"name":"t"}],"output":{"name":"mode"}}],[11,"clone","nix::sys::termios::ffi::consts","",492,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",493,null],[11,"cmp","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",493,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",493,{"inputs":[{"name":"inputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",493,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",493,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",493,{"inputs":[{"name":"inputflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",493,{"inputs":[{"name":"inputflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",493,{"inputs":[{"name":"inputflags"},{"name":"u64"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",493,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",493,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",493,null],[11,"remove","","Removes the specified flags in-place.",493,null],[11,"toggle","","Toggles the specified flags in-place.",493,null],[11,"bitor","","Returns the union of the two sets of flags.",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",493,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",493,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",493,{"inputs":[{"name":"inputflags"},{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",494,null],[11,"cmp","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",494,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",494,{"inputs":[{"name":"outputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",494,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",494,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",494,{"inputs":[{"name":"outputflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",494,{"inputs":[{"name":"outputflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",494,{"inputs":[{"name":"outputflags"},{"name":"u64"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",494,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",494,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",494,null],[11,"remove","","Removes the specified flags in-place.",494,null],[11,"toggle","","Toggles the specified flags in-place.",494,null],[11,"bitor","","Returns the union of the two sets of flags.",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",494,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",494,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",494,{"inputs":[{"name":"outputflags"},{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",495,null],[11,"cmp","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",495,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"fmt","","",495,{"inputs":[{"name":"controlflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",495,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",495,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",495,{"inputs":[{"name":"controlflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",495,{"inputs":[{"name":"controlflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",495,{"inputs":[{"name":"controlflags"},{"name":"u64"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",495,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",495,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",495,null],[11,"remove","","Removes the specified flags in-place.",495,null],[11,"toggle","","Toggles the specified flags in-place.",495,null],[11,"bitor","","Returns the union of the two sets of flags.",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",495,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",495,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",495,{"inputs":[{"name":"controlflags"},{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",496,null],[11,"cmp","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",496,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"fmt","","",496,{"inputs":[{"name":"localflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",496,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",496,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",496,{"inputs":[{"name":"localflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",496,{"inputs":[{"name":"localflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",496,{"inputs":[{"name":"localflags"},{"name":"u64"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",496,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",496,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",496,null],[11,"remove","","Removes the specified flags in-place.",496,null],[11,"toggle","","Toggles the specified flags in-place.",496,null],[11,"bitor","","Returns the union of the two sets of flags.",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",496,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",496,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"from_iter","","",496,{"inputs":[{"name":"localflags"},{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",497,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",498,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",499,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[11,"hash","nix::sys::wait","",500,null],[11,"cmp","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",500,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"fmt","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",500,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",500,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",500,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",500,{"inputs":[{"name":"waitpidflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",500,{"inputs":[{"name":"waitpidflag"},{"name":"i32"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",500,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",500,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",500,null],[11,"remove","","Removes the specified flags in-place.",500,null],[11,"toggle","","Toggles the specified flags in-place.",500,null],[11,"bitor","","Returns the union of the two sets of flags.",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",500,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",500,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",500,{"inputs":[{"name":"waitpidflag"},{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",501,{"inputs":[{"name":"waitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",501,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[11,"eq","","",501,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",501,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"as_slice","nix::sys::uio","",502,null],[11,"from_slice","","",502,null],[11,"from_mut_slice","","",502,null],[11,"fmt","nix::sys::time","",503,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"hours","","",503,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",503,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",503,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",503,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",503,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",503,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",503,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",503,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",503,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",503,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","nix::sys::select","",504,{"inputs":[{"name":"fdset"}],"output":{"name":"fdset"}}],[11,"insert","","",504,null],[11,"remove","","",504,null],[11,"contains","","",504,{"inputs":[{"name":"fdset"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"clear","","",504,null],[11,"hash","nix::sys::statvfs::vfs","",505,null],[11,"cmp","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"option"}}],[11,"lt","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"eq","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"default","","",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"fmt","","",505,{"inputs":[{"name":"fsflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",505,{"inputs":[{"name":"fsflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",505,{"inputs":[{"name":"fsflags"},{"name":"u64"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",505,null],[11,"remove","","Removes the specified flags in-place.",505,null],[11,"toggle","","Toggles the specified flags in-place.",505,null],[11,"bitor","","Returns the union of the two sets of flags.",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",505,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",505,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",505,{"inputs":[{"name":"fsflags"},{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",506,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"fmt","","",506,{"inputs":[{"name":"statvfs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",506,{"inputs":[{"name":"statvfs"},{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",506,{"inputs":[{"name":"statvfs"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",506,{"inputs":[{"name":"statvfs"},{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",506,{"inputs":[{"name":"statvfs"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",506,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","nix::unistd","",507,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",507,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",507,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"eq","nix","",437,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",437,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",437,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",437,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",437,{"inputs":[{"name":"error"},{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",437,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",437,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",83,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"len","std::path","",156,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",156,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",155,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","mio","",508,{"inputs":[{"name":"timeout"}],"output":{"name":"timeout"}}],[11,"fmt","","",509,{"inputs":[{"name":"timererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",510,null],[11,"cmp","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"option"}}],[11,"lt","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eq","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",510,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",510,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",510,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"as_usize","","",510,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[11,"from_usize","","",510,{"inputs":[{"name":"token"},{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",510,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",139,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",139,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",139,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[11,"fmt","","",511,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",511,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",511,{"inputs":[{"name":"tcpstream"},{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",511,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",511,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",511,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",511,null],[11,"write","","",511,null],[11,"flush","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",511,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",511,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",511,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",512,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",512,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",512,{"inputs":[{"name":"tcplistener"},{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",512,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",512,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",512,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",511,{"inputs":[{"name":"tcpstream"},{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",512,{"inputs":[{"name":"tcplistener"},{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[11,"fmt","","",513,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bound","","",513,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",513,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",513,null],[11,"recv_from","","",513,null],[11,"set_broadcast","","",513,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",513,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",513,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",513,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",513,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",513,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",513,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",513,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",513,{"inputs":[{"name":"udpsocket"},{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",513,{"inputs":[{"name":"udpsocket"},{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",514,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",514,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",515,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",515,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",516,null],[16,"Message","","",516,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[8,"TryRead","","",null,null],[11,"try_read_buf","","",514,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",514,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",515,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",515,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",517,null],[10,"accept","","",517,{"inputs":[{"name":"tryaccept"}],"output":{"name":"result"}}],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",516,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"try_read_buf","mio::prelude","",514,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[11,"try_write_buf","","",515,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[11,"fmt","mio::tcp","",511,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",511,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",511,{"inputs":[{"name":"tcpstream"},{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",511,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",511,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",511,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",511,null],[11,"write","","",511,null],[11,"flush","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",511,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",511,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",511,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",512,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",512,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",512,{"inputs":[{"name":"tcplistener"},{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",512,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",512,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",512,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",511,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",511,{"inputs":[{"name":"tcpstream"},{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",512,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",512,{"inputs":[{"name":"tcplistener"},{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",513,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bound","","",513,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",513,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",513,null],[11,"recv_from","","",513,null],[11,"set_broadcast","","",513,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",513,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",513,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",513,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",513,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",513,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",513,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",513,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",513,{"inputs":[{"name":"udpsocket"},{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",513,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",513,{"inputs":[{"name":"udpsocket"},{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",518,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",518,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",518,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",518,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",518,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",518,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",518,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",518,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",518,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",518,{"inputs":[{"name":"unixsocket"},{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",519,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",519,{"inputs":[{"name":"unixstream"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",519,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"read_recv_fd","","",519,null],[11,"try_read_recv_fd","","",519,null],[11,"try_read_buf_recv_fd","","",519,{"inputs":[{"name":"unixstream"},{"name":"b"}],"output":{"name":"result"}}],[11,"write_send_fd","","",519,null],[11,"try_write_send_fd","","",519,null],[11,"try_write_buf_send_fd","","",519,{"inputs":[{"name":"unixstream"},{"name":"b"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"read","","",519,null],[11,"write","","",519,null],[11,"flush","","",519,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"register","","",519,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",519,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",519,{"inputs":[{"name":"unixstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",519,{"inputs":[{"name":"unixstream"},{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",520,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",520,{"inputs":[{"name":"unixlistener"},{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",520,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","",520,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"register","","",520,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",520,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",520,{"inputs":[{"name":"unixlistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",520,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from","","",520,{"inputs":[{"name":"unixlistener"},{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",521,{"inputs":[{"name":"pipereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",521,null],[11,"register","","",521,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",521,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",521,{"inputs":[{"name":"pipereader"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",521,{"inputs":[{"name":"pipereader"},{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",522,{"inputs":[{"name":"pipewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",522,null],[11,"flush","","",522,{"inputs":[{"name":"pipewriter"}],"output":{"name":"result"}}],[11,"register","","",522,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",522,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",522,{"inputs":[{"name":"pipewriter"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",522,{"inputs":[{"name":"pipewriter"},{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",518,{"inputs":[{"name":"unixsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",518,{"inputs":[{"name":"unixsocket"},{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",519,{"inputs":[{"name":"unixstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",519,{"inputs":[{"name":"unixstream"},{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",520,{"inputs":[{"name":"unixlistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",520,{"inputs":[{"name":"unixlistener"},{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",521,{"inputs":[{"name":"pipereader"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",521,{"inputs":[{"name":"pipereader"},{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",522,{"inputs":[{"name":"pipewriter"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",522,{"inputs":[{"name":"pipewriter"},{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[11,"fmt","","",523,{"inputs":[{"name":"eventedfd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",523,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",523,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",523,{"inputs":[{"name":"eventedfd"},{"name":"selector"}],"output":{"name":"result"}}]],"paths":[[3,"Ipv4Addr"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"flock"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"pthread_attr_t"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"IoEvent"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[8,"Read"],[8,"Write"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"mach_timebase_info"],[4,"Error"],[4,"Errno"],[3,"flock"],[3,"OFlag"],[3,"FdFlag"],[3,"kevent"],[4,"EventFilter"],[3,"EventFlag"],[3,"FilterFlag"],[3,"SockFlag"],[3,"HowFlag"],[3,"siginfo"],[3,"SigSet"],[3,"SigAction"],[4,"AddressFamily"],[4,"InetAddr"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[4,"SockAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepAlive"],[3,"GetStruct"],[3,"SetStruct"],[3,"GetBool"],[3,"SetBool"],[3,"GetU8"],[3,"SetU8"],[4,"SockType"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"RecvMsg"],[3,"CmsgIterator"],[3,"linger"],[4,"Shutdown"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"WaitPidFlag"],[4,"WaitStatus"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"FsFlags"],[3,"Statvfs"],[4,"Fork"],[3,"Timeout"],[3,"TimerError"],[3,"Token"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"],[3,"EventedFd"]]};
searchIndex['clippy'] = {"items":[[5,"plugin_registrar","clippy","",null,{"inputs":[{"name":"registry"}],"output":null}],[0,"utils","","",null,null],[3,"DiagnosticWrapper","clippy::utils","",null,null],[3,"LimitStack","","",null,null],[5,"differing_macro_contexts","","Returns true if the two spans come from differing expansions (i.e. one is from a macro and one\nisn't).",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[5,"in_macro","","Returns true if this `expn_info` was expanded by any macro.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"bool"}}],[5,"in_external_macro","","Returns true if the macro that expanded the crate was outside of the current crate or was a\ncompiler plugin.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"bool"}}],[5,"match_def_path","","Check if a `DefId`'s path matches the given absolute type path usage.",null,null],[5,"match_type","","Check if type is struct or enum type with given def path.",null,null],[5,"match_impl_method","","Check if the method call given in `expr` belongs to given type.",null,null],[5,"match_trait_method","","Check if the method call given in `expr` belongs to given trait.",null,null],[5,"match_path","","Match a `Path` against a slice of segment string literals.",null,null],[5,"match_path_ast","","Match a `Path` against a slice of segment string literals, e.g.",null,null],[5,"path_to_def","","Get the definition associated to a path.\nTODO: investigate if there is something more efficient for that.",null,null],[5,"get_trait_def_id","","Convenience function to get the `DefId` of a trait by path.",null,null],[5,"implements_trait","","Check whether a type implements a trait.\nSee also `get_trait_def_id`.",null,{"inputs":[{"name":"latecontext"},{"name":"ty"},{"name":"defid"}],"output":{"name":"bool"}}],[5,"method_chain_args","","Match an `Expr` against a chain of methods, and return the matched `Expr`s.",null,null],[5,"get_item_name","","Get the name of the item the expression is in, if available.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"is_from_for_desugar","","Checks if a `let` decl is from a `for` loop desugaring.",null,{"inputs":[{"name":"decl"}],"output":{"name":"bool"}}],[5,"snippet","","Convert a span to a code snippet if available, otherwise use default.",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"snippet_opt","","Convert a span to a code snippet. Returns `None` if not available.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"option"}}],[5,"snippet_block","","Convert a span (from a block) to a code snippet if available, otherwise use default.\nThis trims the code of indentation, except for the first line. Use it for blocks or block-like\nthings which need to be printed as such.",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"expr_block","","Like `snippet_block`, but add braces if the expr is not an `ExprBlock`.\nAlso takes an `Option<String>` which can be put inside the braces.",null,{"inputs":[{"name":"t"},{"name":"expr"},{"name":"option"},{"name":"str"}],"output":{"name":"cow"}}],[5,"trim_multiline","","Trim indentation from a multiline string with possibility of ignoring the first line.",null,{"inputs":[{"name":"cow"},{"name":"bool"}],"output":{"name":"cow"}}],[5,"get_parent_expr","","Get a parent expressions if any – this is useful to constrain a lint.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"get_enclosing_block","","",null,{"inputs":[{"name":"latecontext"},{"name":"nodeid"}],"output":{"name":"option"}}],[5,"span_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticwrapper"}}],[5,"span_help_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticwrapper"}}],[5,"span_note_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticwrapper"}}],[5,"span_lint_and_then","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"f"}],"output":{"name":"diagnosticwrapper"}}],[5,"walk_ptrs_ty","","Return the base type for references and raw pointers.",null,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[5,"walk_ptrs_ty_depth","","Return the base type for references and raw pointers, and count reference depth.",null,null],[5,"is_integer_literal","","Check whether the given expression is a constant literal of the given value.",null,{"inputs":[{"name":"expr"},{"name":"u64"}],"output":{"name":"bool"}}],[5,"is_adjusted","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"bool"}}],[5,"is_exp_equal","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[6,"MethodArgs","","",null,null],[17,"BEGIN_UNWIND","","",null,null],[17,"BTREEMAP_PATH","","",null,null],[17,"CLONE_PATH","","",null,null],[17,"COW_PATH","","",null,null],[17,"DEFAULT_TRAIT_PATH","","",null,null],[17,"HASHMAP_PATH","","",null,null],[17,"LL_PATH","","",null,null],[17,"MUTEX_PATH","","",null,null],[17,"OPEN_OPTIONS_PATH","","",null,null],[17,"OPTION_PATH","","",null,null],[17,"RESULT_PATH","","",null,null],[17,"STRING_PATH","","",null,null],[17,"VEC_PATH","","",null,null],[11,"drop","","",0,{"inputs":[{"name":"diagnosticwrapper"}],"output":null}],[11,"deref_mut","","",0,{"inputs":[{"name":"diagnosticwrapper"}],"output":{"name":"diagnosticbuilder"}}],[11,"emit","syntax::errors","Emit the diagnostic.",1,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won't undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",1,null],[11,"cancelled","","",1,{"inputs":[{"name":"diagnosticbuilder"}],"output":{"name":"bool"}}],[11,"is_fatal","","",1,{"inputs":[{"name":"diagnosticbuilder"}],"output":{"name":"bool"}}],[11,"note","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_note","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"warn","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_warn","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"help","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_help","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_end_note","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"fileline_warn","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"fileline_note","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"fileline_help","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"span"}],"output":{"name":"diagnosticbuilder"}}],[11,"code","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"string"}],"output":{"name":"diagnosticbuilder"}}],[11,"new","syntax::util::interner","",2,{"inputs":[{"name":"interner"}],"output":{"name":"interner"}}],[11,"prefill","","",2,null],[11,"intern","","",2,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"gensym","","",2,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"get","","",2,{"inputs":[{"name":"interner"},{"name":"name"}],"output":{"name":"t"}}],[11,"len","","",2,{"inputs":[{"name":"interner"}],"output":{"name":"usize"}}],[11,"find","","",2,{"inputs":[{"name":"interner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",2,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"rcstr"}],"output":{"name":"rcstr"}}],[11,"new","","",3,{"inputs":[{"name":"rcstr"},{"name":"str"}],"output":{"name":"rcstr"}}],[11,"cmp","","",3,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",3,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"new","","",4,{"inputs":[{"name":"strinterner"}],"output":{"name":"strinterner"}}],[11,"prefill","","",4,null],[11,"intern","","",4,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym","","",4,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",4,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"name"}}],[11,"get","","",4,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"rcstr"}}],[11,"len","","",4,{"inputs":[{"name":"strinterner"}],"output":{"name":"usize"}}],[11,"find","","",4,{"inputs":[{"name":"strinterner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",4,null],[11,"reset","","",4,null],[11,"new","syntax::util::node_count","",5,{"inputs":[{"name":"nodecounter"}],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",5,null],[11,"visit_mod","","",5,null],[11,"visit_foreign_item","","",5,null],[11,"visit_item","","",5,null],[11,"visit_local","","",5,null],[11,"visit_block","","",5,null],[11,"visit_stmt","","",5,null],[11,"visit_arm","","",5,null],[11,"visit_pat","","",5,null],[11,"visit_decl","","",5,null],[11,"visit_expr","","",5,null],[11,"visit_ty","","",5,null],[11,"visit_generics","","",5,null],[11,"visit_fn","","",5,null],[11,"visit_trait_item","","",5,null],[11,"visit_impl_item","","",5,null],[11,"visit_trait_ref","","",5,null],[11,"visit_ty_param_bound","","",5,null],[11,"visit_poly_trait_ref","","",5,null],[11,"visit_variant_data","","",5,null],[11,"visit_struct_field","","",5,null],[11,"visit_enum_def","","",5,null],[11,"visit_variant","","",5,null],[11,"visit_lifetime","","",5,null],[11,"visit_lifetime_def","","",5,null],[11,"visit_explicit_self","","",5,null],[11,"visit_mac","","",5,null],[11,"visit_path","","",5,null],[11,"visit_path_list_item","","",5,null],[11,"visit_path_parameters","","",5,null],[11,"visit_assoc_type_binding","","",5,null],[11,"visit_attribute","","",5,null],[11,"visit_macro_def","","",5,null],[11,"eq","syntax::util::parser","",6,{"inputs":[{"name":"assocop"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"assocop"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"assocop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"fixity"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"fixity"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"fixity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_token","","Create a new AssocOP from a token",6,{"inputs":[{"name":"assocop"},{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOp_.",6,{"inputs":[{"name":"assocop"},{"name":"binop_"}],"output":{"name":"assocop"}}],[11,"precedence","","Gets the precedence of this operator",6,{"inputs":[{"name":"assocop"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",6,{"inputs":[{"name":"assocop"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",6,{"inputs":[{"name":"assocop"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",6,{"inputs":[{"name":"assocop"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",6,{"inputs":[{"name":"assocop"}],"output":{"name":"option"}}],[11,"from_iter","syntax::util::small_vector","",8,{"inputs":[{"name":"smallvector"},{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",8,null],[11,"zero","","",8,{"inputs":[{"name":"smallvector"}],"output":{"name":"smallvector"}}],[11,"one","","",8,{"inputs":[{"name":"smallvector"},{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",8,{"inputs":[{"name":"smallvector"},{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",8,null],[11,"pop","","",8,{"inputs":[{"name":"smallvector"}],"output":{"name":"option"}}],[11,"push","","",8,null],[11,"push_all","","",8,null],[11,"get","","",8,{"inputs":[{"name":"smallvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"expect_one","","",8,{"inputs":[{"name":"smallvector"},{"name":"str"}],"output":{"name":"t"}}],[11,"len","","",8,{"inputs":[{"name":"smallvector"}],"output":{"name":"usize"}}],[11,"is_empty","","",8,{"inputs":[{"name":"smallvector"}],"output":{"name":"bool"}}],[11,"into_iter","","",8,null],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"move_flat_map","","",8,{"inputs":[{"name":"smallvector"},{"name":"f"}],"output":{"name":"smallvector"}}],[11,"move_flat_map","collections::vec","",10,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"move_flat_map","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"p"}}],[11,"clone","syntax::diagnostics::registry","",12,{"inputs":[{"name":"registry"}],"output":{"name":"registry"}}],[11,"new","","",12,null],[11,"find_description","","",12,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[11,"encode","syntax::diagnostics::metadata","",13,{"inputs":[{"name":"errormetadata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"errormetadata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"errorlocation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"errorlocation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"from_span","","Create an error location from a span.",14,{"inputs":[{"name":"errorlocation"},{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[11,"eq","syntax::errors::emitter","",15,{"inputs":[{"name":"colorconfig"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"colorconfig"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"colorconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"colorconfig"}],"output":{"name":"colorconfig"}}],[11,"emit","","",16,null],[11,"custom_emit","","",16,null],[11,"stderr","","",16,{"inputs":[{"name":"basicemitter"},{"name":"colorconfig"}],"output":{"name":"basicemitter"}}],[11,"emit","","",17,null],[11,"custom_emit","","",17,null],[11,"stderr","","",17,{"inputs":[{"name":"emitterwriter"},{"name":"colorconfig"},{"name":"option"},{"name":"rc"}],"output":{"name":"emitterwriter"}}],[11,"new","","",17,{"inputs":[{"name":"emitterwriter"},{"name":"box"},{"name":"option"},{"name":"rc"}],"output":{"name":"emitterwriter"}}],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"destination"}],"output":{"name":"result"}}],[11,"basic","syntax::errors::json","",19,{"inputs":[{"name":"jsonemitter"}],"output":{"name":"jsonemitter"}}],[11,"stderr","","",19,{"inputs":[{"name":"jsonemitter"},{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",19,null],[11,"custom_emit","","",19,null],[11,"emit_struct","","",19,null],[11,"encode","","",20,{"inputs":[{"name":"diagnostic"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"diagnosticspan"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"diagnosticcode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","syntax::errors","",23,{"inputs":[{"name":"renderspan"}],"output":{"name":"renderspan"}}],[11,"fmt","","",24,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fatalerror"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fatalerror"}],"output":{"name":"str"}}],[11,"fmt","","",25,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"explicitbug"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",25,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",25,{"inputs":[{"name":"explicitbug"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"diagnosticbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,null],[11,"with_tty_emitter","","",26,{"inputs":[{"name":"handler"},{"name":"colorconfig"},{"name":"option"},{"name":"bool"},{"name":"bool"},{"name":"rc"}],"output":{"name":"handler"}}],[11,"with_emitter","","",26,{"inputs":[{"name":"handler"},{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"struct_dummy","","",26,{"inputs":[{"name":"handler"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",26,{"inputs":[{"name":"handler"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",26,{"inputs":[{"name":"handler"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",26,{"inputs":[{"name":"handler"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cancel","","",26,null],[11,"span_fatal","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",26,{"inputs":[{"name":"handler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",26,null],[11,"span_err_with_code","","",26,null],[11,"span_warn","","",26,null],[11,"span_warn_with_code","","",26,null],[11,"span_bug","","",26,null],[11,"delay_span_bug","","",26,null],[11,"span_bug_no_panic","","",26,null],[11,"span_note_without_error","","",26,null],[11,"span_unimpl","","",26,null],[11,"fatal","","",26,{"inputs":[{"name":"handler"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",26,null],[11,"warn","","",26,null],[11,"note_without_error","","",26,null],[11,"bug","","",26,null],[11,"unimpl","","",26,null],[11,"bump_err_count","","",26,null],[11,"err_count","","",26,{"inputs":[{"name":"handler"}],"output":{"name":"usize"}}],[11,"has_errors","","",26,{"inputs":[{"name":"handler"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",26,null],[11,"emit","","",26,null],[11,"emit_with_code","","",26,null],[11,"custom_emit","","",26,null],[11,"fmt","","",27,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"level"}],"output":{"name":"level"}}],[11,"eq","","",27,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","syntax::ext::base","",28,{"inputs":[{"name":"annotatable"}],"output":{"name":"annotatable"}}],[11,"fmt","","",28,{"inputs":[{"name":"annotatable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"attrs","","",28,null],[11,"fold_attrs","","",28,{"inputs":[{"name":"annotatable"},{"name":"vec"}],"output":{"name":"annotatable"}}],[11,"expect_item","","",28,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"map_item_or","","",28,{"inputs":[{"name":"annotatable"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",28,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"expect_impl_item","","",28,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"default","","",29,{"inputs":[{"name":"maceager"}],"output":{"name":"maceager"}}],[11,"expr","","",29,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",29,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",29,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",29,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",29,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",29,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",29,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_items","","",29,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_impl_items","","",29,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_stmts","","",29,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_pat","","",29,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_ty","","",29,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"dummyresult"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",30,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",30,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",30,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",30,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",30,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",30,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_pat","","",30,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_items","","",30,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_impl_items","","",30,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_stmts","","",30,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"new","","",31,{"inputs":[{"name":"blockinfo"}],"output":{"name":"blockinfo"}}],[11,"new","","",32,{"inputs":[{"name":"extctxt"},{"name":"parsesess"},{"name":"vec"},{"name":"expansionconfig"},{"name":"vec"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",32,null],[11,"codemap","","",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"parsesess"}}],[11,"cfg","","",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"call_site","","",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"backtrace","","",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"expnid"}}],[11,"original_span","","Original span that caused the current exapnsion to happen.",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"mod_push","","",32,null],[11,"mod_pop","","",32,null],[11,"mod_path","","",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"bt_push","","",32,null],[11,"bt_pop","","",32,null],[11,"insert_macro","","",32,null],[11,"struct_span_warn","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",32,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",32,null],[11,"span_warn","","",32,null],[11,"span_unimpl","","",32,null],[11,"span_bug","","",32,null],[11,"bug","","",32,null],[11,"trace_macros","","",32,{"inputs":[{"name":"extctxt"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",32,null],[11,"ident_of","","",32,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",32,null],[11,"name_of","","",32,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"name"}}],[11,"suggest_macro_name","","",32,null],[11,"push_frame","","",33,null],[11,"pop_frame","","",33,null],[11,"find","","",33,{"inputs":[{"name":"syntaxenv"},{"name":"name"}],"output":{"name":"option"}}],[11,"insert","","",33,null],[11,"info","","",33,{"inputs":[{"name":"syntaxenv"}],"output":{"name":"blockinfo"}}],[11,"path","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",32,null],[11,"qpath_all","","Constructs a qualified path.",32,null],[11,"ty_mt","","",32,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ty_"}],"output":{"name":"p"}}],[11,"ty_path","","",32,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_sum","","",32,{"inputs":[{"name":"extctxt"},{"name":"path"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_ident","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",32,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_infer","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"ty_vars","","",32,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"vec"}}],[11,"ty_vars_global","","",32,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"vec"}}],[11,"trait_ref","","",32,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",32,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",32,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let_typed","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"stmt_item","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_expr","","",32,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_all","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"expr_"}],"output":{"name":"p"}}],[11,"expr_path","","",32,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"binop_"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",32,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"expr_usize","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_cast","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"pat_"}],"output":{"name":"p"}}],[11,"pat_wild","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_enum","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_expr","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_0","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_1","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",32,{"inputs":[{"name":"extctxt"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"item_"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"spanned"}}],[11,"item_enum_poly","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_static","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"spanned"}}],[11,"meta_word","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"meta_list","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[11,"meta_name_value","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"item_use","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",32,null],[11,"item_use_glob","","",32,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"clone","syntax::ext::expand","",34,{"inputs":[{"name":"patidentfinder"}],"output":{"name":"patidentfinder"}}],[11,"visit_pat","","",34,null],[11,"fold_ident","","",35,{"inputs":[{"name":"identrenamer"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_mac","","",35,{"inputs":[{"name":"identrenamer"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"fold_pat","","",36,{"inputs":[{"name":"patidentrenamer"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",36,{"inputs":[{"name":"patidentrenamer"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"new","","",37,{"inputs":[{"name":"macroexpander"},{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"fold_expr","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_pat","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_item","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_underscore","","",37,{"inputs":[{"name":"macroexpander"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_stmt","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_block","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_arm","","",37,{"inputs":[{"name":"macroexpander"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_trait_item","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_ty","","",37,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"new_span","","",37,{"inputs":[{"name":"macroexpander"},{"name":"span"}],"output":{"name":"span"}}],[11,"default","","",38,{"inputs":[{"name":"expansionconfig"},{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_asm","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_pushpop_unsafe","","",38,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"fold_ident","","",39,{"inputs":[{"name":"marker"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_mac","","",39,{"inputs":[{"name":"marker"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"visit_mac","","",40,null],[11,"clone","syntax::ext::mtwt","",41,{"inputs":[{"name":"syntaxcontext_"}],"output":{"name":"syntaxcontext_"}}],[11,"fmt","","",41,{"inputs":[{"name":"syntaxcontext_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"syntaxcontext_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"syntaxcontext_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[11,"to_tokens","syntax::ast","",42,{"inputs":[{"name":"tokentree"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","collections::vec","",10,{"inputs":[{"name":"vec"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",43,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","core::option","",44,{"inputs":[{"name":"option"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",45,{"inputs":[{"name":"ident"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"path"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"ty"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",48,{"inputs":[{"name":"block"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",49,{"inputs":[{"name":"generics"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",50,{"inputs":[{"name":"whereclause"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",51,{"inputs":[{"name":"arm"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",52,{"inputs":[{"name":"arg"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",43,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",43,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",32,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",32,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_expr","","",32,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",32,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"vec"}}],[11,"clone","syntax::ext::tt::transcribe","",53,{"inputs":[{"name":"ttframe"}],"output":{"name":"ttframe"}}],[11,"clone","","",54,{"inputs":[{"name":"ttreader"}],"output":{"name":"ttreader"}}],[11,"clone","","",55,{"inputs":[{"name":"lockstepitersize"}],"output":{"name":"lockstepitersize"}}],[11,"add","","",55,{"inputs":[{"name":"lockstepitersize"},{"name":"lockstepitersize"}],"output":{"name":"lockstepitersize"}}],[11,"clone","syntax::ext::tt::macro_parser","",56,{"inputs":[{"name":"tokentreeortokentreevec"}],"output":{"name":"tokentreeortokentreevec"}}],[11,"clone","","",57,{"inputs":[{"name":"matcherttframe"}],"output":{"name":"matcherttframe"}}],[11,"clone","","",58,{"inputs":[{"name":"matcherpos"}],"output":{"name":"matcherpos"}}],[11,"make_expr","syntax::ext::tt::macro_rules","",59,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_pat","","",59,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_items","","",59,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_impl_items","","",59,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_stmts","","",59,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_ty","","",59,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"expand","","",60,null],[11,"fmt","","",61,{"inputs":[{"name":"onfail"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"onfailaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"onfailaction"}],"output":{"name":"onfailaction"}}],[11,"fmt","","",63,{"inputs":[{"name":"tokenset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"tokenset"}],"output":{"name":"tokenset"}}],[11,"hash","syntax::parse::parser","",64,null],[11,"cmp","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"eq","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[18,"RESTRICTION_STMT_EXPR","clippy","",64,null],[18,"RESTRICTION_NO_STRUCT_LITERAL","","",64,null],[11,"empty","syntax::parse::parser","Returns an empty set of flags.",64,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",64,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",64,{"inputs":[{"name":"restrictions"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",64,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",64,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",64,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",64,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",64,null],[11,"remove","","Removes the specified flags in-place.",64,null],[11,"toggle","","Toggles the specified flags in-place.",64,null],[11,"bitor","","Returns the union of the two sets of flags.",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",64,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"not","","Returns the complement of this set of flags.",64,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"eq","","",65,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"pathparsingmode"}],"output":{"name":"pathparsingmode"}}],[11,"eq","","",66,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"boundparsingmode"}],"output":{"name":"boundparsingmode"}}],[11,"eq","","",67,{"inputs":[{"name":"parsepub"},{"name":"parsepub"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"parsepub"},{"name":"parsepub"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"parsepub"}],"output":{"name":"parsepub"}}],[11,"clone","","",68,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"eq","","",68,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"from","","",69,{"inputs":[{"name":"lhsexpr"},{"name":"option"}],"output":{"name":"lhsexpr"}}],[11,"from","","",69,{"inputs":[{"name":"lhsexpr"},{"name":"p"}],"output":{"name":"lhsexpr"}}],[11,"new","","",70,{"inputs":[{"name":"parser"},{"name":"parsesess"},{"name":"vec"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self's reader",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",70,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[11,"unexpected_last","","",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"unexpected","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",70,null],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",70,null],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",70,null],[11,"commit_expr_expecting","","",70,{"inputs":[{"name":"parser"},{"name":"expr"},{"name":"token"}],"output":{"name":"result"}}],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",70,null],[11,"commit_stmt_expecting","","",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_ident","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ident_or_self_type","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_list_item","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"check_keyword","","",70,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",70,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword_noexpect","","",70,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",70,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",70,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",70,null],[11,"expect_no_suffix","","",70,null],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_gt_or_return","","",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_gt","","",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_gt_or_return","","",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",70,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",70,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",70,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",70,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq","","",70,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"bump","","Advance the parser by one token",70,null],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",70,{"inputs":[{"name":"parser"}],"output":{"name":"token"}}],[11,"replace_token","","EFFECT: replace the current token and span with the given one",70,null],[11,"buffer_length","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"isize"}}],[11,"look_ahead","","",70,{"inputs":[{"name":"parser"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",70,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",70,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_help","","",70,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"bug","","",70,null],[11,"warn","","",70,null],[11,"span_warn","","",70,null],[11,"span_err","","",70,null],[11,"span_bug","","",70,null],[11,"abort_if_errors","","",70,null],[11,"diagnostic","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"handler"}}],[11,"id_to_interned_str","","",70,{"inputs":[{"name":"parser"},{"name":"ident"}],"output":{"name":"internedstring"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",70,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"get_lifetime","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"ident"}}],[11,"parse_for_in_type","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_path","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",70,{"inputs":[{"name":"parser"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_unsafety","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_trait_items","","Parse the items in a trait declaration",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_mt","","Parse a possibly mutable type",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty","","Parse a type.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_borrowed_pointee","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ptr","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"is_named_argument","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",70,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"parse_arg","","Parse a single function argument",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"maybe_parse_fixed_length_of_vec","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_pat_literal_maybe_minus","","matches '-' lit | lit",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_qualified_path","","Parses qualified path.",70,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"result"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",70,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"result"}}],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",70,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_field","","Parse ident COLON expr",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"mk_expr","","",70,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"expr_"},{"name":"option"}],"output":{"name":"p"}}],[11,"mk_unary","","",70,{"inputs":[{"name":"parser"},{"name":"unop"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_binary","","",70,{"inputs":[{"name":"parser"},{"name":"spanned"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_call","","",70,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"vec"}],"output":{"name":"expr_"}}],[11,"mk_index","","",70,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_range","","",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"option"}],"output":{"name":"expr_"}}],[11,"mk_field","","",70,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spanned"}],"output":{"name":"expr_"}}],[11,"mk_tup_field","","",70,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spanned"}],"output":{"name":"expr_"}}],[11,"mk_assign_op","","",70,{"inputs":[{"name":"parser"},{"name":"spanned"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_mac_expr","","",70,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"mac_"},{"name":"option"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",70,{"inputs":[{"name":"parser"},{"name":"u32"},{"name":"option"}],"output":{"name":"p"}}],[11,"parse_block_expr","","Parse a block or unsafe block",70,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"blockcheckmode"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",70,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_dot_or_call_expr_with","","",70,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"option"}],"output":{"name":"result"}}],[11,"check_unknown_macro_variable","","",70,null],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_token_tree","","parse a single token tree from the input.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_all_token_trees","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",70,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_assoc_expr","","Parse an associative expression",70,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",70,{"inputs":[{"name":"parser"},{"name":"usize"},{"name":"lhsexpr"}],"output":{"name":"result"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",70,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",70,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_lambda_expr","","",70,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"captureclause"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_else_expr","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_loop_expr","","",70,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_arm","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_expr","","Parse an expression",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",70,{"inputs":[{"name":"parser"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",70,{"inputs":[{"name":"parser"},{"name":"restrictions"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_pat","","Parse a pattern.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_stmt","","Parse a statement. may include decl.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",70,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",70,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to\nand including the `fn` keyword:",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_impl_item","","Parse an impl item.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_record_struct_body","","",70,{"inputs":[{"name":"parser"},{"name":"parsepub"}],"output":{"name":"result"}}],[11,"parse_tuple_struct_body","","",70,{"inputs":[{"name":"parser"},{"name":"parsepub"}],"output":{"name":"result"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",70,{"inputs":[{"name":"parser"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"result"}}],[11,"submod_path_from_attr","","",70,null],[11,"default_submod_path","","Returns either a path to a module, or .",70,{"inputs":[{"name":"parser"},{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_optional_str","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"parse_str","","",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"eq","syntax::parse::lexer::comments","",71,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"commentstyle"}],"output":{"name":"commentstyle"}}],[11,"clone","","",72,{"inputs":[{"name":"comment"}],"output":{"name":"comment"}}],[11,"clone","","",73,{"inputs":[{"name":"literal"}],"output":{"name":"literal"}}],[11,"fmt","syntax::parse::lexer","",74,{"inputs":[{"name":"tokenandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"tokenandspan"}],"output":{"name":"tokenandspan"}}],[11,"is_eof","","",75,{"inputs":[{"name":"stringreader"}],"output":{"name":"bool"}}],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",75,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",75,{"inputs":[{"name":"stringreader"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",75,null],[11,"peek","","",75,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"is_eof","syntax::ext::tt::transcribe","",54,{"inputs":[{"name":"ttreader"}],"output":{"name":"bool"}}],[11,"next_token","","",54,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",54,{"inputs":[{"name":"ttreader"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",54,null],[11,"peek","","",54,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","syntax::parse::lexer","For comments.rs, which hackily pokes into pos and curr",75,{"inputs":[{"name":"stringreader"},{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",75,{"inputs":[{"name":"stringreader"},{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",75,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",75,{"inputs":[{"name":"stringreader"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",75,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",75,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",75,{"inputs":[{"name":"stringreader"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",75,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",75,null],[11,"nextch","","",75,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextch_is","","",75,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",75,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",75,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fmt","syntax::parse::token","",76,{"inputs":[{"name":"binoptoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"decode","","",76,{"inputs":[{"name":"binoptoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,{"inputs":[{"name":"binoptoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"binoptoken"}],"output":{"name":"binoptoken"}}],[11,"fmt","","",77,{"inputs":[{"name":"delimtoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"decode","","",77,{"inputs":[{"name":"delimtoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,{"inputs":[{"name":"delimtoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"delimtoken"}],"output":{"name":"delimtoken"}}],[11,"fmt","","",78,{"inputs":[{"name":"identstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"decode","","",78,{"inputs":[{"name":"identstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,{"inputs":[{"name":"identstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"identstyle"}],"output":{"name":"identstyle"}}],[11,"fmt","","",79,{"inputs":[{"name":"specialmacrovar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"eq","","",79,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"decode","","",79,{"inputs":[{"name":"specialmacrovar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,{"inputs":[{"name":"specialmacrovar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"specialmacrovar"}}],[11,"as_str","","",79,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"str"}}],[11,"fmt","","",80,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"eq","","",80,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"decode","","",80,{"inputs":[{"name":"lit"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,{"inputs":[{"name":"lit"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"short_name","","",80,{"inputs":[{"name":"lit"}],"output":{"name":"str"}}],[11,"fmt","","",81,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"decode","","",81,{"inputs":[{"name":"token"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,{"inputs":[{"name":"token"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"to_binop","","Maps a token to its corresponding binary operator.",81,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",81,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_keyword_allow_following_colon","","",81,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",81,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"mtwt_eq","","Hygienic identifier equality comparison.",81,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"decode","","",82,{"inputs":[{"name":"nonterminal"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,{"inputs":[{"name":"nonterminal"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fmt","","",82,{"inputs":[{"name":"nonterminal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","syntax::parse::token::keywords","",83,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"keyword"}],"output":{"name":"keyword"}}],[11,"to_name","","",83,{"inputs":[{"name":"keyword"}],"output":{"name":"name"}}],[11,"cmp","syntax::parse::token","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"internedstring"}],"output":{"name":"internedstring"}}],[11,"new","","",84,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",84,{"inputs":[{"name":"internedstring"},{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",84,{"inputs":[{"name":"internedstring"}],"output":{"name":"str"}}],[11,"fmt","","",84,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"decode","","",84,{"inputs":[{"name":"internedstring"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",84,{"inputs":[{"name":"internedstring"},{"name":"s"}],"output":{"name":"result"}}],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",70,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",70,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"hash","syntax::parse::obsolete","",85,null],[11,"eq","","",85,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"obsoletesyntax"}],"output":{"name":"obsoletesyntax"}}],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",70,null],[11,"report","","",70,null],[11,"new","syntax::parse","",86,{"inputs":[{"name":"parsesess"}],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",86,{"inputs":[{"name":"parsesess"},{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",86,{"inputs":[{"name":"parsesess"}],"output":{"name":"codemap"}}],[11,"hash","syntax::ast","",87,null],[11,"cmp","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"decode","","",88,{"inputs":[{"name":"syntaxcontext"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,{"inputs":[{"name":"syntaxcontext"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"syntaxcontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"syntaxcontext"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"syntaxcontext"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[11,"clone","","",45,{"inputs":[{"name":"ident"}],"output":{"name":"ident"}}],[11,"as_str","","",87,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"fmt","","",87,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",87,{"inputs":[{"name":"name"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"name"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",45,{"inputs":[{"name":"ident"},{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"ident"}}],[11,"with_empty_ctxt","","",45,{"inputs":[{"name":"ident"},{"name":"name"}],"output":{"name":"ident"}}],[11,"eq","","",45,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"ident"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"ident"},{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"lifetime"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,{"inputs":[{"name":"lifetime"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fmt","","",89,{"inputs":[{"name":"lifetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"lifetimedef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"lifetimedef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,{"inputs":[{"name":"lifetimedef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"path"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"path"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"fmt","","",46,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"pathsegment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"pathsegment"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,{"inputs":[{"name":"pathsegment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fmt","","",92,{"inputs":[{"name":"pathparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"pathparameters"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,{"inputs":[{"name":"pathparameters"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"none","","",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"is_empty","","",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_lifetimes","","",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_types","","",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"lifetimes","","",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"bindings","","",92,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"fmt","","",93,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fmt","","",94,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fmt","","",95,{"inputs":[{"name":"typarambound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"typarambound"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,{"inputs":[{"name":"typarambound"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fmt","","",96,{"inputs":[{"name":"traitboundmodifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"traitboundmodifier"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,{"inputs":[{"name":"traitboundmodifier"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fmt","","",97,{"inputs":[{"name":"typaram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"typaram"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,{"inputs":[{"name":"typaram"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fmt","","",49,{"inputs":[{"name":"generics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"generics"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"generics"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"generics"}],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",49,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",49,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",49,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",49,{"inputs":[{"name":"generics"}],"output":{"name":"generics"}}],[11,"fmt","","",50,{"inputs":[{"name":"whereclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"whereclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"whereclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fmt","","",98,{"inputs":[{"name":"wherepredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"wherepredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,{"inputs":[{"name":"wherepredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",99,{"inputs":[{"name":"whereboundpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"whereboundpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,{"inputs":[{"name":"whereboundpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"whereboundpredicate"}],"output":{"name":"whereboundpredicate"}}],[11,"fmt","","",100,{"inputs":[{"name":"whereregionpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"whereregionpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,{"inputs":[{"name":"whereregionpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"whereregionpredicate"}],"output":{"name":"whereregionpredicate"}}],[11,"fmt","","",101,{"inputs":[{"name":"whereeqpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"whereeqpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,{"inputs":[{"name":"whereeqpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"whereeqpredicate"}],"output":{"name":"whereeqpredicate"}}],[11,"fmt","","",102,{"inputs":[{"name":"crate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"crate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,{"inputs":[{"name":"crate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"crate"}],"output":{"name":"crate"}}],[11,"fmt","","",103,{"inputs":[{"name":"metaitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"metaitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,{"inputs":[{"name":"metaitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"metaitem_"}],"output":{"name":"metaitem_"}}],[11,"eq","","",103,{"inputs":[{"name":"metaitem_"},{"name":"metaitem_"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"block"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"block"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"pat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"pat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"pat"}],"output":{"name":"pat"}}],[11,"fmt","","",104,{"inputs":[{"name":"pat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"fieldpat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"fieldpat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,{"inputs":[{"name":"fieldpat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fmt","","",106,{"inputs":[{"name":"bindingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"bindingmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,{"inputs":[{"name":"bindingmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"bindingmode"}],"output":{"name":"bindingmode"}}],[11,"fmt","","",107,{"inputs":[{"name":"pat_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"pat_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,{"inputs":[{"name":"pat_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"pat_"}],"output":{"name":"pat_"}}],[11,"fmt","","",108,{"inputs":[{"name":"mutability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"mutability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,{"inputs":[{"name":"mutability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"mutability"}],"output":{"name":"mutability"}}],[11,"fmt","","",109,{"inputs":[{"name":"binop_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"binop_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"binop_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"binop_"}],"output":{"name":"binop_"}}],[11,"to_string","","",109,{"inputs":[{"name":"binop_"}],"output":{"name":"str"}}],[11,"lazy","","",109,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[11,"is_shift","","",109,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[11,"is_comparison","","",109,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",109,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"unop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"unop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"unop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"unop"}],"output":{"name":"unop"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",110,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",110,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"str"}}],[11,"fmt","syntax::codemap","",43,{"inputs":[{"name":"spanned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","syntax::ast","",111,null],[11,"decode","","",111,{"inputs":[{"name":"stmt_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,{"inputs":[{"name":"stmt_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"stmt_"}],"output":{"name":"stmt_"}}],[11,"id","","",111,{"inputs":[{"name":"stmt_"}],"output":{"name":"option"}}],[11,"attrs","","",111,null],[11,"fmt","","",112,{"inputs":[{"name":"macstmtstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"macstmtstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,{"inputs":[{"name":"macstmtstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"macstmtstyle"}],"output":{"name":"macstmtstyle"}}],[11,"fmt","","",113,{"inputs":[{"name":"local"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"decode","","",113,{"inputs":[{"name":"local"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,{"inputs":[{"name":"local"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"attrs","","",113,null],[11,"fmt","","",114,{"inputs":[{"name":"decl_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"decode","","",114,{"inputs":[{"name":"decl_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",114,{"inputs":[{"name":"decl_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"decl_"}],"output":{"name":"decl_"}}],[11,"attrs","syntax::codemap","",43,null],[11,"fmt","syntax::ast","",51,{"inputs":[{"name":"arm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"arm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"arm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"arm"}],"output":{"name":"arm"}}],[11,"fmt","","",115,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"decode","","",115,{"inputs":[{"name":"field"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",115,{"inputs":[{"name":"field"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"fmt","","",116,{"inputs":[{"name":"blockcheckmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"decode","","",116,{"inputs":[{"name":"blockcheckmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",116,{"inputs":[{"name":"blockcheckmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"blockcheckmode"}],"output":{"name":"blockcheckmode"}}],[11,"fmt","","",117,{"inputs":[{"name":"unsafesource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",117,null],[11,"decode","","",117,{"inputs":[{"name":"unsafesource"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",117,{"inputs":[{"name":"unsafesource"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"unsafesource"}],"output":{"name":"unsafesource"}}],[11,"hash","","",118,null],[11,"decode","","",118,{"inputs":[{"name":"expr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",118,{"inputs":[{"name":"expr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"attrs","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"expr_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",119,null],[11,"decode","","",119,{"inputs":[{"name":"expr_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",119,{"inputs":[{"name":"expr_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"expr_"}],"output":{"name":"expr_"}}],[11,"fmt","","",120,{"inputs":[{"name":"qself"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"decode","","",120,{"inputs":[{"name":"qself"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",120,{"inputs":[{"name":"qself"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"qself"}],"output":{"name":"qself"}}],[11,"fmt","","",121,{"inputs":[{"name":"captureclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"decode","","",121,{"inputs":[{"name":"captureclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",121,{"inputs":[{"name":"captureclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"captureclause"}],"output":{"name":"captureclause"}}],[11,"fmt","","",122,{"inputs":[{"name":"delimited"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"decode","","",122,{"inputs":[{"name":"delimited"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",122,{"inputs":[{"name":"delimited"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"delimited"}],"output":{"name":"delimited"}}],[11,"open_token","","Returns the opening delimiter as a token.",122,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",122,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",122,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",122,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"fmt","","",123,{"inputs":[{"name":"sequencerepetition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",123,null],[11,"decode","","",123,{"inputs":[{"name":"sequencerepetition"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",123,{"inputs":[{"name":"sequencerepetition"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"sequencerepetition"}],"output":{"name":"sequencerepetition"}}],[11,"fmt","","",124,{"inputs":[{"name":"kleeneop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",124,null],[11,"decode","","",124,{"inputs":[{"name":"kleeneop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",124,{"inputs":[{"name":"kleeneop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"kleeneop"}],"output":{"name":"kleeneop"}}],[11,"fmt","","",42,{"inputs":[{"name":"tokentree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"tokentree"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"tokentree"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"len","","",42,{"inputs":[{"name":"tokentree"}],"output":{"name":"usize"}}],[11,"get_tt","","",42,{"inputs":[{"name":"tokentree"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"get_span","","Returns the `Span` corresponding to this token tree.",42,{"inputs":[{"name":"tokentree"}],"output":{"name":"span"}}],[11,"parse","","Use this token tree as a matcher to parse given tts.",42,null],[11,"fmt","","",125,{"inputs":[{"name":"mac_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,null],[11,"decode","","",125,{"inputs":[{"name":"mac_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",125,{"inputs":[{"name":"mac_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"mac_"}],"output":{"name":"mac_"}}],[11,"fmt","","",126,{"inputs":[{"name":"strstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"decode","","",126,{"inputs":[{"name":"strstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",126,{"inputs":[{"name":"strstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"strstyle"}],"output":{"name":"strstyle"}}],[11,"fmt","","",127,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"decode","","",127,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",127,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"new","","",127,{"inputs":[{"name":"sign"},{"name":"t"}],"output":{"name":"sign"}}],[11,"fmt","","",128,{"inputs":[{"name":"litinttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"decode","","",128,{"inputs":[{"name":"litinttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",128,{"inputs":[{"name":"litinttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"litinttype"}],"output":{"name":"litinttype"}}],[11,"fmt","","",129,{"inputs":[{"name":"lit_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"decode","","",129,{"inputs":[{"name":"lit_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",129,{"inputs":[{"name":"lit_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"lit_"}],"output":{"name":"lit_"}}],[11,"is_str","","Returns true if this literal is a string and false otherwise.",129,{"inputs":[{"name":"lit_"}],"output":{"name":"bool"}}],[11,"fmt","","",130,{"inputs":[{"name":"mutty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"decode","","",130,{"inputs":[{"name":"mutty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",130,{"inputs":[{"name":"mutty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fmt","","",131,{"inputs":[{"name":"methodsig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"decode","","",131,{"inputs":[{"name":"methodsig"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",131,{"inputs":[{"name":"methodsig"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fmt","","",132,{"inputs":[{"name":"traititem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"decode","","",132,{"inputs":[{"name":"traititem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",132,{"inputs":[{"name":"traititem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fmt","","",133,{"inputs":[{"name":"traititem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"decode","","",133,{"inputs":[{"name":"traititem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",133,{"inputs":[{"name":"traititem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"traititem_"}],"output":{"name":"traititem_"}}],[11,"fmt","","",134,{"inputs":[{"name":"implitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"decode","","",134,{"inputs":[{"name":"implitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",134,{"inputs":[{"name":"implitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fmt","","",135,{"inputs":[{"name":"implitemkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"decode","","",135,{"inputs":[{"name":"implitemkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",135,{"inputs":[{"name":"implitemkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"implitemkind"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"implitemkind"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"implitemkind"}],"output":{"name":"implitemkind"}}],[11,"hash","clippy::utils","",136,null],[11,"decode","","",136,{"inputs":[{"name":"intty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",136,{"inputs":[{"name":"intty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",136,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"intty"}],"output":{"name":"intty"}}],[11,"fmt","","",136,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",136,{"inputs":[{"name":"intty"}],"output":{"name":"str"}}],[11,"val_to_string","","",136,{"inputs":[{"name":"intty"},{"name":"i64"}],"output":{"name":"string"}}],[11,"ty_max","","",136,{"inputs":[{"name":"intty"}],"output":{"name":"u64"}}],[11,"bit_width","","",136,{"inputs":[{"name":"intty"}],"output":{"name":"option"}}],[11,"hash","","",137,null],[11,"decode","","",137,{"inputs":[{"name":"uintty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",137,{"inputs":[{"name":"uintty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"uintty"}],"output":{"name":"uintty"}}],[11,"ty_to_string","","",137,{"inputs":[{"name":"uintty"}],"output":{"name":"str"}}],[11,"val_to_string","","",137,{"inputs":[{"name":"uintty"},{"name":"u64"}],"output":{"name":"string"}}],[11,"ty_max","","",137,{"inputs":[{"name":"uintty"}],"output":{"name":"u64"}}],[11,"bit_width","","",137,{"inputs":[{"name":"uintty"}],"output":{"name":"option"}}],[11,"fmt","","",137,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"decode","","",138,{"inputs":[{"name":"floatty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",138,{"inputs":[{"name":"floatty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"floatty"}],"output":{"name":"floatty"}}],[11,"fmt","","",138,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",138,{"inputs":[{"name":"floatty"}],"output":{"name":"str"}}],[11,"bit_width","","",138,{"inputs":[{"name":"floatty"}],"output":{"name":"usize"}}],[11,"fmt","syntax::ast","",139,{"inputs":[{"name":"typebinding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"decode","","",139,{"inputs":[{"name":"typebinding"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",139,{"inputs":[{"name":"typebinding"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"ty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"ty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[11,"fmt","","",47,{"inputs":[{"name":"ty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"primty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"decode","","",140,{"inputs":[{"name":"primty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",140,{"inputs":[{"name":"primty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"primty"}],"output":{"name":"primty"}}],[11,"fmt","","",141,{"inputs":[{"name":"barefnty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",141,null],[11,"decode","","",141,{"inputs":[{"name":"barefnty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",141,{"inputs":[{"name":"barefnty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"barefnty"}],"output":{"name":"barefnty"}}],[11,"fmt","","",142,{"inputs":[{"name":"ty_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",142,null],[11,"decode","","",142,{"inputs":[{"name":"ty_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",142,{"inputs":[{"name":"ty_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"ty_"}],"output":{"name":"ty_"}}],[11,"fmt","","",143,{"inputs":[{"name":"asmdialect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",143,null],[11,"decode","","",143,{"inputs":[{"name":"asmdialect"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",143,{"inputs":[{"name":"asmdialect"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"asmdialect"}],"output":{"name":"asmdialect"}}],[11,"fmt","","",144,{"inputs":[{"name":"inlineasmoutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"decode","","",144,{"inputs":[{"name":"inlineasmoutput"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",144,{"inputs":[{"name":"inlineasmoutput"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"inlineasmoutput"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"inlineasmoutput"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"inlineasmoutput"}],"output":{"name":"inlineasmoutput"}}],[11,"fmt","","",145,{"inputs":[{"name":"inlineasm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",145,null],[11,"decode","","",145,{"inputs":[{"name":"inlineasm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",145,{"inputs":[{"name":"inlineasm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"inlineasm"}],"output":{"name":"inlineasm"}}],[11,"fmt","","",52,{"inputs":[{"name":"arg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"arg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"arg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"arg"}],"output":{"name":"arg"}}],[11,"new_self","","",52,{"inputs":[{"name":"arg"},{"name":"span"},{"name":"mutability"},{"name":"ident"}],"output":{"name":"arg"}}],[11,"fmt","","",146,{"inputs":[{"name":"fndecl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[11,"decode","","",146,{"inputs":[{"name":"fndecl"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",146,{"inputs":[{"name":"fndecl"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fmt","","",147,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"decode","","",147,{"inputs":[{"name":"unsafety"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",147,{"inputs":[{"name":"unsafety"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"unsafety"}],"output":{"name":"unsafety"}}],[11,"fmt","","",148,{"inputs":[{"name":"constness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",148,null],[11,"decode","","",148,{"inputs":[{"name":"constness"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",148,{"inputs":[{"name":"constness"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"constness"}],"output":{"name":"constness"}}],[11,"fmt","","",147,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"decode","","",149,{"inputs":[{"name":"implpolarity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",149,{"inputs":[{"name":"implpolarity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"implpolarity"}],"output":{"name":"implpolarity"}}],[11,"fmt","","",149,{"inputs":[{"name":"implpolarity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"functionretty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"decode","","",150,{"inputs":[{"name":"functionretty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",150,{"inputs":[{"name":"functionretty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"functionretty"}],"output":{"name":"functionretty"}}],[11,"span","","",150,{"inputs":[{"name":"functionretty"}],"output":{"name":"span"}}],[11,"fmt","","",151,{"inputs":[{"name":"explicitself_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"decode","","",151,{"inputs":[{"name":"explicitself_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",151,{"inputs":[{"name":"explicitself_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"explicitself_"}],"output":{"name":"explicitself_"}}],[11,"fmt","","",152,{"inputs":[{"name":"mod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"decode","","",152,{"inputs":[{"name":"mod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",152,{"inputs":[{"name":"mod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"mod"}],"output":{"name":"mod"}}],[11,"fmt","","",153,{"inputs":[{"name":"foreignmod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"decode","","",153,{"inputs":[{"name":"foreignmod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",153,{"inputs":[{"name":"foreignmod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fmt","","",154,{"inputs":[{"name":"enumdef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"enumdef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",154,{"inputs":[{"name":"enumdef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"enumdef"}],"output":{"name":"enumdef"}}],[11,"fmt","","",155,{"inputs":[{"name":"variant_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",155,null],[11,"decode","","",155,{"inputs":[{"name":"variant_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",155,{"inputs":[{"name":"variant_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"variant_"}],"output":{"name":"variant_"}}],[11,"fmt","","",156,{"inputs":[{"name":"pathlistitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"pathlistitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",156,{"inputs":[{"name":"pathlistitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"pathlistitem_"}}],[11,"id","","",156,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"u32"}}],[11,"name","","",156,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"option"}}],[11,"rename","","",156,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"viewpath_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"decode","","",157,{"inputs":[{"name":"viewpath_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",157,{"inputs":[{"name":"viewpath_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"viewpath_"}],"output":{"name":"viewpath_"}}],[11,"fmt","","",158,{"inputs":[{"name":"attrstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",158,null],[11,"decode","","",158,{"inputs":[{"name":"attrstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",158,{"inputs":[{"name":"attrstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fmt","","",159,{"inputs":[{"name":"attrid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",159,null],[11,"decode","","",159,{"inputs":[{"name":"attrid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",159,{"inputs":[{"name":"attrid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"attrid"}],"output":{"name":"attrid"}}],[11,"fmt","","",160,{"inputs":[{"name":"attribute_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",160,null],[11,"decode","","",160,{"inputs":[{"name":"attribute_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",160,{"inputs":[{"name":"attribute_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"attribute_"}],"output":{"name":"attribute_"}}],[11,"fmt","","",161,{"inputs":[{"name":"traitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"decode","","",161,{"inputs":[{"name":"traitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",161,{"inputs":[{"name":"traitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fmt","","",162,{"inputs":[{"name":"polytraitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"polytraitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",162,{"inputs":[{"name":"polytraitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fmt","","",163,{"inputs":[{"name":"visibility"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"visibility"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",163,{"inputs":[{"name":"visibility"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"inherit_from","","",163,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fmt","","",164,{"inputs":[{"name":"structfield_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"decode","","",164,{"inputs":[{"name":"structfield_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",164,{"inputs":[{"name":"structfield_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"structfield_"}],"output":{"name":"structfield_"}}],[11,"ident","","",164,{"inputs":[{"name":"structfield_"}],"output":{"name":"option"}}],[11,"fmt","","",165,{"inputs":[{"name":"structfieldkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"structfieldkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",165,{"inputs":[{"name":"structfieldkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"structfieldkind"}}],[11,"is_unnamed","","",165,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"visibility","","",165,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"visibility"}}],[11,"fmt","","",166,{"inputs":[{"name":"variantdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"decode","","",166,{"inputs":[{"name":"variantdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",166,{"inputs":[{"name":"variantdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"variantdata"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"variantdata"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fields","","",166,null],[11,"id","","",166,{"inputs":[{"name":"variantdata"}],"output":{"name":"u32"}}],[11,"is_struct","","",166,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"is_tuple","","",166,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"is_unit","","",166,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",167,null],[11,"decode","","",167,{"inputs":[{"name":"item"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",167,{"inputs":[{"name":"item"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"attrs","","",167,null],[11,"fmt","","",168,{"inputs":[{"name":"item_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",168,null],[11,"decode","","",168,{"inputs":[{"name":"item_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",168,{"inputs":[{"name":"item_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"item_"}],"output":{"name":"item_"}}],[11,"descriptive_variant","","",168,{"inputs":[{"name":"item_"}],"output":{"name":"str"}}],[11,"fmt","","",169,{"inputs":[{"name":"foreignitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",169,null],[11,"decode","","",169,{"inputs":[{"name":"foreignitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",169,{"inputs":[{"name":"foreignitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",170,{"inputs":[{"name":"foreignitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",170,null],[11,"decode","","",170,{"inputs":[{"name":"foreignitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",170,{"inputs":[{"name":"foreignitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"foreignitem_"}}],[11,"descriptive_variant","","",170,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"str"}}],[11,"fmt","","",171,{"inputs":[{"name":"macrodef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",171,null],[11,"decode","","",171,{"inputs":[{"name":"macrodef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",171,{"inputs":[{"name":"macrodef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"macrodef"}],"output":{"name":"macrodef"}}],[11,"fmt","syntax::abi","",172,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"os"}],"output":{"name":"os"}}],[11,"fmt","","",173,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"abi"}],"output":{"name":"abi"}}],[11,"decode","","",173,{"inputs":[{"name":"abi"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",173,{"inputs":[{"name":"abi"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",173,null],[11,"eq","","",173,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"architecture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"architecture"}],"output":{"name":"architecture"}}],[11,"clone","","",175,{"inputs":[{"name":"abidata"}],"output":{"name":"abidata"}}],[11,"clone","","",176,{"inputs":[{"name":"abiarchitecture"}],"output":{"name":"abiarchitecture"}}],[11,"index","","",173,{"inputs":[{"name":"abi"}],"output":{"name":"usize"}}],[11,"data","","",173,{"inputs":[{"name":"abi"}],"output":{"name":"abidata"}}],[11,"name","","",173,{"inputs":[{"name":"abi"}],"output":{"name":"str"}}],[11,"fmt","","",173,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ast_util","",177,{"inputs":[{"name":"idrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",177,{"inputs":[{"name":"idrange"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",177,{"inputs":[{"name":"idrange"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"max","","",177,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"empty","","",177,{"inputs":[{"name":"idrange"}],"output":{"name":"bool"}}],[11,"add","","",177,null],[11,"visit_mod","","",178,null],[11,"visit_foreign_item","","",178,null],[11,"visit_item","","",178,null],[11,"visit_local","","",178,null],[11,"visit_block","","",178,null],[11,"visit_stmt","","",178,null],[11,"visit_pat","","",178,null],[11,"visit_expr","","",178,null],[11,"visit_ty","","",178,null],[11,"visit_generics","","",178,null],[11,"visit_fn","","",178,null],[11,"visit_struct_field","","",178,null],[11,"visit_variant_data","","",178,null],[11,"visit_trait_item","","",178,null],[11,"visit_impl_item","","",178,null],[11,"visit_lifetime","","",178,null],[11,"visit_lifetime_def","","",178,null],[11,"visit_trait_ref","","",178,null],[11,"new","","",179,{"inputs":[{"name":"idrangecomputingvisitor"}],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",179,{"inputs":[{"name":"idrangecomputingvisitor"}],"output":{"name":"idrange"}}],[11,"visit_id","","",179,null],[11,"check_name","syntax::codemap","",43,{"inputs":[{"name":"spanned"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"internedstring"}}],[11,"value_str","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"meta_item_list","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"span","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"span"}}],[11,"name","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"internedstring"}}],[11,"value_str","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"meta_item_list","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"span","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"span"}}],[11,"name","syntax::ptr","",11,{"inputs":[{"name":"p"}],"output":{"name":"internedstring"}}],[11,"value_str","","",11,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"meta_item_list","","",11,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"span","","",11,{"inputs":[{"name":"p"}],"output":{"name":"span"}}],[11,"meta","syntax::codemap","Extract the MetaItem from inside this Attribute.",43,{"inputs":[{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",43,{"inputs":[{"name":"spanned"},{"name":"f"}],"output":{"name":"t"}}],[11,"eq","syntax::attr","",180,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"inlineattr"}],"output":{"name":"inlineattr"}}],[11,"hash","","",181,null],[11,"eq","","",181,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"stability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"stability"}],"output":{"name":"stability"}}],[11,"decode","","",181,{"inputs":[{"name":"stability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",181,{"inputs":[{"name":"stability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",182,null],[11,"fmt","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"partial_cmp","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"decode","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",182,{"inputs":[{"name":"stabilitylevel"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",183,null],[11,"fmt","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"rustcdeprecation"}],"output":{"name":"rustcdeprecation"}}],[11,"partial_cmp","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"rustcdeprecation"}],"output":{"name":"option"}}],[11,"lt","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"le","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"gt","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ge","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"decode","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",183,{"inputs":[{"name":"rustcdeprecation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",184,null],[11,"fmt","","",184,{"inputs":[{"name":"deprecation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"deprecation"}],"output":{"name":"deprecation"}}],[11,"partial_cmp","","",184,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"option"}}],[11,"lt","","",184,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",184,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",184,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",184,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"eq","","",184,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"decode","","",184,{"inputs":[{"name":"deprecation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",184,{"inputs":[{"name":"deprecation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"is_unstable","","",182,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"is_stable","","",182,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"reprattr"}],"output":{"name":"reprattr"}}],[11,"decode","","",185,{"inputs":[{"name":"reprattr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",185,{"inputs":[{"name":"reprattr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"reprattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"is_ffi_safe","","",185,{"inputs":[{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"inttype"}],"output":{"name":"inttype"}}],[11,"decode","","",186,{"inputs":[{"name":"inttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",186,{"inputs":[{"name":"inttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"inttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",186,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"hash","","",186,null],[11,"is_signed","","",186,{"inputs":[{"name":"inttype"}],"output":{"name":"bool"}}],[11,"map_thin_attrs","core::option","",44,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"prepend","","",44,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"append","","",44,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"update","","",44,null],[11,"as_attr_slice","","",44,null],[11,"into_attr_vec","","",44,{"inputs":[{"name":"option"}],"output":{"name":"vec"}}],[11,"into_thin_attrs","collections::vec","",10,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"with_attrs","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"with_attrs","","",11,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"with_attrs","","",11,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"with_attrs","","",11,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"with_attrs","","",11,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"fmt","syntax::codemap","",187,{"inputs":[{"name":"bytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",187,null],[11,"eq","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"fmt","","",188,{"inputs":[{"name":"charpos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",188,null],[11,"eq","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"from_usize","","",187,{"inputs":[{"name":"bytepos"},{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",187,{"inputs":[{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"add","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",187,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",187,{"inputs":[{"name":"bytepos"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",187,{"inputs":[{"name":"bytepos"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",188,{"inputs":[{"name":"charpos"},{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",188,{"inputs":[{"name":"charpos"}],"output":{"name":"usize"}}],[11,"add","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",188,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"hash","","",189,null],[11,"clone","","",189,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",189,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",189,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"spanned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"spanned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"spanned"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"eq","","",189,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"encode","","",189,{"inputs":[{"name":"span"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",189,{"inputs":[{"name":"span"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"span"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"loc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"locwithopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"filemapandline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"filemapandbytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",194,{"inputs":[{"name":"expnformat"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"expnformat"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"fmt","","",194,{"inputs":[{"name":"expnformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",194,null],[11,"clone","","",194,{"inputs":[{"name":"expnformat"}],"output":{"name":"expnformat"}}],[11,"fmt","","",195,{"inputs":[{"name":"nameandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",195,null],[11,"clone","","",195,{"inputs":[{"name":"nameandspan"}],"output":{"name":"nameandspan"}}],[11,"name","","",195,{"inputs":[{"name":"nameandspan"}],"output":{"name":"name"}}],[11,"fmt","","",196,{"inputs":[{"name":"expninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",196,null],[11,"decode","","",197,{"inputs":[{"name":"expnid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",197,{"inputs":[{"name":"expnid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",197,null],[11,"fmt","","",197,{"inputs":[{"name":"expnid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"expnid"}],"output":{"name":"expnid"}}],[11,"eq","","",197,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"from_u32","","",197,{"inputs":[{"name":"expnid"},{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",197,{"inputs":[{"name":"expnid"}],"output":{"name":"u32"}}],[11,"eq","","",198,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",198,{"inputs":[{"name":"lineinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"lineinfo"}],"output":{"name":"lineinfo"}}],[11,"eq","","",199,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"decode","","",199,{"inputs":[{"name":"multibytechar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",199,{"inputs":[{"name":"multibytechar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",199,{"inputs":[{"name":"multibytechar"}],"output":{"name":"multibytechar"}}],[11,"encode","","",200,{"inputs":[{"name":"filemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",200,{"inputs":[{"name":"filemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"filemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",200,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",200,{"inputs":[{"name":"filemap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",200,null],[11,"is_real_file","","",200,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"is_imported","","",200,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"file_exists","","",201,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"bool"}}],[11,"read_file","","",201,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",202,{"inputs":[{"name":"codemap"}],"output":{"name":"codemap"}}],[11,"with_file_loader","","",202,{"inputs":[{"name":"codemap"},{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",202,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",202,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"result"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't\nintend to set the line information yourself, you should use new_filemap_and_lines.",202,{"inputs":[{"name":"codemap"},{"name":"string"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",202,{"inputs":[{"name":"codemap"},{"name":"str"},{"name":"str"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",202,{"inputs":[{"name":"codemap"},{"name":"string"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",202,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",202,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",202,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"span_to_string","","",202,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",202,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",202,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_lines","","",202,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"result"}}],[11,"span_to_snippet","","",202,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"result"}}],[11,"get_filemap","","",202,{"inputs":[{"name":"codemap"},{"name":"str"}],"output":{"name":"rc"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",202,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",202,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"record_expansion","","",202,{"inputs":[{"name":"codemap"},{"name":"expninfo"}],"output":{"name":"expnid"}}],[11,"with_expn_info","","",202,{"inputs":[{"name":"codemap"},{"name":"expnid"},{"name":"f"}],"output":{"name":"t"}}],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",202,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"bool"}}],[11,"count_lines","","",202,{"inputs":[{"name":"codemap"}],"output":{"name":"usize"}}],[11,"fmt","","",203,{"inputs":[{"name":"spanlineserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",203,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"spanlineserror"}],"output":{"name":"spanlineserror"}}],[11,"fmt","","",204,{"inputs":[{"name":"spansnippeterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",204,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"spansnippeterror"}],"output":{"name":"spansnippeterror"}}],[11,"fmt","","",205,{"inputs":[{"name":"distinctsources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"distinctsources"}],"output":{"name":"distinctsources"}}],[11,"fmt","","",206,{"inputs":[{"name":"malformedcodemappositions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",206,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"malformedcodemappositions"}],"output":{"name":"malformedcodemappositions"}}],[11,"fold_foreign_mod","syntax::config","",207,{"inputs":[{"name":"context"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_underscore","","",207,{"inputs":[{"name":"context"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_expr","","",207,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",207,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",207,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_mac","","",207,{"inputs":[{"name":"context"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"fold_item","","",207,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_attribute","","",208,{"inputs":[{"name":"cfgattrfolder"},{"name":"spanned"}],"output":{"name":"option"}}],[11,"fold_mac","","",208,{"inputs":[{"name":"cfgattrfolder"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"visit_stmt","","",209,null],[11,"visit_expr","","",209,null],[11,"visit_foreign_item","","",209,null],[11,"visit_item","","",209,null],[11,"visit_impl_item","","",209,null],[11,"visit_trait_item","","",209,null],[11,"visit_struct_field","","",209,null],[11,"visit_variant","","",209,null],[11,"visit_arm","","",209,null],[11,"visit_mac","","",209,null],[11,"emit_error","","",210,null],[11,"flag_gated","","",210,null],[11,"emit_error","","",211,null],[11,"flag_gated","","",211,null],[11,"eq","syntax::feature_gate","",212,{"inputs":[{"name":"gatedcfgattr"},{"name":"gatedcfgattr"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"gatedcfgattr"},{"name":"gatedcfgattr"}],"output":{"name":"bool"}}],[11,"fmt","","",212,{"inputs":[{"name":"gatedcfgattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",213,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"fmt","","",213,{"inputs":[{"name":"gatedcfg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",212,{"inputs":[{"name":"gatedcfgattr"},{"name":"gatedcfgattr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",212,{"inputs":[{"name":"gatedcfgattr"},{"name":"gatedcfgattr"}],"output":{"name":"option"}}],[11,"check_and_emit","","",212,null],[11,"gate","","",213,{"inputs":[{"name":"gatedcfg"},{"name":"spanned"}],"output":{"name":"option"}}],[11,"fmt","","",214,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",214,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"eq","","",214,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"fmt","","",215,{"inputs":[{"name":"attributegate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"attributegate"}],"output":{"name":"attributegate"}}],[11,"eq","","",215,{"inputs":[{"name":"attributegate"},{"name":"attributegate"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"attributegate"},{"name":"attributegate"}],"output":{"name":"bool"}}],[11,"new","","",216,{"inputs":[{"name":"features"}],"output":{"name":"features"}}],[11,"visit_mac","","",217,null],[11,"visit_attribute","","",217,null],[11,"visit_expr","","",217,null],[11,"visit_attribute","","",218,null],[11,"visit_name","","",218,null],[11,"visit_item","","",218,null],[11,"visit_variant_data","","",218,null],[11,"visit_foreign_item","","",218,null],[11,"visit_expr","","",218,null],[11,"visit_pat","","",218,null],[11,"visit_fn","","",218,null],[11,"visit_trait_item","","",218,null],[11,"visit_impl_item","","",218,null],[11,"clone","","",219,{"inputs":[{"name":"unstablefeatures"}],"output":{"name":"unstablefeatures"}}],[11,"cmp","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",11,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"u"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",11,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",11,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[11,"clone","","",11,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"fmt","","",11,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"p"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"empty","","",11,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"from_vec","","",11,{"inputs":[{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",11,{"inputs":[{"name":"p"}],"output":{"name":"vec"}}],[11,"as_slice","","",11,null],[11,"move_iter","","",11,{"inputs":[{"name":"p"}],"output":{"name":"intoiter"}}],[11,"map","","",11,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",11,null],[11,"default","","",11,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"clone","","",11,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"from","","",11,{"inputs":[{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"into","","",11,{"inputs":[{"name":"p"}],"output":{"name":"vec"}}],[11,"from_iter","","",11,{"inputs":[{"name":"p"},{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",11,null],[11,"encode","","",11,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"p"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","syntax::show_span","",220,{"inputs":[{"name":"mode"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_expr","","",221,null],[11,"visit_pat","","",221,null],[11,"visit_ty","","",221,null],[11,"visit_mac","","",221,null],[11,"fold_crate","syntax::std_inject","",222,{"inputs":[{"name":"crateinjector"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_crate","","",223,{"inputs":[{"name":"preludeinjector"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_item","","",223,{"inputs":[{"name":"preludeinjector"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_mod","","",223,{"inputs":[{"name":"preludeinjector"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_crate","syntax::test","",224,{"inputs":[{"name":"testharnessgenerator"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_item","","",224,{"inputs":[{"name":"testharnessgenerator"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_mod","","",224,{"inputs":[{"name":"testharnessgenerator"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_item","","",225,{"inputs":[{"name":"entrypointcleaner"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"eq","","",226,{"inputs":[{"name":"hastestsignature"},{"name":"hastestsignature"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"hastestsignature"},{"name":"hastestsignature"}],"output":{"name":"bool"}}],[11,"eq","syntax::visit","",227,{"inputs":[{"name":"fnkind"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"fnkind"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"clone","","",227,{"inputs":[{"name":"fnkind"}],"output":{"name":"fnkind"}}],[11,"eq","syntax::print::pp","",228,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"breaks"}],"output":{"name":"breaks"}}],[11,"clone","","",229,{"inputs":[{"name":"breaktoken"}],"output":{"name":"breaktoken"}}],[11,"clone","","",230,{"inputs":[{"name":"begintoken"}],"output":{"name":"begintoken"}}],[11,"clone","","",231,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_eof","","",231,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",231,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"printstackbreak"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",233,{"inputs":[{"name":"printstackelem"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",234,{"inputs":[{"name":"printer"}],"output":{"name":"token"}}],[11,"replace_last_token","","",234,null],[11,"pretty_print","","",234,{"inputs":[{"name":"printer"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",234,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"scan_push","","",234,null],[11,"scan_pop","","",234,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_top","","",234,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",234,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"advance_right","","",234,null],[11,"advance_left","","",234,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"check_stack","","",234,null],[11,"print_newline","","",234,{"inputs":[{"name":"printer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",234,null],[11,"get_top","","",234,{"inputs":[{"name":"printer"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",234,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",234,{"inputs":[{"name":"printer"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[11,"clone","syntax::print::pprust","",235,{"inputs":[{"name":"noann"}],"output":{"name":"noann"}}],[11,"clone","","",236,{"inputs":[{"name":"currentcommentandliteral"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",237,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",237,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",237,{"inputs":[{"name":"state"}],"output":{"name":"printer"}}],[11,"boxes","","",237,{"inputs":[{"name":"state"}],"output":{"name":"vec"}}],[11,"comments","","",237,{"inputs":[{"name":"state"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",237,{"inputs":[{"name":"state"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",237,{"inputs":[{"name":"state"}],"output":{"name":"option"}}],[11,"cbox","","",237,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"word_nbsp","","",237,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",237,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",237,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"bclose_","","",237,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",237,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",237,{"inputs":[{"name":"state"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",237,{"inputs":[{"name":"state"}],"output":{"name":"bool"}}],[11,"break_offset_if_not_bol","","",237,{"inputs":[{"name":"state"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",237,{"inputs":[{"name":"state"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",237,null],[11,"commasep_exprs","","",237,null],[11,"print_mod","","",237,null],[11,"print_foreign_mod","","",237,null],[11,"print_opt_lifetime","","",237,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",237,{"inputs":[{"name":"state"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",237,{"inputs":[{"name":"state"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",237,{"inputs":[{"name":"state"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",237,{"inputs":[{"name":"state"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",237,null],[11,"print_visibility","","",237,{"inputs":[{"name":"state"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",237,{"inputs":[{"name":"state"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",237,{"inputs":[{"name":"state"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",237,null],[11,"print_variant","","",237,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_method_sig","","",237,{"inputs":[{"name":"state"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",237,{"inputs":[{"name":"state"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",237,{"inputs":[{"name":"state"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",237,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_block","","",237,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",237,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_with_attrs","","",237,null],[11,"print_block_unclosed_indent","","",237,{"inputs":[{"name":"state"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",237,null],[11,"print_block_maybe_unclosed","","",237,null],[11,"print_if","","",237,{"inputs":[{"name":"state"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",237,{"inputs":[{"name":"state"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",237,{"inputs":[{"name":"state"},{"name":"spanned"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"check_expr_bin_needs_paren","","",237,{"inputs":[{"name":"state"},{"name":"expr"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"print_expr_maybe_paren","","",237,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",237,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",237,{"inputs":[{"name":"state"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",237,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_ident","","",237,{"inputs":[{"name":"state"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",237,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",237,{"inputs":[{"name":"state"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",237,{"inputs":[{"name":"state"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",237,{"inputs":[{"name":"state"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",237,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"option"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args","","",237,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",237,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",237,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",237,{"inputs":[{"name":"state"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",237,null],[11,"print_lifetime","","",237,{"inputs":[{"name":"state"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",237,{"inputs":[{"name":"state"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",237,{"inputs":[{"name":"state"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",237,{"inputs":[{"name":"state"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",237,{"inputs":[{"name":"state"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",237,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_mutability","","",237,{"inputs":[{"name":"state"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",237,{"inputs":[{"name":"state"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",237,{"inputs":[{"name":"state"},{"name":"arg"}],"output":{"name":"result"}}],[11,"print_fn_output","","",237,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",237,{"inputs":[{"name":"state"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"},{"name":"option"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",237,{"inputs":[{"name":"state"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",237,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",237,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",237,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",237,{"inputs":[{"name":"state"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",237,{"inputs":[{"name":"state"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"deref","clippy::utils","",0,{"inputs":[{"name":"diagnosticwrapper"}],"output":{"name":"diagnosticbuilder"}}],[11,"drop","","",238,{"inputs":[{"name":"limitstack"}],"output":null}],[11,"new","","",238,{"inputs":[{"name":"limitstack"},{"name":"u64"}],"output":{"name":"limitstack"}}],[11,"limit","","",238,{"inputs":[{"name":"limitstack"}],"output":{"name":"u64"}}],[11,"push_attrs","","",238,null],[11,"pop_attrs","","",238,null],[0,"consts","clippy","",null,null],[4,"FloatWidth","clippy::consts","",null,null],[13,"Fw32","","",239,null],[13,"Fw64","","",239,null],[13,"FwAny","","",239,null],[4,"Constant","","a Lit_-like enum to fold constant `Expr`s into",null,null],[13,"ConstantStr","","a String \"abc\"",240,null],[13,"ConstantBinary","","a Binary String b\"abc\"",240,null],[13,"ConstantByte","","a single byte b'a'",240,null],[13,"ConstantChar","","a single char 'a'",240,null],[13,"ConstantInt","","an integer",240,null],[13,"ConstantFloat","","a float with given type",240,null],[13,"ConstantBool","","true or false",240,null],[13,"ConstantVec","","an array of constants",240,null],[13,"ConstantRepeat","","also an array, but with only one constant, repeated N times",240,null],[13,"ConstantTuple","","a tuple of constants",240,null],[5,"is_negative","","is the given LitIntType negative?",null,{"inputs":[{"name":"litinttype"}],"output":{"name":"bool"}}],[5,"constant","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"constant_simple","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[11,"clone","","",239,{"inputs":[{"name":"floatwidth"}],"output":{"name":"floatwidth"}}],[11,"fmt","","",239,{"inputs":[{"name":"floatwidth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",239,{"inputs":[{"name":"floatwidth"},{"name":"floatwidth"}],"output":{"name":"bool"}}],[11,"ne","","",239,{"inputs":[{"name":"floatwidth"},{"name":"floatwidth"}],"output":{"name":"bool"}}],[11,"from","","",239,{"inputs":[{"name":"floatwidth"},{"name":"floatty"}],"output":{"name":"floatwidth"}}],[11,"clone","","",240,{"inputs":[{"name":"constant"}],"output":{"name":"constant"}}],[11,"fmt","","",240,{"inputs":[{"name":"constant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_float","","convert this constant to a f64, if possible",240,{"inputs":[{"name":"constant"}],"output":{"name":"option"}}],[11,"eq","","",240,{"inputs":[{"name":"constant"},{"name":"constant"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",240,{"inputs":[{"name":"constant"},{"name":"constant"}],"output":{"name":"option"}}],[11,"fmt","","",240,{"inputs":[{"name":"constant"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"types","clippy","",null,null],[3,"TypePass","clippy::types","Handles all the linting of funky types",null,null],[3,"LetPass","","",null,null],[3,"UnitCmp","","",null,null],[3,"CastPass","","",null,null],[3,"TypeComplexityPass","","",null,null],[7,"BOX_VEC","","",null,null],[7,"LINKEDLIST","","",null,null],[7,"LET_UNIT_VALUE","","",null,null],[7,"UNIT_CMP","","",null,null],[7,"CAST_PRECISION_LOSS","","",null,null],[7,"CAST_SIGN_LOSS","","",null,null],[7,"CAST_POSSIBLE_TRUNCATION","","",null,null],[7,"CAST_POSSIBLE_WRAP","","",null,null],[7,"TYPE_COMPLEXITY","","",null,null],[11,"get_lints","","",241,{"inputs":[{"name":"typepass"}],"output":{"name":"lintarray"}}],[11,"check_ty","","",241,{"inputs":[{"name":"typepass"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[11,"get_lints","","",242,{"inputs":[{"name":"letpass"}],"output":{"name":"lintarray"}}],[11,"check_decl","","",242,{"inputs":[{"name":"letpass"},{"name":"latecontext"},{"name":"decl"}],"output":null}],[11,"get_lints","","",243,{"inputs":[{"name":"unitcmp"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",243,{"inputs":[{"name":"unitcmp"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",244,{"inputs":[{"name":"castpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",244,{"inputs":[{"name":"castpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",245,{"inputs":[{"name":"typecomplexitypass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",245,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_struct_field","","",245,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"structfield"}],"output":null}],[11,"check_item","","",245,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_trait_item","","",245,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"check_impl_item","","",245,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_local","","",245,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"local"}],"output":null}],[0,"misc","clippy","",null,null],[3,"TopLevelRefPass","clippy::misc","",null,null],[3,"CmpNan","","",null,null],[3,"FloatCmp","","",null,null],[3,"CmpOwned","","",null,null],[3,"ModuloOne","","",null,null],[3,"PatternPass","","",null,null],[3,"UsedUnderscoreBinding","","",null,null],[7,"TOPLEVEL_REF_ARG","","",null,null],[7,"CMP_NAN","","",null,null],[7,"FLOAT_CMP","","",null,null],[7,"CMP_OWNED","","",null,null],[7,"MODULO_ONE","","",null,null],[7,"REDUNDANT_PATTERN","","",null,null],[7,"USED_UNDERSCORE_BINDING","","",null,null],[11,"get_lints","","",246,{"inputs":[{"name":"toplevelrefpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",246,{"inputs":[{"name":"toplevelrefpass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_stmt","","",246,{"inputs":[{"name":"toplevelrefpass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[11,"clone","","",247,{"inputs":[{"name":"cmpnan"}],"output":{"name":"cmpnan"}}],[11,"get_lints","","",247,{"inputs":[{"name":"cmpnan"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",247,{"inputs":[{"name":"cmpnan"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",248,{"inputs":[{"name":"floatcmp"}],"output":{"name":"floatcmp"}}],[11,"get_lints","","",248,{"inputs":[{"name":"floatcmp"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",248,{"inputs":[{"name":"floatcmp"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",249,{"inputs":[{"name":"cmpowned"}],"output":{"name":"cmpowned"}}],[11,"get_lints","","",249,{"inputs":[{"name":"cmpowned"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",249,{"inputs":[{"name":"cmpowned"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",250,{"inputs":[{"name":"moduloone"}],"output":{"name":"moduloone"}}],[11,"get_lints","","",250,{"inputs":[{"name":"moduloone"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",250,{"inputs":[{"name":"moduloone"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",251,{"inputs":[{"name":"patternpass"}],"output":{"name":"patternpass"}}],[11,"get_lints","","",251,{"inputs":[{"name":"patternpass"}],"output":{"name":"lintarray"}}],[11,"check_pat","","",251,{"inputs":[{"name":"patternpass"},{"name":"latecontext"},{"name":"pat"}],"output":null}],[11,"clone","","",252,{"inputs":[{"name":"usedunderscorebinding"}],"output":{"name":"usedunderscorebinding"}}],[11,"get_lints","","",252,{"inputs":[{"name":"usedunderscorebinding"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",252,{"inputs":[{"name":"usedunderscorebinding"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"eq_op","clippy","",null,null],[3,"EqOp","clippy::eq_op","",null,null],[7,"EQ_OP","","",null,null],[11,"clone","","",253,{"inputs":[{"name":"eqop"}],"output":{"name":"eqop"}}],[11,"get_lints","","",253,{"inputs":[{"name":"eqop"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",253,{"inputs":[{"name":"eqop"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"bit_mask","clippy","",null,null],[3,"BitMask","clippy::bit_mask","Checks for incompatible bit masks in comparisons, e.g. `x & 1 == 2`.\nThis cannot work because the bit that makes up the value two was\nzeroed out by the bit-and with 1. So the formula for detecting if an\nexpression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\nis one of {`&`, '|'} and `<cmp_op>` is one of {`!=`, `>=`, `>` ,\n`!=`, `>=`, `>`}) can be determined from the following table:",null,null],[7,"BAD_BIT_MASK","","",null,null],[7,"INEFFECTIVE_BIT_MASK","","",null,null],[11,"clone","","",254,{"inputs":[{"name":"bitmask"}],"output":{"name":"bitmask"}}],[11,"get_lints","","",254,{"inputs":[{"name":"bitmask"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",254,{"inputs":[{"name":"bitmask"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"ptr_arg","clippy","Checks for usage of &Vec[_] and &String",null,null],[3,"PtrArg","clippy::ptr_arg","",null,null],[7,"PTR_ARG","","",null,null],[11,"clone","","",255,{"inputs":[{"name":"ptrarg"}],"output":{"name":"ptrarg"}}],[11,"get_lints","","",255,{"inputs":[{"name":"ptrarg"}],"output":{"name":"lintarray"}}],[11,"check_item","","",255,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",255,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",255,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"needless_bool","clippy","Checks for needless boolean results of if-else expressions",null,null],[3,"NeedlessBool","clippy::needless_bool","",null,null],[7,"NEEDLESS_BOOL","","",null,null],[11,"clone","","",256,{"inputs":[{"name":"needlessbool"}],"output":{"name":"needlessbool"}}],[11,"get_lints","","",256,{"inputs":[{"name":"needlessbool"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",256,{"inputs":[{"name":"needlessbool"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"approx_const","clippy","",null,null],[3,"ApproxConstant","clippy::approx_const","",null,null],[7,"APPROX_CONSTANT","","",null,null],[11,"clone","","",257,{"inputs":[{"name":"approxconstant"}],"output":{"name":"approxconstant"}}],[11,"get_lints","","",257,{"inputs":[{"name":"approxconstant"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",257,{"inputs":[{"name":"approxconstant"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"eta_reduction","clippy","",null,null],[3,"EtaPass","clippy::eta_reduction","",null,null],[7,"REDUNDANT_CLOSURE","","",null,null],[11,"get_lints","","",258,{"inputs":[{"name":"etapass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",258,{"inputs":[{"name":"etapass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"identity_op","clippy","",null,null],[3,"IdentityOp","clippy::identity_op","",null,null],[7,"IDENTITY_OP","","",null,null],[11,"clone","","",259,{"inputs":[{"name":"identityop"}],"output":{"name":"identityop"}}],[11,"get_lints","","",259,{"inputs":[{"name":"identityop"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",259,{"inputs":[{"name":"identityop"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"minmax","clippy","",null,null],[3,"MinMaxPass","clippy::minmax","",null,null],[7,"MIN_MAX","","",null,null],[11,"get_lints","","",260,{"inputs":[{"name":"minmaxpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",260,{"inputs":[{"name":"minmaxpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"mut_mut","clippy","",null,null],[3,"MutMut","clippy::mut_mut","",null,null],[7,"MUT_MUT","","",null,null],[11,"clone","","",261,{"inputs":[{"name":"mutmut"}],"output":{"name":"mutmut"}}],[11,"get_lints","","",261,{"inputs":[{"name":"mutmut"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",261,{"inputs":[{"name":"mutmut"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_ty","","",261,{"inputs":[{"name":"mutmut"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[0,"mut_reference","clippy","",null,null],[3,"UnnecessaryMutPassed","clippy::mut_reference","",null,null],[7,"UNNECESSARY_MUT_PASSED","","",null,null],[11,"clone","","",262,{"inputs":[{"name":"unnecessarymutpassed"}],"output":{"name":"unnecessarymutpassed"}}],[11,"get_lints","","",262,{"inputs":[{"name":"unnecessarymutpassed"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",262,{"inputs":[{"name":"unnecessarymutpassed"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"len_zero","clippy","",null,null],[3,"LenZero","clippy::len_zero","",null,null],[7,"LEN_ZERO","","",null,null],[7,"LEN_WITHOUT_IS_EMPTY","","",null,null],[11,"clone","","",263,{"inputs":[{"name":"lenzero"}],"output":{"name":"lenzero"}}],[11,"get_lints","","",263,{"inputs":[{"name":"lenzero"}],"output":{"name":"lintarray"}}],[11,"check_item","","",263,{"inputs":[{"name":"lenzero"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_expr","","",263,{"inputs":[{"name":"lenzero"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"attrs","clippy","checks for attributes",null,null],[3,"AttrPass","clippy::attrs","",null,null],[7,"INLINE_ALWAYS","","",null,null],[7,"DEPRECATED_SEMVER","","",null,null],[11,"clone","","",264,{"inputs":[{"name":"attrpass"}],"output":{"name":"attrpass"}}],[11,"get_lints","","",264,{"inputs":[{"name":"attrpass"}],"output":{"name":"lintarray"}}],[11,"check_attribute","","",264,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"attribute"}],"output":null}],[11,"check_item","","",264,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",264,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",264,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"collapsible_if","clippy","Checks for if expressions that contain only an if expression.",null,null],[3,"CollapsibleIf","clippy::collapsible_if","",null,null],[7,"COLLAPSIBLE_IF","","",null,null],[11,"clone","","",265,{"inputs":[{"name":"collapsibleif"}],"output":{"name":"collapsibleif"}}],[11,"get_lints","","",265,{"inputs":[{"name":"collapsibleif"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",265,{"inputs":[{"name":"collapsibleif"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"block_in_if_condition","clippy","",null,null],[3,"BlockInIfCondition","clippy::block_in_if_condition","",null,null],[7,"BLOCK_IN_IF_CONDITION_EXPR","","",null,null],[7,"BLOCK_IN_IF_CONDITION_STMT","","",null,null],[11,"clone","","",266,{"inputs":[{"name":"blockinifcondition"}],"output":{"name":"blockinifcondition"}}],[11,"get_lints","","",266,{"inputs":[{"name":"blockinifcondition"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",266,{"inputs":[{"name":"blockinifcondition"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"unicode","clippy","",null,null],[3,"Unicode","clippy::unicode","",null,null],[7,"ZERO_WIDTH_SPACE","","",null,null],[7,"NON_ASCII_LITERAL","","",null,null],[7,"UNICODE_NOT_NFC","","",null,null],[11,"clone","","",267,{"inputs":[{"name":"unicode"}],"output":{"name":"unicode"}}],[11,"get_lints","","",267,{"inputs":[{"name":"unicode"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",267,{"inputs":[{"name":"unicode"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"shadow","clippy","",null,null],[3,"ShadowPass","clippy::shadow","",null,null],[7,"SHADOW_SAME","","",null,null],[7,"SHADOW_REUSE","","",null,null],[7,"SHADOW_UNRELATED","","",null,null],[11,"clone","","",268,{"inputs":[{"name":"shadowpass"}],"output":{"name":"shadowpass"}}],[11,"get_lints","","",268,{"inputs":[{"name":"shadowpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",268,{"inputs":[{"name":"shadowpass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"strings","clippy","This LintPass catches both string addition and string addition + assignment",null,null],[3,"StringAdd","clippy::strings","",null,null],[7,"STRING_ADD_ASSIGN","","",null,null],[7,"STRING_ADD","","",null,null],[11,"clone","","",269,{"inputs":[{"name":"stringadd"}],"output":{"name":"stringadd"}}],[11,"get_lints","","",269,{"inputs":[{"name":"stringadd"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",269,{"inputs":[{"name":"stringadd"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"methods","clippy","",null,null],[3,"MethodsPass","clippy::methods","",null,null],[7,"OPTION_UNWRAP_USED","","",null,null],[7,"RESULT_UNWRAP_USED","","",null,null],[7,"STR_TO_STRING","","",null,null],[7,"STRING_TO_STRING","","",null,null],[7,"SHOULD_IMPLEMENT_TRAIT","","",null,null],[7,"WRONG_SELF_CONVENTION","","",null,null],[7,"WRONG_PUB_SELF_CONVENTION","","",null,null],[7,"OK_EXPECT","","",null,null],[7,"OPTION_MAP_UNWRAP_OR","","",null,null],[7,"OPTION_MAP_UNWRAP_OR_ELSE","","",null,null],[7,"FILTER_NEXT","","",null,null],[7,"SEARCH_IS_SOME","","",null,null],[7,"OR_FUN_CALL","","",null,null],[11,"clone","","",270,{"inputs":[{"name":"methodspass"}],"output":{"name":"methodspass"}}],[11,"get_lints","","",270,{"inputs":[{"name":"methodspass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",270,{"inputs":[{"name":"methodspass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_item","","",270,{"inputs":[{"name":"methodspass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[0,"returns","clippy","",null,null],[3,"ReturnPass","clippy::returns","",null,null],[7,"NEEDLESS_RETURN","","",null,null],[7,"LET_AND_RETURN","","",null,null],[11,"clone","","",271,{"inputs":[{"name":"returnpass"}],"output":{"name":"returnpass"}}],[11,"get_lints","","",271,{"inputs":[{"name":"returnpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",271,{"inputs":[{"name":"returnpass"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_block","","",271,{"inputs":[{"name":"returnpass"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[0,"lifetimes","clippy","",null,null],[3,"LifetimePass","clippy::lifetimes","",null,null],[7,"NEEDLESS_LIFETIMES","","",null,null],[7,"UNUSED_LIFETIMES","","",null,null],[11,"clone","","",272,{"inputs":[{"name":"lifetimepass"}],"output":{"name":"lifetimepass"}}],[11,"get_lints","","",272,{"inputs":[{"name":"lifetimepass"}],"output":{"name":"lintarray"}}],[11,"check_item","","",272,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",272,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",272,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"loops","clippy","",null,null],[3,"LoopsPass","clippy::loops","",null,null],[7,"NEEDLESS_RANGE_LOOP","","",null,null],[7,"EXPLICIT_ITER_LOOP","","",null,null],[7,"ITER_NEXT_LOOP","","",null,null],[7,"WHILE_LET_LOOP","","",null,null],[7,"UNUSED_COLLECT","","",null,null],[7,"REVERSE_RANGE_LOOP","","",null,null],[7,"EXPLICIT_COUNTER_LOOP","","",null,null],[7,"EMPTY_LOOP","","",null,null],[7,"WHILE_LET_ON_ITERATOR","","",null,null],[11,"clone","","",273,{"inputs":[{"name":"loopspass"}],"output":{"name":"loopspass"}}],[11,"get_lints","","",273,{"inputs":[{"name":"loopspass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",273,{"inputs":[{"name":"loopspass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_stmt","","",273,{"inputs":[{"name":"loopspass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[0,"ranges","clippy","",null,null],[3,"StepByZero","clippy::ranges","",null,null],[7,"RANGE_STEP_BY_ZERO","","",null,null],[7,"RANGE_ZIP_WITH_LEN","","",null,null],[11,"clone","","",274,{"inputs":[{"name":"stepbyzero"}],"output":{"name":"stepbyzero"}}],[11,"get_lints","","",274,{"inputs":[{"name":"stepbyzero"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",274,{"inputs":[{"name":"stepbyzero"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"map_clone","clippy","",null,null],[3,"MapClonePass","clippy::map_clone","",null,null],[7,"MAP_CLONE","","",null,null],[11,"clone","","",275,{"inputs":[{"name":"mapclonepass"}],"output":{"name":"mapclonepass"}}],[11,"check_expr","","",275,{"inputs":[{"name":"mapclonepass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",275,{"inputs":[{"name":"mapclonepass"}],"output":{"name":"lintarray"}}],[0,"matches","clippy","",null,null],[3,"MatchPass","clippy::matches","",null,null],[3,"SpannedRange","","",null,null],[12,"span","","",276,null],[12,"node","","",276,null],[5,"overlapping","","",null,null],[7,"SINGLE_MATCH","","",null,null],[7,"MATCH_REF_PATS","","",null,null],[7,"MATCH_BOOL","","",null,null],[7,"MATCH_OVERLAPPING_ARM","","",null,null],[11,"get_lints","","",277,{"inputs":[{"name":"matchpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",277,{"inputs":[{"name":"matchpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"eq","","",276,{"inputs":[{"name":"spannedrange"},{"name":"spannedrange"}],"output":{"name":"bool"}}],[11,"ne","","",276,{"inputs":[{"name":"spannedrange"},{"name":"spannedrange"}],"output":{"name":"bool"}}],[11,"fmt","","",276,{"inputs":[{"name":"spannedrange"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"precedence","clippy","",null,null],[3,"Precedence","clippy::precedence","",null,null],[7,"PRECEDENCE","","",null,null],[11,"clone","","",278,{"inputs":[{"name":"precedence"}],"output":{"name":"precedence"}}],[11,"get_lints","","",278,{"inputs":[{"name":"precedence"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",278,{"inputs":[{"name":"precedence"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[0,"mutex_atomic","clippy","Checks for uses of Mutex where an atomic value could be used",null,null],[3,"MutexAtomic","clippy::mutex_atomic","",null,null],[7,"MUTEX_ATOMIC","","",null,null],[7,"MUTEX_INTEGER","","",null,null],[11,"get_lints","","",279,{"inputs":[{"name":"mutexatomic"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",279,{"inputs":[{"name":"mutexatomic"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"zero_div_zero","clippy","",null,null],[3,"ZeroDivZeroPass","clippy::zero_div_zero","ZeroDivZeroPass is a pass that checks for a binary expression that consists\nof 0.0/0.0, which is always NaN. It is more clear to replace instances of\n0.0/0.0 with std::f32::NaN or std::f64::NaN, depending on the precision.",null,null],[7,"ZERO_DIVIDED_BY_ZERO","","",null,null],[11,"get_lints","","",280,{"inputs":[{"name":"zerodivzeropass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",280,{"inputs":[{"name":"zerodivzeropass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"open_options","clippy","",null,null],[3,"NonSensicalOpenOptions","clippy::open_options","",null,null],[7,"NONSENSICAL_OPEN_OPTIONS","","",null,null],[11,"clone","","",281,{"inputs":[{"name":"nonsensicalopenoptions"}],"output":{"name":"nonsensicalopenoptions"}}],[11,"get_lints","","",281,{"inputs":[{"name":"nonsensicalopenoptions"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",281,{"inputs":[{"name":"nonsensicalopenoptions"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"needless_features","clippy","Checks for usage of nightly features that have simple stable equivalents",null,null],[3,"NeedlessFeaturesPass","clippy::needless_features","",null,null],[7,"UNSTABLE_AS_SLICE","","",null,null],[7,"UNSTABLE_AS_MUT_SLICE","","",null,null],[11,"clone","","",282,{"inputs":[{"name":"needlessfeaturespass"}],"output":{"name":"needlessfeaturespass"}}],[11,"get_lints","","",282,{"inputs":[{"name":"needlessfeaturespass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",282,{"inputs":[{"name":"needlessfeaturespass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"needless_update","clippy","",null,null],[3,"NeedlessUpdatePass","clippy::needless_update","",null,null],[7,"NEEDLESS_UPDATE","","",null,null],[11,"clone","","",283,{"inputs":[{"name":"needlessupdatepass"}],"output":{"name":"needlessupdatepass"}}],[11,"get_lints","","",283,{"inputs":[{"name":"needlessupdatepass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",283,{"inputs":[{"name":"needlessupdatepass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"no_effect","clippy","",null,null],[3,"NoEffectPass","clippy::no_effect","",null,null],[7,"NO_EFFECT","","",null,null],[11,"clone","","",284,{"inputs":[{"name":"noeffectpass"}],"output":{"name":"noeffectpass"}}],[11,"get_lints","","",284,{"inputs":[{"name":"noeffectpass"}],"output":{"name":"lintarray"}}],[11,"check_stmt","","",284,{"inputs":[{"name":"noeffectpass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[0,"temporary_assignment","clippy","",null,null],[3,"TemporaryAssignmentPass","clippy::temporary_assignment","",null,null],[7,"TEMPORARY_ASSIGNMENT","","",null,null],[11,"clone","","",285,{"inputs":[{"name":"temporaryassignmentpass"}],"output":{"name":"temporaryassignmentpass"}}],[11,"get_lints","","",285,{"inputs":[{"name":"temporaryassignmentpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",285,{"inputs":[{"name":"temporaryassignmentpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"transmute","clippy","",null,null],[3,"UselessTransmute","clippy::transmute","",null,null],[7,"USELESS_TRANSMUTE","","",null,null],[11,"get_lints","","",286,{"inputs":[{"name":"uselesstransmute"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",286,{"inputs":[{"name":"uselesstransmute"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"cyclomatic_complexity","clippy","calculate cyclomatic complexity and warn about overly complex functions",null,null],[3,"CyclomaticComplexity","clippy::cyclomatic_complexity","",null,null],[7,"CYCLOMATIC_COMPLEXITY","","",null,null],[11,"new","","",287,{"inputs":[{"name":"cyclomaticcomplexity"},{"name":"u64"}],"output":{"name":"self"}}],[11,"get_lints","","",287,{"inputs":[{"name":"cyclomaticcomplexity"}],"output":{"name":"lintarray"}}],[11,"check_item","","",287,{"inputs":[{"name":"cyclomaticcomplexity"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",287,{"inputs":[{"name":"cyclomaticcomplexity"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",287,{"inputs":[{"name":"cyclomaticcomplexity"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"enter_lint_attrs","","",287,null],[11,"exit_lint_attrs","","",287,null],[0,"escape","clippy","",null,null],[3,"EscapePass","clippy::escape","",null,null],[7,"BOXED_LOCAL","","",null,null],[11,"get_lints","","",288,{"inputs":[{"name":"escapepass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",288,{"inputs":[{"name":"escapepass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"entry","clippy","",null,null],[3,"HashMapLint","clippy::entry","",null,null],[7,"MAP_ENTRY","","",null,null],[11,"clone","","",289,{"inputs":[{"name":"hashmaplint"}],"output":{"name":"hashmaplint"}}],[11,"get_lints","","",289,{"inputs":[{"name":"hashmaplint"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",289,{"inputs":[{"name":"hashmaplint"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"misc_early","clippy","",null,null],[3,"MiscEarly","clippy::misc_early","",null,null],[7,"UNNEEDED_FIELD_PATTERN","","",null,null],[7,"DUPLICATE_UNDERSCORE_ARGUMENT","","",null,null],[11,"clone","","",290,{"inputs":[{"name":"miscearly"}],"output":{"name":"miscearly"}}],[11,"get_lints","","",290,{"inputs":[{"name":"miscearly"}],"output":{"name":"lintarray"}}],[11,"check_pat","","",290,{"inputs":[{"name":"miscearly"},{"name":"earlycontext"},{"name":"pat"}],"output":null}],[11,"check_fn","","",290,{"inputs":[{"name":"miscearly"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"array_indexing","clippy","",null,null],[3,"ArrayIndexing","clippy::array_indexing","",null,null],[7,"OUT_OF_BOUNDS_INDEXING","","",null,null],[11,"clone","","",291,{"inputs":[{"name":"arrayindexing"}],"output":{"name":"arrayindexing"}}],[11,"get_lints","","",291,{"inputs":[{"name":"arrayindexing"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",291,{"inputs":[{"name":"arrayindexing"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"panic","clippy","",null,null],[3,"PanicPass","clippy::panic","",null,null],[7,"PANIC_PARAMS","","",null,null],[11,"get_lints","","",292,{"inputs":[{"name":"panicpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",292,{"inputs":[{"name":"panicpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[14,"if_let_chain!","clippy","Produce a nested chain of if-lets and ifs from the patterns:",null,null]],"paths":[[3,"DiagnosticWrapper"],[3,"DiagnosticBuilder"],[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[3,"Vec"],[3,"P"],[3,"Registry"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[4,"ColorConfig"],[3,"BasicEmitter"],[3,"EmitterWriter"],[4,"Destination"],[3,"JsonEmitter"],[3,"Diagnostic"],[3,"DiagnosticSpan"],[3,"DiagnosticCode"],[4,"RenderSpan"],[3,"FatalError"],[3,"ExplicitBug"],[3,"Handler"],[4,"Level"],[4,"Annotatable"],[3,"MacEager"],[3,"DummyResult"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[3,"PatIdentFinder"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"Marker"],[3,"MacroExterminator"],[4,"SyntaxContext_"],[4,"TokenTree"],[3,"Spanned"],[4,"Option"],[3,"Ident"],[3,"Path"],[3,"Ty"],[3,"Block"],[3,"Generics"],[3,"WhereClause"],[3,"Arm"],[3,"Arg"],[3,"TtFrame"],[3,"TtReader"],[4,"LockstepIterSize"],[4,"TokenTreeOrTokenTreeVec"],[3,"MatcherTtFrame"],[3,"MatcherPos"],[3,"ParserAnyMacro"],[3,"MacroRulesMacroExpander"],[3,"OnFail"],[4,"OnFailAction"],[3,"TokenSet"],[3,"Restrictions"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"ParsePub"],[4,"TokenType"],[4,"LhsExpr"],[3,"Parser"],[4,"CommentStyle"],[3,"Comment"],[3,"Literal"],[3,"TokenAndSpan"],[3,"StringReader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[4,"ObsoleteSyntax"],[3,"ParseSess"],[3,"Name"],[3,"SyntaxContext"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[4,"MetaItem_"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[3,"Local"],[4,"Decl_"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"Expr"],[4,"Expr_"],[3,"QSelf"],[4,"CaptureClause"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[3,"Mac_"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItemKind"],[0,"IntTy"],[0,"UintTy"],[0,"FloatTy"],[3,"TypeBinding"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[4,"AsmDialect"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField_"],[4,"StructFieldKind"],[4,"VariantData"],[3,"Item"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"MacroDef"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[3,"AbiData"],[4,"AbiArchitecture"],[3,"IdRange"],[3,"IdVisitor"],[3,"IdRangeComputingVisitor"],[4,"InlineAttr"],[3,"Stability"],[4,"StabilityLevel"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"ReprAttr"],[4,"IntType"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[4,"ExpnFormat"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"ExpnId"],[3,"LineInfo"],[3,"MultiByteChar"],[3,"FileMap"],[3,"RealFileLoader"],[3,"CodeMap"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"Context"],[3,"CfgAttrFolder"],[3,"StmtExprAttrFeatureVisitor"],[3,"CfgDiagReal"],[3,"CfgDiagSilent"],[4,"GatedCfgAttr"],[3,"GatedCfg"],[4,"AttributeType"],[4,"AttributeGate"],[3,"Features"],[3,"MacroVisitor"],[3,"PostExpansionVisitor"],[4,"UnstableFeatures"],[4,"Mode"],[3,"ShowSpanVisitor"],[3,"CrateInjector"],[3,"PreludeInjector"],[3,"TestHarnessGenerator"],[3,"EntryPointCleaner"],[4,"HasTestSignature"],[4,"FnKind"],[4,"Breaks"],[3,"BreakToken"],[3,"BeginToken"],[4,"Token"],[4,"PrintStackBreak"],[3,"PrintStackElem"],[3,"Printer"],[3,"NoAnn"],[3,"CurrentCommentAndLiteral"],[3,"State"],[3,"LimitStack"],[4,"FloatWidth"],[4,"Constant"],[3,"TypePass"],[3,"LetPass"],[3,"UnitCmp"],[3,"CastPass"],[3,"TypeComplexityPass"],[3,"TopLevelRefPass"],[3,"CmpNan"],[3,"FloatCmp"],[3,"CmpOwned"],[3,"ModuloOne"],[3,"PatternPass"],[3,"UsedUnderscoreBinding"],[3,"EqOp"],[3,"BitMask"],[3,"PtrArg"],[3,"NeedlessBool"],[3,"ApproxConstant"],[3,"EtaPass"],[3,"IdentityOp"],[3,"MinMaxPass"],[3,"MutMut"],[3,"UnnecessaryMutPassed"],[3,"LenZero"],[3,"AttrPass"],[3,"CollapsibleIf"],[3,"BlockInIfCondition"],[3,"Unicode"],[3,"ShadowPass"],[3,"StringAdd"],[3,"MethodsPass"],[3,"ReturnPass"],[3,"LifetimePass"],[3,"LoopsPass"],[3,"StepByZero"],[3,"MapClonePass"],[3,"SpannedRange"],[3,"MatchPass"],[3,"Precedence"],[3,"MutexAtomic"],[3,"ZeroDivZeroPass"],[3,"NonSensicalOpenOptions"],[3,"NeedlessFeaturesPass"],[3,"NeedlessUpdatePass"],[3,"NoEffectPass"],[3,"TemporaryAssignmentPass"],[3,"UselessTransmute"],[3,"CyclomaticComplexity"],[3,"EscapePass"],[3,"HashMapLint"],[3,"MiscEarly"],[3,"ArrayIndexing"],[3,"PanicPass"]]};
searchIndex['rand'] = {"items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['nix'] = {"items":[[11,"clone","libc::types::os::common::posix01","",0,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","libc::types::os::common::bsd43","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","libc::types::os::common::bsd44","",5,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",6,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",8,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",9,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",10,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",12,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","libc::types::os::arch::posix01","",16,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",17,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",18,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::types::os::arch::extra","",19,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[6,"c_int","nix","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[4,"Error","","",null,null],[13,"Sys","","",20,null],[13,"InvalidPath","","",20,null],[5,"from_ffi","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"result"}}],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",21,null],[13,"EPERM","","",21,null],[13,"ENOENT","","",21,null],[13,"ESRCH","","",21,null],[13,"EINTR","","",21,null],[13,"EIO","","",21,null],[13,"ENXIO","","",21,null],[13,"E2BIG","","",21,null],[13,"ENOEXEC","","",21,null],[13,"EBADF","","",21,null],[13,"ECHILD","","",21,null],[13,"EDEADLK","","",21,null],[13,"ENOMEM","","",21,null],[13,"EACCES","","",21,null],[13,"EFAULT","","",21,null],[13,"ENOTBLK","","",21,null],[13,"EBUSY","","",21,null],[13,"EEXIST","","",21,null],[13,"EXDEV","","",21,null],[13,"ENODEV","","",21,null],[13,"ENOTDIR","","",21,null],[13,"EISDIR","","",21,null],[13,"EINVAL","","",21,null],[13,"ENFILE","","",21,null],[13,"EMFILE","","",21,null],[13,"ENOTTY","","",21,null],[13,"ETXTBSY","","",21,null],[13,"EFBIG","","",21,null],[13,"ENOSPC","","",21,null],[13,"ESPIPE","","",21,null],[13,"EROFS","","",21,null],[13,"EMLINK","","",21,null],[13,"EPIPE","","",21,null],[13,"EDOM","","",21,null],[13,"ERANGE","","",21,null],[13,"EAGAIN","","",21,null],[13,"EINPROGRESS","","",21,null],[13,"EALREADY","","",21,null],[13,"ENOTSOCK","","",21,null],[13,"EDESTADDRREQ","","",21,null],[13,"EMSGSIZE","","",21,null],[13,"EPROTOTYPE","","",21,null],[13,"ENOPROTOOPT","","",21,null],[13,"EPROTONOSUPPORT","","",21,null],[13,"ESOCKTNOSUPPORT","","",21,null],[13,"ENOTSUP","","",21,null],[13,"EPFNOSUPPORT","","",21,null],[13,"EAFNOSUPPORT","","",21,null],[13,"EADDRINUSE","","",21,null],[13,"EADDRNOTAVAIL","","",21,null],[13,"ENETDOWN","","",21,null],[13,"ENETUNREACH","","",21,null],[13,"ENETRESET","","",21,null],[13,"ECONNABORTED","","",21,null],[13,"ECONNRESET","","",21,null],[13,"ENOBUFS","","",21,null],[13,"EISCONN","","",21,null],[13,"ENOTCONN","","",21,null],[13,"ESHUTDOWN","","",21,null],[13,"ETOOMANYREFS","","",21,null],[13,"ETIMEDOUT","","",21,null],[13,"ECONNREFUSED","","",21,null],[13,"ELOOP","","",21,null],[13,"ENAMETOOLONG","","",21,null],[13,"EHOSTDOWN","","",21,null],[13,"EHOSTUNREACH","","",21,null],[13,"ENOTEMPTY","","",21,null],[13,"EPROCLIM","","",21,null],[13,"EUSERS","","",21,null],[13,"EDQUOT","","",21,null],[13,"ESTALE","","",21,null],[13,"EREMOTE","","",21,null],[13,"EBADRPC","","",21,null],[13,"ERPCMISMATCH","","",21,null],[13,"EPROGUNAVAIL","","",21,null],[13,"EPROGMISMATCH","","",21,null],[13,"EPROCUNAVAIL","","",21,null],[13,"ENOLCK","","",21,null],[13,"ENOSYS","","",21,null],[13,"EFTYPE","","",21,null],[13,"EAUTH","","",21,null],[13,"ENEEDAUTH","","",21,null],[13,"EPWROFF","","",21,null],[13,"EDEVERR","","",21,null],[13,"EOVERFLOW","","",21,null],[13,"EBADEXEC","","",21,null],[13,"EBADARCH","","",21,null],[13,"ESHLIBVERS","","",21,null],[13,"EBADMACHO","","",21,null],[13,"ECANCELED","","",21,null],[13,"EIDRM","","",21,null],[13,"ENOMSG","","",21,null],[13,"EILSEQ","","",21,null],[13,"ENOATTR","","",21,null],[13,"EBADMSG","","",21,null],[13,"EMULTIHOP","","",21,null],[13,"ENODATA","","",21,null],[13,"ENOLINK","","",21,null],[13,"ENOSR","","",21,null],[13,"ENOSTR","","",21,null],[13,"EPROTO","","",21,null],[13,"ETIME","","",21,null],[13,"EOPNOTSUPP","","",21,null],[13,"ENOPOLICY","","",21,null],[13,"ENOTRECOVERABLE","","",21,null],[13,"EOWNERDEAD","","",21,null],[13,"EQFULL","","",21,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","","",21,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",21,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",21,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",21,{"inputs":[{"name":"errno"},{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",21,null],[17,"ELAST","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EL2NSYNC","","",null,null],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[3,"flock","","",null,null],[12,"l_start","","",22,null],[12,"l_len","","",22,null],[12,"l_pid","","",22,null],[12,"l_type","","",22,null],[12,"l_whence","","",22,null],[12,"l_sysid","","",22,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",23,null],[13,"F_DUPFD_CLOEXEC","","",23,null],[13,"F_GETFD","","",23,null],[13,"F_SETFD","","",23,null],[13,"F_GETFL","","",23,null],[13,"F_SETFL","","",23,null],[13,"F_SETLK","","",23,null],[13,"F_SETLKW","","",23,null],[13,"F_GETLK","","",23,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",24,null],[13,"LockExclusive","","",24,null],[13,"Unlock","","",24,null],[13,"LockSharedNonblock","","",24,null],[13,"LockExclusiveNonblock","","",24,null],[13,"UnlockNonblock","","",24,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"flock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",22,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","","",25,null],[11,"cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",25,{"inputs":[{"name":"oflag"},{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"from_iter","","",25,{"inputs":[{"name":"oflag"},{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"fdflag"},{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",26,{"inputs":[{"name":"fdflag"},{"name":"t"}],"output":{"name":"fdflag"}}],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_FSYNC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[0,"sys","nix","",null,null],[0,"event","nix::sys","",null,null],[3,"KEvent","nix::sys::event","",null,null],[12,"ident","","",27,null],[12,"filter","","",27,null],[12,"flags","","",27,null],[12,"fflags","","",27,null],[12,"data","","",27,null],[12,"udata","","",27,null],[3,"EventFlag","","",null,null],[3,"FilterFlag","","",null,null],[4,"EventFilter","","",null,null],[13,"EVFILT_READ","","",28,null],[13,"EVFILT_WRITE","","",28,null],[13,"EVFILT_AIO","","",28,null],[13,"EVFILT_VNODE","","",28,null],[13,"EVFILT_PROC","","",28,null],[13,"EVFILT_SIGNAL","","",28,null],[13,"EVFILT_TIMER","","",28,null],[13,"EVFILT_MACHPORT","","",28,null],[13,"EVFILT_FS","","",28,null],[13,"EVFILT_USER","","",28,null],[13,"EVFILT_VM","","",28,null],[13,"EVFILT_SYSCOUNT","","",28,null],[5,"kqueue","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"kevent","","",null,null],[5,"kevent_ts","","",null,null],[5,"ev_set","","",null,{"inputs":[{"name":"kevent"},{"name":"usize"},{"name":"eventfilter"},{"name":"eventflag"},{"name":"filterflag"},{"name":"usize"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_RESOURCEEND","","",null,null],[17,"NOTE_APPACTIVE","","",null,null],[17,"NOTE_APPBACKGROUND","","",null,null],[17,"NOTE_APPNONUI","","",null,null],[17,"NOTE_APPINACTIVE","","",null,null],[17,"NOTE_APPALLSTATES","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_OOBAND","","",null,null],[11,"eq","","",28,{"inputs":[{"name":"eventfilter"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"eventfilter"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"eventfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"eventfilter"}],"output":{"name":"eventfilter"}}],[11,"hash","","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"eq","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"eventflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"eventflag"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"eventflag"},{"name":"u16"}],"output":{"name":"eventflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"eventflag"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"from_iter","","",29,{"inputs":[{"name":"eventflag"},{"name":"t"}],"output":{"name":"eventflag"}}],[11,"hash","","",30,null],[11,"cmp","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"eq","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"filterflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"filterflag"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"filterflag"},{"name":"u32"}],"output":{"name":"filterflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",30,{"inputs":[{"name":"filterflag"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"not","","Returns the complement of this set of flags.",30,{"inputs":[{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"from_iter","","",30,{"inputs":[{"name":"filterflag"},{"name":"t"}],"output":{"name":"filterflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[0,"types","nix::sys::ioctl::libc","",null,null],[0,"common","nix::sys::ioctl::libc::types","",null,null],[0,"c95","nix::sys::ioctl::libc::types::common","",null,null],[4,"c_void","nix::sys::ioctl::libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","nix::sys::ioctl::libc::types::common","",null,null],[6,"int8_t","nix::sys::ioctl::libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","nix::sys::ioctl::libc::types::common","",null,null],[4,"DIR","nix::sys::ioctl::libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","nix::sys::ioctl::libc::types","",null,null],[0,"common","nix::sys::ioctl::libc::types::os","",null,null],[0,"posix01","nix::sys::ioctl::libc::types::os::common","",null,null],[6,"pthread_t","nix::sys::ioctl::libc::types::os::common::posix01","",null,null],[6,"rlim_t","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",0,null],[12,"__unused1","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused2","","",0,null],[12,"gl_pathv","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[12,"__unused6","","",0,null],[12,"__unused7","","",0,null],[12,"__unused8","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[4,"timezone","","",null,null],[6,"sighandler_t","","",null,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[0,"bsd43","nix::sys::ioctl::libc::types::os::common","",null,null],[3,"rusage","nix::sys::ioctl::libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[0,"bsd44","nix::sys::ioctl::libc::types::os::common","",null,null],[6,"socklen_t","nix::sys::ioctl::libc::types::os::common::bsd44","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",5,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",6,null],[12,"ss_family","","",6,null],[12,"__ss_pad1","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",7,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",9,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",14,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_dstaddr","","",15,null],[12,"ifa_data","","",15,null],[0,"arch","nix::sys::ioctl::libc::types::os","",null,null],[0,"c95","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"c_char","nix::sys::ioctl::libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"c_longlong","nix::sys::ioctl::libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"off_t","nix::sys::ioctl::libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","nix::sys::ioctl::libc::types::os::arch","",null,null],[6,"nlink_t","nix::sys::ioctl::libc::types::os::arch::posix01","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",16,null],[12,"st_mode","","",16,null],[12,"st_nlink","","",16,null],[12,"st_ino","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"st_rdev","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"st_birthtime","","",16,null],[12,"st_birthtime_nsec","","",16,null],[12,"st_size","","",16,null],[12,"st_blocks","","",16,null],[12,"st_blksize","","",16,null],[12,"st_flags","","",16,null],[12,"st_gen","","",16,null],[12,"st_lspare","","",16,null],[12,"st_qspare","","",16,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[3,"pthread_attr_t","","",null,null],[12,"__sig","","",18,null],[12,"__opaque","","",18,null],[0,"extra","nix::sys::ioctl::libc::types::os::arch","",null,null],[3,"mach_timebase_info","nix::sys::ioctl::libc::types::os::arch::extra","",null,null],[12,"numer","","",19,null],[12,"denom","","",19,null],[6,"mach_timebase_info_data_t","","",null,null],[0,"consts","nix::sys::ioctl::libc","",null,null],[0,"os","nix::sys::ioctl::libc::consts","",null,null],[0,"c95","nix::sys::ioctl::libc::consts::os","",null,null],[17,"EXIT_FAILURE","nix::sys::ioctl::libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","nix::sys::ioctl::libc::consts::os","",null,null],[17,"O_RDONLY","nix::sys::ioctl::libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[0,"posix01","nix::sys::ioctl::libc::consts::os","",null,null],[17,"F_DUPFD","nix::sys::ioctl::libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"posix08","nix::sys::ioctl::libc::consts::os","",null,null],[17,"O_CLOEXEC","nix::sys::ioctl::libc::consts::os::posix08","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[0,"bsd44","nix::sys::ioctl::libc::consts::os","",null,null],[17,"MADV_NORMAL","nix::sys::ioctl::libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","nix::sys::ioctl::libc::consts::os","",null,null],[17,"O_DSYNC","nix::sys::ioctl::libc::consts::os::extra","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"MAP_STACK","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"PATH_MAX","","",null,null],[0,"sysconf","nix::sys::ioctl::libc::consts::os","",null,null],[17,"_SC_ARG_MAX","nix::sys::ioctl::libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[0,"funcs","nix::sys::ioctl::libc","",null,null],[0,"c95","nix::sys::ioctl::libc::funcs","",null,null],[0,"ctype","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"isalnum","nix::sys::ioctl::libc::funcs::c95::ctype","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"toupper","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[0,"stdio","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"fopen","nix::sys::ioctl::libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"abs","nix::sys::ioctl::libc::funcs::c95::stdlib","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"srand","","",null,null],[0,"string","nix::sys::ioctl::libc::funcs::c95","",null,null],[5,"strcpy","nix::sys::ioctl::libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","nix::sys::ioctl::libc::funcs","",null,null],[0,"stat_","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"chmod","nix::sys::ioctl::libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u16"}],"output":{"name":"i32"}}],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"popen","nix::sys::ioctl::libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"open","nix::sys::ioctl::libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"dirent","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"opendir","nix::sys::ioctl::libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"access","nix::sys::ioctl::libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"getcwd","","",null,null],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"link","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"pathconf","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[0,"signal","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"kill","nix::sys::ioctl::libc::funcs::posix88::signal","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"mman","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"mlock","nix::sys::ioctl::libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","nix::sys::ioctl::libc::funcs::posix88","",null,null],[5,"if_nametoindex","nix::sys::ioctl::libc::funcs::posix88::net","",null,null],[0,"posix01","nix::sys::ioctl::libc::funcs","",null,null],[0,"stat_","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"lstat","nix::sys::ioctl::libc::funcs::posix01::stat_","",null,null],[0,"unistd","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"readlink","nix::sys::ioctl::libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[0,"signal","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"signal","nix::sys::ioctl::libc::funcs::posix01::signal","",null,{"inputs":[{"name":"i32"},{"name":"u64"}],"output":{"name":"u64"}}],[0,"glob","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"glob","nix::sys::ioctl::libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"posix_madvise","nix::sys::ioctl::libc::funcs::posix01::mman","",null,null],[0,"resource","nix::sys::ioctl::libc::funcs::posix01","",null,null],[5,"getrlimit","nix::sys::ioctl::libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","nix::sys::ioctl::libc::funcs","",null,null],[5,"socket","nix::sys::ioctl::libc::funcs::bsd43","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"bsd44","nix::sys::ioctl::libc::funcs","",null,null],[5,"ioctl","nix::sys::ioctl::libc::funcs::bsd44","",null,{"inputs":[{"name":"i32"},{"name":"u64"}],"output":{"name":"i32"}}],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"getdtablesize","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[0,"extra","nix::sys::ioctl::libc::funcs","",null,null],[5,"_NSGetExecutablePath","nix::sys::ioctl::libc::funcs::extra","",null,null],[4,"FILE","nix::sys::ioctl::libc","",null,null],[4,"fpos_t","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[6,"uint16_t","","",null,null],[6,"int64_t","","",null,null],[6,"int16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"int8_t","","",null,null],[6,"uint8_t","","",null,null],[6,"int32_t","","",null,null],[4,"DIR","","",null,null],[4,"dirent_t","","",null,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[6,"sighandler_t","","",null,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[4,"timezone","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",0,null],[12,"__unused1","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused2","","",0,null],[12,"gl_pathv","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[12,"__unused6","","",0,null],[12,"__unused7","","",0,null],[12,"__unused8","","",0,null],[6,"rlim_t","","",null,null],[6,"pthread_t","","",null,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",6,null],[12,"ss_family","","",6,null],[12,"__ss_pad1","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[6,"in_port_t","","",null,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",5,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",9,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_dstaddr","","",15,null],[12,"ifa_data","","",15,null],[6,"sa_family_t","","",null,null],[6,"in_addr_t","","",null,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",7,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[6,"socklen_t","","",null,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",14,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[6,"c_short","","",null,null],[6,"c_float","","",null,null],[6,"size_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"c_char","","",null,null],[6,"c_ulong","","",null,null],[6,"wchar_t","","",null,null],[6,"c_long","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"clock_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_double","","",null,null],[6,"c_uchar","","",null,null],[6,"uintmax_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"off_t","","",null,null],[6,"ino_t","","",null,null],[6,"ssize_t","","",null,null],[6,"uid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[6,"blksize_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",16,null],[12,"st_mode","","",16,null],[12,"st_nlink","","",16,null],[12,"st_ino","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"st_rdev","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"st_birthtime","","",16,null],[12,"st_birthtime_nsec","","",16,null],[12,"st_size","","",16,null],[12,"st_blocks","","",16,null],[12,"st_blksize","","",16,null],[12,"st_flags","","",16,null],[12,"st_gen","","",16,null],[12,"st_lspare","","",16,null],[12,"st_qspare","","",16,null],[6,"nlink_t","","",null,null],[3,"pthread_attr_t","","",null,null],[12,"__sig","","",18,null],[12,"__opaque","","",18,null],[6,"blkcnt_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",19,null],[12,"denom","","",19,null],[17,"FOPEN_MAX","","",null,null],[17,"EOF","","",null,null],[17,"_IOLBF","","",null,null],[17,"SEEK_END","","",null,null],[17,"BUFSIZ","","",null,null],[17,"RAND_MAX","","",null,null],[17,"TMP_MAX","","",null,null],[17,"SEEK_SET","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_IONBF","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"_IOFBF","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ENOLINK","","",null,null],[17,"F_LOCK","","",null,null],[17,"SIGPIPE","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"ESPIPE","","",null,null],[17,"ENXIO","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"ENOSTR","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ESTALE","","",null,null],[17,"EISDIR","","",null,null],[17,"ERANGE","","",null,null],[17,"S_IXUSR","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"F_TLOCK","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"EBADEXEC","","",null,null],[17,"S_IWOTH","","",null,null],[17,"EMLINK","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"SIGHUP","","",null,null],[17,"F_ULOCK","","",null,null],[17,"EBADF","","",null,null],[17,"ENODEV","","",null,null],[17,"EDEADLK","","",null,null],[17,"EEXIST","","",null,null],[17,"EPERM","","",null,null],[17,"ENETRESET","","",null,null],[17,"EDOM","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"ENFILE","","",null,null],[17,"EBUSY","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"ETIME","","",null,null],[17,"S_IRWXU","","",null,null],[17,"ENOTCONN","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IFREG","","",null,null],[17,"SIGTERM","","",null,null],[17,"EAGAIN","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"S_IWGRP","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"EQFULL","","",null,null],[17,"EAUTH","","",null,null],[17,"EIO","","",null,null],[17,"E2BIG","","",null,null],[17,"SIGABRT","","",null,null],[17,"O_EXCL","","",null,null],[17,"EACCES","","",null,null],[17,"ENODATA","","",null,null],[17,"S_IFBLK","","",null,null],[17,"ECANCELED","","",null,null],[17,"S_IFLNK","","",null,null],[17,"F_TEST","","",null,null],[17,"ENOTDIR","","",null,null],[17,"S_IXOTH","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"SIGSEGV","","",null,null],[17,"EREMOTE","","",null,null],[17,"ELOOP","","",null,null],[17,"ESRCH","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EISCONN","","",null,null],[17,"EBADMSG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFDIR","","",null,null],[17,"SIGALRM","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRUSR","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBADARCH","","",null,null],[17,"EROFS","","",null,null],[17,"O_CREAT","","",null,null],[17,"EXDEV","","",null,null],[17,"S_IWUSR","","",null,null],[17,"ENOBUFS","","",null,null],[17,"ENOSR","","",null,null],[17,"S_IWRITE","","",null,null],[17,"ENOMSG","","",null,null],[17,"EUSERS","","",null,null],[17,"EBADRPC","","",null,null],[17,"ENOLCK","","",null,null],[17,"S_IREAD","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"O_RDWR","","",null,null],[17,"EPIPE","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"O_WRONLY","","",null,null],[17,"MAP_FILE","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"R_OK","","",null,null],[17,"ENOENT","","",null,null],[17,"W_OK","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"F_OK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EILSEQ","","",null,null],[17,"EFAULT","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"EIDRM","","",null,null],[17,"SIGFPE","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"O_APPEND","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EPWROFF","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"PROT_READ","","",null,null],[17,"ECHILD","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOEXEC","","",null,null],[17,"O_RDONLY","","",null,null],[17,"ELAST","","",null,null],[17,"EDQUOT","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"EPROTO","","",null,null],[17,"EFBIG","","",null,null],[17,"ENETDOWN","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"EDEVERR","","",null,null],[17,"ENOATTR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENOSPC","","",null,null],[17,"SIGKILL","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOMEM","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"X_OK","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"PROT_NONE","","",null,null],[17,"O_TRUNC","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"S_IRWXG","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EFTYPE","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"SIGILL","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGINT","","",null,null],[17,"ENOTTY","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EINTR","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"MAP_ANON","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"F_GETFL","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETFD","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"F_GETFD","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"F_DUPFD","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"SIG_IGN","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"AF_INET6","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"AF_UNIX","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"LOCK_SH","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"MADV_FREE","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"LOCK_NB","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"LOCK_UN","","",null,null],[17,"LOCK_EX","","",null,null],[17,"AF_INET","","",null,null],[17,"SHUT_RD","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_NREAD","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"PATH_MAX","","",null,null],[17,"MAP_JIT","","",null,null],[17,"O_SYNC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"SO_NKE","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"MAP_COPY","","",null,null],[17,"F_GETPATH","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"toupper","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[5,"isalnum","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ungetc","","",null,null],[5,"perror","","",null,null],[5,"rewind","","",null,null],[5,"ftell","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"feof","","",null,null],[5,"fclose","","",null,null],[5,"freopen","","",null,null],[5,"fgets","","",null,null],[5,"fgetc","","",null,null],[5,"fflush","","",null,null],[5,"setbuf","","",null,null],[5,"ferror","","",null,null],[5,"puts","","",null,null],[5,"fputc","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"fputs","","",null,null],[5,"rename","","",null,null],[5,"fseek","","",null,null],[5,"setvbuf","","",null,null],[5,"fopen","","",null,null],[5,"remove","","",null,null],[5,"tmpfile","","",null,null],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"srand","","",null,null],[5,"realloc","","",null,null],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"strtoul","","",null,null],[5,"atof","","",null,null],[5,"abs","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"strtod","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"free","","",null,null],[5,"calloc","","",null,null],[5,"strtol","","",null,null],[5,"atoi","","",null,null],[5,"malloc","","",null,null],[5,"memcmp","","",null,null],[5,"strspn","","",null,null],[5,"strcpy","","",null,null],[5,"strpbrk","","",null,null],[5,"strtok","","",null,null],[5,"strcmp","","",null,null],[5,"strcat","","",null,null],[5,"strrchr","","",null,null],[5,"strerror","","",null,null],[5,"wcslen","","",null,null],[5,"strcspn","","",null,null],[5,"strxfrm","","",null,null],[5,"strlen","","",null,null],[5,"strstr","","",null,null],[5,"strcoll","","",null,null],[5,"strncat","","",null,null],[5,"strncmp","","",null,null],[5,"strchr","","",null,null],[5,"strncpy","","",null,null],[5,"memchr","","",null,null],[5,"open","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"creat","","",null,null],[5,"chmod","","",null,null],[5,"mkfifo","","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u16"}],"output":{"name":"i32"}}],[5,"fstat","","",null,null],[5,"stat","","",null,null],[5,"mkdir","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"getgroups","","",null,null],[5,"rmdir","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"wait","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"link","","",null,null],[5,"write","","",null,null],[5,"waitpid","","",null,null],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"pipe","","",null,null],[5,"execv","","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"read","","",null,null],[5,"pread","","",null,null],[5,"access","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[5,"ttyname","","",null,null],[5,"nanosleep","","",null,null],[5,"pathconf","","",null,null],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"utime","","",null,null],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"unlink","","",null,null],[5,"getopt","","",null,null],[5,"chdir","","",null,null],[5,"execve","","",null,null],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getcwd","","",null,null],[5,"execvp","","",null,null],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"chown","","",null,null],[5,"pwrite","","",null,null],[5,"getlogin","","",null,null],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"accept","","",null,null],[5,"sendto","","",null,null],[5,"connect","","",null,null],[5,"getpeername","","",null,null],[5,"setsockopt","","",null,null],[5,"socket","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"recv","","",null,null],[5,"getsockname","","",null,null],[5,"freeifaddrs","","",null,null],[5,"recvfrom","","",null,null],[5,"send","","",null,null],[5,"getifaddrs","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"bind","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"mmap","","",null,null],[5,"mlock","","",null,null],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"shm_unlink","","",null,null],[5,"munmap","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"munlock","","",null,null],[5,"msync","","",null,null],[5,"telldir","","",null,null],[5,"rewinddir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"opendir","","",null,null],[5,"seekdir","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"putenv","","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[5,"symlink","","",null,null],[5,"unsetenv","","",null,null],[5,"readlink","","",null,null],[5,"setenv","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getrlimit","","",null,null],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"howflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[0,"signal","","",null,null],[3,"SockFlag","nix::sys::signal::signal","",null,null],[3,"HowFlag","","",null,null],[3,"siginfo","","",null,null],[12,"si_signo","","",31,null],[12,"si_errno","","",31,null],[12,"si_code","","",31,null],[12,"pid","","",31,null],[12,"uid","","",31,null],[12,"status","","",31,null],[3,"sigaction","","",null,null],[12,"sa_handler","","",32,null],[12,"sa_mask","","",32,null],[12,"sa_flags","","",32,null],[6,"sigset_t","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[11,"hash","","",33,null],[11,"cmp","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",33,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",33,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",33,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",33,{"inputs":[{"name":"sockflag"},{"name":"t"}],"output":{"name":"sockflag"}}],[11,"hash","","",34,null],[11,"cmp","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"eq","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"howflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"howflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"howflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",34,{"inputs":[{"name":"howflag"},{"name":"c_int"}],"output":{"name":"howflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"howflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"howflag"},{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"howflag"}],"output":{"name":"howflag"}}],[11,"from_iter","","",34,{"inputs":[{"name":"howflag"},{"name":"t"}],"output":{"name":"howflag"}}],[11,"clone","","",31,{"inputs":[{"name":"siginfo"}],"output":{"name":"siginfo"}}],[6,"SigNum","nix::sys::signal","",null,null],[17,"SIGEMT","","",null,null],[11,"clone","","",35,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"all","","",35,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"empty","","",35,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"add","","",35,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",35,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"contains","","",35,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",35,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",35,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",35,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",35,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",35,{"inputs":[{"name":"sigset"},{"name":"howflag"}],"output":{"name":"result"}}],[11,"as_ref","","",35,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset_t"}}],[11,"new","","",36,null],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",8,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",5,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",7,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",9,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",14,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",6,null],[12,"ss_family","","",6,null],[12,"__ss_pad1","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\nsize_of::<sa_family_t>().",null,null],[3,"Ipv4Addr","","",null,null],[3,"Ipv6Addr","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",37,null],[12,"imr_interface","","",37,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",38,null],[12,"ipv6mr_interface","","",38,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",39,null],[12,"address","","",39,null],[12,"flags","","",39,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",40,null],[12,"l_linger","","",40,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",41,null],[13,"Inet","","",41,null],[13,"Inet6","","",41,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",42,null],[13,"Unix","","",42,null],[4,"InetAddr","","",null,null],[13,"V4","","",43,null],[13,"V6","","",43,null],[4,"IpAddr","","",null,null],[13,"V4","","",44,null],[13,"V6","","",44,null],[4,"SockType","","",null,null],[13,"Stream","","",45,null],[13,"Datagram","","",45,null],[13,"SeqPacket","","",45,null],[13,"Raw","","",45,null],[13,"Rdm","","",45,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n\"Ancillary messages\" section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",46,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",47,null],[13,"Tcp","","",47,null],[13,"Ip","","",47,null],[13,"Ipv6","","",47,null],[13,"Udp","","",47,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",48,null],[13,"Write","","Further  transmissions will be disallowed.",48,null],[13,"Both","","Further receptions and transmissions will be disallowed.",48,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",43,{"inputs":[{"name":"inetaddr"},{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",43,{"inputs":[{"name":"inetaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",43,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",43,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",43,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",43,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",43,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",43,{"inputs":[{"name":"inetaddr"},{"name":"h"}],"output":null}],[11,"clone","","",43,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",43,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",44,{"inputs":[{"name":"ipaddr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",44,{"inputs":[{"name":"ipaddr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",44,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",49,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",49,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",49,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"octets","","",49,null],[11,"to_std","","",49,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",49,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",49,{"inputs":[{"name":"ipv4addr"},{"name":"h"}],"output":null}],[11,"clone","","",49,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",49,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",50,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",50,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",50,null],[11,"to_std","","",50,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",50,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",51,{"inputs":[{"name":"unixaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n\"abstract namespace\". This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",51,null],[11,"path","","If this address represents a filesystem path, return that path.",51,{"inputs":[{"name":"unixaddr"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",51,{"inputs":[{"name":"unixaddr"},{"name":"h"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",51,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",42,{"inputs":[{"name":"sockaddr"},{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",42,{"inputs":[{"name":"sockaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",42,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",42,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",42,{"inputs":[{"name":"sockaddr"},{"name":"h"}],"output":null}],[11,"clone","","",42,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",42,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",37,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",37,{"inputs":[{"name":"ip_mreq"},{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",38,{"inputs":[{"name":"ipv6_mreq"},{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"TcpKeepAlive","","",null,null],[11,"fmt","","",52,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"set","","",52,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",52,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"set","","",53,{"inputs":[{"name":"reuseport"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",53,{"inputs":[{"name":"reuseport"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"set","","",54,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",54,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"set","","",55,{"inputs":[{"name":"linger"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",55,{"inputs":[{"name":"linger"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"set","","",56,{"inputs":[{"name":"ipaddmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"set","","",57,{"inputs":[{"name":"ipdropmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"set","","",58,{"inputs":[{"name":"ipv6addmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"set","","",59,{"inputs":[{"name":"ipv6dropmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"set","","",60,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",60,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"set","","",61,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",61,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"set","","",62,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",62,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"set","","",63,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",63,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"set","","",64,{"inputs":[{"name":"broadcast"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",64,{"inputs":[{"name":"broadcast"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"set","","",65,{"inputs":[{"name":"oobinline"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",65,{"inputs":[{"name":"oobinline"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"get","","",66,{"inputs":[{"name":"socketerror"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"set","","",67,{"inputs":[{"name":"keepalive"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",67,{"inputs":[{"name":"keepalive"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"tcpkeepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"tcpkeepalive"}],"output":{"name":"tcpkeepalive"}}],[11,"set","","",68,{"inputs":[{"name":"tcpkeepalive"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",68,{"inputs":[{"name":"tcpkeepalive"},{"name":"rawfd"}],"output":{"name":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[6,"SockMessageFlags","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_RESTRICTIONS","","",null,null],[17,"SO_RESTRICT_DENYIN","","",null,null],[17,"SO_RESTRICT_DENYOUT","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_RESTRICT_DENYSET","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",69,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",70,null],[11,"fmt","","",45,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",71,null],[11,"cmp","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",71,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",71,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",71,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",71,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",71,{"inputs":[{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",71,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",71,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",71,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",71,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",71,{"inputs":[{"name":"sockflag"},{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace<T>. The structure is used only for space, so\nthe fields are uninitialized.",72,{"inputs":[{"name":"cmsgspace"}],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",39,{"inputs":[{"name":"recvmsg"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",73,{"inputs":[{"name":"cmsgiterator"}],"output":{"name":"option"}}],[11,"fmt","","",40,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",48,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",16,null],[12,"st_mode","","",16,null],[12,"st_nlink","","",16,null],[12,"st_ino","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"st_rdev","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"st_birthtime","","",16,null],[12,"st_birthtime_nsec","","",16,null],[12,"st_size","","",16,null],[12,"st_blocks","","",16,null],[12,"st_blksize","","",16,null],[12,"st_flags","","",16,null],[12,"st_gen","","",16,null],[12,"st_lspare","","",16,null],[12,"st_qspare","","",16,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",74,null],[11,"cmp","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",74,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",74,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",74,{"inputs":[{"name":"sflag"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",74,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",74,{"inputs":[{"name":"sflag"},{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",74,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",74,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",74,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",74,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"from_iter","","",74,{"inputs":[{"name":"sflag"},{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",75,null],[11,"cmp","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"mode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,{"inputs":[{"name":"mode"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",75,{"inputs":[{"name":"mode"},{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",75,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",75,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",75,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"from_iter","","",75,{"inputs":[{"name":"mode"},{"name":"t"}],"output":{"name":"mode"}}],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",76,null],[12,"c_oflag","","",76,null],[12,"c_cflag","","",76,null],[12,"c_lflag","","",76,null],[12,"c_cc","","",76,null],[12,"c_ispeed","","",76,null],[12,"c_ospeed","","",76,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",77,null],[13,"TCSADRAIN","","",77,null],[13,"TCSAFLUSH","","",77,null],[13,"TCSASOFT","","",77,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",78,null],[13,"TCOFLUSH","","",78,null],[13,"TCIOFLUSH","","",78,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",79,null],[13,"TCOON","","",79,null],[13,"TCIOFF","","",79,null],[13,"TCION","","",79,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",80,null],[11,"cmp","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"inputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,{"inputs":[{"name":"inputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80,{"inputs":[{"name":"inputflags"},{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",80,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",80,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",80,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",80,{"inputs":[{"name":"inputflags"},{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",81,null],[11,"cmp","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"outputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,{"inputs":[{"name":"outputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"outputflags"},{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",81,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",81,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",81,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",81,{"inputs":[{"name":"outputflags"},{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",82,null],[11,"cmp","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"controlflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,{"inputs":[{"name":"controlflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"controlflags"},{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",82,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",82,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",82,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",82,{"inputs":[{"name":"controlflags"},{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",83,null],[11,"cmp","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"localflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,{"inputs":[{"name":"localflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"localflags"},{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",83,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",83,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",83,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"from_iter","","",83,{"inputs":[{"name":"localflags"},{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",77,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",78,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",79,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CCTS_OFLOW","","",null,null],[17,"CRTSCTS","","",null,null],[17,"CRTS_IFLOW","","",null,null],[17,"CDTR_IFLOW","","",null,null],[17,"CDSR_OFLOW","","",null,null],[17,"CCAR_OFLOW","","",null,null],[17,"MDMBUF","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"NL2","","",null,null],[17,"NL3","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",84,null],[13,"Signaled","","",84,null],[13,"Stopped","","",84,null],[13,"Continued","","",84,null],[13,"StillAlive","","",84,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[11,"hash","","",85,null],[11,"cmp","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85,{"inputs":[{"name":"waitpidflag"},{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",85,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",85,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",85,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",85,{"inputs":[{"name":"waitpidflag"},{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",84,{"inputs":[{"name":"waitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[11,"eq","","",84,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[0,"mman","nix::sys","",null,null],[5,"mlock","nix::sys::mman","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[6,"MmapFlag","","",null,null],[6,"MmapProt","","",null,null],[6,"MmapAdvise","","",null,null],[6,"MmapSync","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_NONE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"MAP_FAILED","","",null,null],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",86,null],[11,"from_slice","","",86,null],[11,"from_mut_slice","","",86,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",87,null],[12,"tv_usec","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"hours","","",87,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",87,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",87,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",87,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",87,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",87,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",87,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",87,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",87,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",87,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"timeval"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"new","","",88,{"inputs":[{"name":"fdset"}],"output":{"name":"fdset"}}],[11,"insert","","",88,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"remove","","",88,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"contains","","",88,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",88,{"inputs":[{"name":"fdset"}],"output":null}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",89,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",89,null],[12,"f_blocks","","Total number of blocks on the filesystem",89,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",89,null],[12,"f_bavail","","Number of blocks available to non-root users",89,null],[12,"f_files","","Total number of inodes available on the filesystem",89,null],[12,"f_ffree","","Number of inodes available on the filesystem",89,null],[12,"f_favail","","Number of inodes available to non-root users",89,null],[12,"f_fsid","","File System ID",89,null],[12,"f_flag","","Mount Flags",89,null],[12,"f_namemax","","Maximum filename length",89,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",90,null],[11,"cmp","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"eq","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"default","","",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"fmt","","",90,{"inputs":[{"name":"fsflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"fsflags"},{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"fsflags"},{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",90,{"inputs":[{"name":"fsflags"},{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",89,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"fmt","","",89,{"inputs":[{"name":"statvfs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",89,{"inputs":[{"name":"statvfs"},{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",89,{"inputs":[{"name":"statvfs"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",89,{"inputs":[{"name":"statvfs"},{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",89,{"inputs":[{"name":"statvfs"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",89,{"inputs":[{"name":"statvfs"}],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",91,null],[13,"Child","","",91,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",91,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",91,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",92,{"inputs":[{"name":"nixpath"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",92,{"inputs":[{"name":"nixpath"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_errno","","",20,{"inputs":[{"name":"error"},{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"invalid_argument","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"errno","","",20,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"from","","",20,{"inputs":[{"name":"error"},{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",20,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",93,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::path","",94,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",94,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",95,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",95,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}]],"paths":[[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"FileStat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"mach_timebase_info"],[4,"Error"],[4,"Errno"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"OFlag"],[3,"FdFlag"],[3,"KEvent"],[4,"EventFilter"],[3,"EventFlag"],[3,"FilterFlag"],[3,"siginfo"],[3,"sigaction"],[3,"SockFlag"],[3,"HowFlag"],[3,"SigSet"],[3,"SigAction"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepAlive"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"],[3,"Error"],[3,"Path"],[3,"PathBuf"]]};
searchIndex['flate2'] = {"items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[{"name":"gzbuilder"}],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"vec"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"mtime","","Returns the `mtime` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"u32"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",5,{"inputs":[{"name":"compress"},{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",5,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",5,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",5,{"inputs":[{"name":"compress"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",5,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",5,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",6,{"inputs":[{"name":"decompress"},{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",6,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",6,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",6,null],[0,"read","","Types which operate over `Reader` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Writer` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",7,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",7,{"inputs":[{"name":"flatereadext"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",7,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",7,{"inputs":[{"name":"flatereadext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",7,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",7,{"inputs":[{"name":"flatereadext"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"compression"}],"output":{"name":"compression"}}],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",9,{"inputs":[{"name":"deflateencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",9,{"inputs":[{"name":"deflateencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",9,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"write","","",9,null],[11,"flush","","",9,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",10,{"inputs":[{"name":"deflateencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",10,{"inputs":[{"name":"deflateencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"r"}}],[11,"read","","",10,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",11,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",11,{"inputs":[{"name":"deflatedecoder"},{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",11,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",11,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",11,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",11,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"read","","",11,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",13,{"inputs":[{"name":"gzencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",13,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"gzencoder"}],"output":null}],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",14,{"inputs":[{"name":"gzencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"r"}}],[11,"read","","",14,null],[11,"new","","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",15,{"inputs":[{"name":"gzdecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",15,{"inputs":[{"name":"gzdecoder"}],"output":{"name":"header"}}],[11,"read","","",15,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",16,{"inputs":[{"name":"zlibencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",16,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",17,{"inputs":[{"name":"zlibencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",17,{"inputs":[{"name":"zlibencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"r"}}],[11,"read","","",17,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",18,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",18,{"inputs":[{"name":"zlibdecoder"},{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",18,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",18,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",18,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",18,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"read","","",18,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex['env_logger'] = {"items":[[3,"LogBuilder","env_logger","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[{"name":"logbuilder"}],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"logbuilder"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"logbuilder"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,{"inputs":[{"name":"logbuilder"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"logbuilder"}],"output":{"name":"result"}}]],"paths":[[3,"LogBuilder"]]};
searchIndex['regex'] = {"items":[[3,"Captures","regex","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Regex","","A compiled regular expression",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",0,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",0,null],[4,"CaptureNames","","Yields the names of all possible captures.\n`None` indicates an unnamed capture; the first element\n(capture 0, the whole matched region) is always unnamed.",null,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",1,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a dynamic regular expression with the given size limit.",1,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"as_str","","Returns the original string of this regex.",1,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",1,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",1,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",2,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"reg_replace","","",3,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",3,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",6,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",6,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",6,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",6,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",6,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",6,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",6,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",6,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",6,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"index","","",6,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",6,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",7,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",12,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",12,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",12,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[4,"Error"],[4,"Regex"],[4,"CaptureNames"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex['time'] = {"items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex['arrayvec'] = {"items":[[8,"RangeArgument","arrayvec","**IndexRange** is implemented by Rust's built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"arraystring"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"usize"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"arraystring"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"arraystring"}],"output":null}],[11,"set_len","","Set the strings's length.",1,{"inputs":[{"name":"arraystring"},{"name":"usize"}],"output":null}],[11,"deref","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"arraystring"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"arraystring"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"arraystring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"arraystring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"arraystring"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"push","","Push `element` to the end of the vector.",3,{"inputs":[{"name":"arrayvec"},{"name":"item"}],"output":{"name":"option"}}],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"insert","","Insert `element` in position `index`.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"},{"name":"item"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"set_len","","Set the vector's length without dropping or moving out elements",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"arrayvec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"result"}}],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"arrayvec"},{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"intoiter"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"drain"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"arrayvec"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"arrayvec"},{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"self"}}],[11,"hash","","",3,{"inputs":[{"name":"arrayvec"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"arrayvec"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"arrayvec"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"result"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"t"}}],[11,"description","","",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex['miow'] = {"items":[],"paths":[]};
searchIndex['aho_corasick'] = {"items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"fullacautomaton"},{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"skip_to","","",5,null],[11,"is_skippable","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"bool"}}],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"patidx"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"patidx"},{"name":"usize"}],"output":{"name":"match"}}],[10,"skip_to","","Attempt to skip through the input.",6,null],[10,"is_skippable","","Returns true if and only if this automaton can skip through the input.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"transitions"},{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"skip_to","","",8,null],[11,"is_skippable","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"bool"}}],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"dense"},{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"sparse"},{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"acautomaton"},{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex['log'] = {"items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then places `x` into it.",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",8,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",8,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",10,null],[11,"make_place","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",8,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",10,null],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",8,null],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"from","","",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"fmt","alloc::arc","",11,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",12,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",12,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",11,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",11,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",11,null],[11,"eq","","Equality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",12,null],[11,"from","","",12,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",11,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"as_ref","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",13,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",13,null],[11,"clone","","Makes a clone of the `Rc<T>`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",14,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",14,null],[11,"clone","","Makes a clone of the `Weak<T>`.",14,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",14,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",14,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",15,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",15,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",15,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",15,null],[11,"cap","","Gets the capacity of the allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",15,null],[11,"double_in_place","","Attempts to double the size of the type's backing allocation in place. This is common\nenough to want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",15,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",15,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",15,{"inputs":[{"name":"rawvec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",15,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",15,null],[14,"log!","log","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"Box"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"]]};
searchIndex['net2'] = {"items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using\naccept()",0,{"inputs":[{"name":"tcpbuilder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"tcpbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"udpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"udpbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_nodelay","std::net::tcp","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_write_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_ttl","","",2,{"inputs":[{"name":"tcpstream"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_only_v6","","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"connect","","",2,{"inputs":[{"name":"tcpstream"},{"name":"t"}],"output":{"name":"result"}}],[11,"take_error","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nonblocking","","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_broadcast","std::net::udp","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_ttl","","",3,{"inputs":[{"name":"udpsocket"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_only_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_read_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_write_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"take_error","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"connect","","",3,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"set_nonblocking","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_ttl","std::net::tcp","",4,{"inputs":[{"name":"tcplistener"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"set_only_v6","","",4,{"inputs":[{"name":"tcplistener"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_error","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"set_nonblocking","","",4,{"inputs":[{"name":"tcplistener"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","net2","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",5,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",6,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",7,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",8,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",9,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",10,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",15,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","libc::unix::bsd","",16,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",18,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",19,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",20,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",21,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",22,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",23,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",24,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",25,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",26,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",27,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",28,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",29,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",30,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",31,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",32,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",33,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",34,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",35,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",36,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",37,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",38,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",39,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",40,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",41,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",42,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",44,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",45,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",46,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",47,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",48,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",49,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","libc::unix::bsd::apple::b64","",50,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"from_raw_fd","net2","",0,{"inputs":[{"name":"tcpbuilder"},{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"udpbuilder"},{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",51,{"inputs":[{"name":"unixtcpbuilderext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",52,{"inputs":[{"name":"unixudpbuilderext"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",53,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",53,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",53,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",53,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",53,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",53,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection\nto the host specified by `addr`.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",53,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",53,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",54,{"inputs":[{"name":"tcplistenerext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",54,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",54,{"inputs":[{"name":"tcplistenerext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",54,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",54,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",54,{"inputs":[{"name":"tcplistenerext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",55,{"inputs":[{"name":"udpsocketext"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",55,{"inputs":[{"name":"udpsocketext"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",55,{"inputs":[{"name":"udpsocketext"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",55,{"inputs":[{"name":"udpsocketext"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",55,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",55,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",55,{"inputs":[{"name":"udpsocketext"},{"name":"a"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",55,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[3,"TcpStream"],[3,"UdpSocket"],[3,"TcpListener"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"flock"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"pthread_attr_t"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex['rocksdb'] = {"items":[[0,"rocksdb","rocksdb","",null,null],[3,"DB","rocksdb::rocksdb","",null,null],[3,"WriteBatch","","",null,null],[3,"ReadOptions","","",null,null],[3,"Snapshot","","",null,null],[3,"DBIterator","","",null,null],[3,"DBVector","","",null,null],[4,"Direction","","",null,null],[13,"forward","","",0,null],[13,"reverse","","",0,null],[4,"IteratorMode","","",null,null],[13,"Start","","",1,null],[13,"End","","",1,null],[13,"From","","",1,null],[8,"Writable","","",null,null],[10,"put","","",2,null],[10,"put_cf","","",2,null],[10,"merge","","",2,null],[10,"merge_cf","","",2,null],[10,"delete","","",2,null],[10,"delete_cf","","",2,null],[11,"next","","",3,{"inputs":[{"name":"dbiterator"}],"output":{"name":"option"}}],[11,"set_mode","","",3,{"inputs":[{"name":"dbiterator"},{"name":"iteratormode"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"dbiterator"}],"output":null}],[11,"new","","",4,{"inputs":[{"name":"snapshot"},{"name":"db"}],"output":{"name":"snapshot"}}],[11,"iterator","","",4,{"inputs":[{"name":"snapshot"},{"name":"iteratormode"}],"output":{"name":"dbiterator"}}],[11,"drop","","",4,{"inputs":[{"name":"snapshot"}],"output":null}],[11,"open_default","","",5,{"inputs":[{"name":"db"},{"name":"str"}],"output":{"name":"result"}}],[11,"open","","",5,{"inputs":[{"name":"db"},{"name":"options"},{"name":"str"}],"output":{"name":"result"}}],[11,"open_cf","","",5,null],[11,"destroy","","",5,{"inputs":[{"name":"db"},{"name":"options"},{"name":"str"}],"output":{"name":"result"}}],[11,"repair","","",5,{"inputs":[{"name":"db"},{"name":"options"},{"name":"str"}],"output":{"name":"result"}}],[11,"write","","",5,{"inputs":[{"name":"db"},{"name":"writebatch"}],"output":{"name":"result"}}],[11,"get","","",5,null],[11,"get_cf","","",5,null],[11,"create_cf","","",5,{"inputs":[{"name":"db"},{"name":"str"},{"name":"options"}],"output":{"name":"result"}}],[11,"drop_cf","","",5,{"inputs":[{"name":"db"},{"name":"str"}],"output":{"name":"result"}}],[11,"cf_handle","","",5,{"inputs":[{"name":"db"},{"name":"str"}],"output":{"name":"option"}}],[11,"iterator","","",5,{"inputs":[{"name":"db"},{"name":"iteratormode"}],"output":{"name":"dbiterator"}}],[11,"iterator_cf","","",5,{"inputs":[{"name":"db"},{"name":"dbcfhandle"},{"name":"iteratormode"}],"output":{"name":"result"}}],[11,"snapshot","","",5,{"inputs":[{"name":"db"}],"output":{"name":"snapshot"}}],[11,"put","","",5,null],[11,"put_cf","","",5,null],[11,"merge","","",5,null],[11,"merge_cf","","",5,null],[11,"delete","","",5,null],[11,"delete_cf","","",5,null],[11,"new","","",6,{"inputs":[{"name":"writebatch"}],"output":{"name":"writebatch"}}],[11,"drop","","",6,{"inputs":[{"name":"writebatch"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"db"}],"output":null}],[11,"put","","",6,null],[11,"put_cf","","",6,null],[11,"merge","","",6,null],[11,"merge_cf","","",6,null],[11,"delete","","",6,null],[11,"delete_cf","","",6,null],[11,"drop","","",7,{"inputs":[{"name":"readoptions"}],"output":null}],[11,"deref","","",8,null],[11,"drop","","",8,{"inputs":[{"name":"dbvector"}],"output":null}],[11,"from_c","","",8,null],[11,"to_utf8","","",8,{"inputs":[{"name":"dbvector"}],"output":{"name":"option"}}],[0,"ffi","rocksdb","",null,null],[3,"DBOptions","rocksdb::ffi","",null,null],[3,"DBInstance","","",null,null],[3,"DBWriteOptions","","",null,null],[3,"DBReadOptions","","",null,null],[3,"DBMergeOperator","","",null,null],[3,"DBBlockBasedTableOptions","","",null,null],[3,"DBCache","","",null,null],[3,"DBFilterPolicy","","",null,null],[3,"DBSnapshot","","",null,null],[3,"DBIterator","","",null,null],[3,"DBCFHandle","","",null,null],[3,"DBWriteBatch","","",null,null],[3,"DBComparator","","",null,null],[4,"DBCompressionType","","",null,null],[13,"DBNoCompression","","",9,null],[13,"DBSnappyCompression","","",9,null],[13,"DBZlibCompression","","",9,null],[13,"DBBz2Compression","","",9,null],[13,"DBLz4Compression","","",9,null],[13,"DBLz4hcCompression","","",9,null],[4,"DBCompactionStyle","","",null,null],[13,"DBLevelCompaction","","",10,null],[13,"DBUniversalCompaction","","",10,null],[13,"DBFifoCompaction","","",10,null],[4,"DBUniversalCompactionStyle","","",null,null],[13,"rocksdb_similar_size_compaction_stop_style","","",11,null],[13,"rocksdb_total_size_compaction_stop_style","","",11,null],[5,"new_bloom_filter","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"dbfilterpolicy"}}],[5,"new_cache","","",null,{"inputs":[{"name":"size_t"}],"output":{"name":"dbcache"}}],[5,"error_message","","",null,null],[5,"rocksdb_options_create","","",null,null],[5,"rocksdb_options_destroy","","",null,null],[5,"rocksdb_cache_create_lru","","",null,null],[5,"rocksdb_cache_destroy","","",null,null],[5,"rocksdb_block_based_options_create","","",null,null],[5,"rocksdb_block_based_options_destroy","","",null,null],[5,"rocksdb_block_based_options_set_block_size","","",null,null],[5,"rocksdb_block_based_options_set_block_size_deviation","","",null,null],[5,"rocksdb_block_based_options_set_block_restart_interval","","",null,null],[5,"rocksdb_block_based_options_set_filter_policy","","",null,null],[5,"rocksdb_block_based_options_set_no_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache_compressed","","",null,null],[5,"rocksdb_block_based_options_set_whole_key_filtering","","",null,null],[5,"rocksdb_options_set_block_based_table_factory","","",null,null],[5,"rocksdb_options_increase_parallelism","","",null,null],[5,"rocksdb_options_optimize_level_style_compaction","","",null,null],[5,"rocksdb_options_set_create_if_missing","","",null,null],[5,"rocksdb_options_set_max_open_files","","",null,null],[5,"rocksdb_options_set_use_fsync","","",null,null],[5,"rocksdb_options_set_bytes_per_sync","","",null,null],[5,"rocksdb_options_set_disable_data_sync","","",null,null],[5,"rocksdb_options_optimize_for_point_lookup","","",null,null],[5,"rocksdb_options_set_table_cache_numshardbits","","",null,null],[5,"rocksdb_options_set_max_write_buffer_number","","",null,null],[5,"rocksdb_options_set_min_write_buffer_number_to_merge","","",null,null],[5,"rocksdb_options_set_level0_file_num_compaction_trigger","","",null,null],[5,"rocksdb_options_set_level0_slowdown_writes_trigger","","",null,null],[5,"rocksdb_options_set_level0_stop_writes_trigger","","",null,null],[5,"rocksdb_options_set_write_buffer_size","","",null,null],[5,"rocksdb_options_set_target_file_size_base","","",null,null],[5,"rocksdb_options_set_target_file_size_multiplier","","",null,null],[5,"rocksdb_options_set_max_log_file_size","","",null,null],[5,"rocksdb_options_set_max_manifest_file_size","","",null,null],[5,"rocksdb_options_set_hash_skip_list_rep","","",null,null],[5,"rocksdb_options_set_compaction_style","","",null,null],[5,"rocksdb_options_set_compression","","",null,null],[5,"rocksdb_options_set_max_background_compactions","","",null,null],[5,"rocksdb_options_set_max_background_flushes","","",null,null],[5,"rocksdb_options_set_filter_deletes","","",null,null],[5,"rocksdb_options_set_disable_auto_compactions","","",null,null],[5,"rocksdb_filterpolicy_create_bloom","","",null,null],[5,"rocksdb_open","","",null,null],[5,"rocksdb_writeoptions_create","","",null,null],[5,"rocksdb_writeoptions_destroy","","",null,null],[5,"rocksdb_put","","",null,null],[5,"rocksdb_put_cf","","",null,null],[5,"rocksdb_readoptions_create","","",null,null],[5,"rocksdb_readoptions_destroy","","",null,null],[5,"rocksdb_readoptions_set_verify_checksums","","",null,null],[5,"rocksdb_readoptions_set_fill_cache","","",null,null],[5,"rocksdb_readoptions_set_snapshot","","",null,null],[5,"rocksdb_readoptions_set_iterate_upper_bound","","",null,null],[5,"rocksdb_readoptions_set_read_tier","","",null,null],[5,"rocksdb_readoptions_set_tailing","","",null,null],[5,"rocksdb_get","","",null,null],[5,"rocksdb_get_cf","","",null,null],[5,"rocksdb_create_iterator","","",null,null],[5,"rocksdb_create_iterator_cf","","",null,null],[5,"rocksdb_create_snapshot","","",null,null],[5,"rocksdb_release_snapshot","","",null,null],[5,"rocksdb_delete","","",null,null],[5,"rocksdb_delete_cf","","",null,null],[5,"rocksdb_close","","",null,null],[5,"rocksdb_destroy_db","","",null,null],[5,"rocksdb_repair_db","","",null,null],[5,"rocksdb_merge","","",null,null],[5,"rocksdb_merge_cf","","",null,null],[5,"rocksdb_mergeoperator_create","","",null,null],[5,"rocksdb_mergeoperator_destroy","","",null,null],[5,"rocksdb_options_set_merge_operator","","",null,null],[5,"rocksdb_iter_destroy","","",null,null],[5,"rocksdb_iter_valid","","",null,null],[5,"rocksdb_iter_seek_to_first","","",null,null],[5,"rocksdb_iter_seek_to_last","","",null,null],[5,"rocksdb_iter_seek","","",null,null],[5,"rocksdb_iter_next","","",null,null],[5,"rocksdb_iter_prev","","",null,null],[5,"rocksdb_iter_key","","",null,null],[5,"rocksdb_iter_value","","",null,null],[5,"rocksdb_iter_get_error","","",null,null],[5,"rocksdb_write","","",null,null],[5,"rocksdb_writebatch_create","","",null,null],[5,"rocksdb_writebatch_create_from","","",null,null],[5,"rocksdb_writebatch_destroy","","",null,null],[5,"rocksdb_writebatch_clear","","",null,null],[5,"rocksdb_writebatch_count","","",null,null],[5,"rocksdb_writebatch_put","","",null,null],[5,"rocksdb_writebatch_put_cf","","",null,null],[5,"rocksdb_writebatch_merge","","",null,null],[5,"rocksdb_writebatch_merge_cf","","",null,null],[5,"rocksdb_writebatch_delete","","",null,null],[5,"rocksdb_writebatch_delete_cf","","",null,null],[5,"rocksdb_writebatch_iterate","","",null,null],[5,"rocksdb_writebatch_data","","",null,null],[5,"rocksdb_options_set_comparator","","",null,null],[5,"rocksdb_comparator_create","","",null,null],[5,"rocksdb_comparator_destroy","","",null,null],[5,"rocksdb_open_column_families","","",null,null],[5,"rocksdb_create_column_family","","",null,null],[5,"rocksdb_drop_column_family","","",null,null],[5,"rocksdb_column_family_handle_destroy","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"dboptions"}],"output":{"name":"dboptions"}}],[11,"clone","","",13,{"inputs":[{"name":"dbinstance"}],"output":{"name":"dbinstance"}}],[11,"clone","","",14,{"inputs":[{"name":"dbwriteoptions"}],"output":{"name":"dbwriteoptions"}}],[11,"clone","","",15,{"inputs":[{"name":"dbreadoptions"}],"output":{"name":"dbreadoptions"}}],[11,"clone","","",16,{"inputs":[{"name":"dbmergeoperator"}],"output":{"name":"dbmergeoperator"}}],[11,"clone","","",17,{"inputs":[{"name":"dbblockbasedtableoptions"}],"output":{"name":"dbblockbasedtableoptions"}}],[11,"clone","","",18,{"inputs":[{"name":"dbcache"}],"output":{"name":"dbcache"}}],[11,"clone","","",19,{"inputs":[{"name":"dbfilterpolicy"}],"output":{"name":"dbfilterpolicy"}}],[11,"clone","","",20,{"inputs":[{"name":"dbsnapshot"}],"output":{"name":"dbsnapshot"}}],[11,"clone","","",21,{"inputs":[{"name":"dbiterator"}],"output":{"name":"dbiterator"}}],[11,"clone","","",22,{"inputs":[{"name":"dbcfhandle"}],"output":{"name":"dbcfhandle"}}],[11,"clone","","",23,{"inputs":[{"name":"dbwritebatch"}],"output":{"name":"dbwritebatch"}}],[11,"clone","","",24,{"inputs":[{"name":"dbcomparator"}],"output":{"name":"dbcomparator"}}],[0,"rocksdb_options","rocksdb","",null,null],[3,"BlockBasedOptions","rocksdb::rocksdb_options","",null,null],[3,"Options","","",null,null],[12,"inner","","",25,null],[11,"drop","","",25,{"inputs":[{"name":"options"}],"output":null}],[11,"drop","","",26,{"inputs":[{"name":"blockbasedoptions"}],"output":null}],[11,"new","","",26,{"inputs":[{"name":"blockbasedoptions"}],"output":{"name":"blockbasedoptions"}}],[11,"set_block_size","","",26,{"inputs":[{"name":"blockbasedoptions"},{"name":"u64"}],"output":null}],[11,"new","","",25,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"increase_parallelism","","",25,{"inputs":[{"name":"options"},{"name":"i32"}],"output":null}],[11,"optimize_level_style_compaction","","",25,{"inputs":[{"name":"options"},{"name":"i32"}],"output":null}],[11,"create_if_missing","","",25,{"inputs":[{"name":"options"},{"name":"bool"}],"output":null}],[11,"add_merge_operator","","",25,null],[11,"add_comparator","","",25,null],[11,"set_block_cache_size_mb","","",25,{"inputs":[{"name":"options"},{"name":"u64"}],"output":null}],[11,"set_max_open_files","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_use_fsync","","",25,{"inputs":[{"name":"options"},{"name":"bool"}],"output":null}],[11,"set_bytes_per_sync","","",25,{"inputs":[{"name":"options"},{"name":"u64"}],"output":null}],[11,"set_disable_data_sync","","",25,{"inputs":[{"name":"options"},{"name":"bool"}],"output":null}],[11,"set_table_cache_num_shard_bits","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_min_write_buffer_number","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_max_write_buffer_number","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_write_buffer_size","","",25,{"inputs":[{"name":"options"},{"name":"size_t"}],"output":null}],[11,"set_target_file_size_base","","",25,{"inputs":[{"name":"options"},{"name":"u64"}],"output":null}],[11,"set_min_write_buffer_number_to_merge","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_level_zero_slowdown_writes_trigger","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_level_zero_stop_writes_trigger","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_compaction_style","","",25,{"inputs":[{"name":"options"},{"name":"dbcompactionstyle"}],"output":null}],[11,"set_max_background_compactions","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_max_background_flushes","","",25,{"inputs":[{"name":"options"},{"name":"c_int"}],"output":null}],[11,"set_filter_deletes","","",25,{"inputs":[{"name":"options"},{"name":"bool"}],"output":null}],[11,"set_disable_auto_compactions","","",25,{"inputs":[{"name":"options"},{"name":"bool"}],"output":null}],[11,"set_block_based_table_factory","","",25,{"inputs":[{"name":"options"},{"name":"blockbasedoptions"}],"output":null}],[0,"merge_operator","rocksdb","",null,null],[3,"MergeOperatorCallback","rocksdb::merge_operator","",null,null],[12,"name","","",27,null],[12,"merge_fn","","",27,null],[3,"MergeOperands","","",null,null],[5,"destructor_callback","","",null,null],[5,"name_callback","","",null,null],[5,"full_merge_callback","","",null,null],[5,"partial_merge_callback","","",null,null],[0,"comparator","rocksdb","",null,null],[3,"ComparatorCallback","rocksdb::comparator","",null,null],[12,"name","","",28,null],[12,"f","","",28,null],[5,"destructor_callback","","",null,null],[5,"name_callback","","",null,null],[5,"compare_callback","","",null,null]],"paths":[[4,"Direction"],[4,"IteratorMode"],[8,"Writable"],[3,"DBIterator"],[3,"Snapshot"],[3,"DB"],[3,"WriteBatch"],[3,"ReadOptions"],[3,"DBVector"],[4,"DBCompressionType"],[4,"DBCompactionStyle"],[4,"DBUniversalCompactionStyle"],[3,"DBOptions"],[3,"DBInstance"],[3,"DBWriteOptions"],[3,"DBReadOptions"],[3,"DBMergeOperator"],[3,"DBBlockBasedTableOptions"],[3,"DBCache"],[3,"DBFilterPolicy"],[3,"DBSnapshot"],[3,"DBIterator"],[3,"DBCFHandle"],[3,"DBWriteBatch"],[3,"DBComparator"],[3,"Options"],[3,"BlockBasedOptions"],[3,"MergeOperatorCallback"],[3,"ComparatorCallback"]]};
searchIndex['num_cpus'] = {"items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex['miniz_sys'] = {"items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex['heapsize'] = {"items":[[5,"heap_size_of","heapsize","",null,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the\nspace taken up by the value itself (i.e. what size_of::<T> measures, more or less); that\nspace is handled by the implementation of HeapSizeOf for Box<T> below.",0,{"inputs":[{"name":"heapsizeof"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","alloc::boxed","",1,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","collections::string","",2,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","core::option","",3,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","collections::borrow","",4,{"inputs":[{"name":"cow"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","alloc::arc","",5,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","core::cell","",6,{"inputs":[{"name":"refcell"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"cell"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","collections::vec","",8,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","std::collections::hash::map","",9,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","collections::linked_list","",10,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","std::net::ip","",11,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","core::marker","",13,{"inputs":[{"name":"phantomdata"}],"output":{"name":"usize"}}],[14,"known_heap_size!","heapsize","For use on types defined in external crates\nwith known heap sizes.",null,null]],"paths":[[8,"HeapSizeOf"],[3,"Box"],[3,"String"],[4,"Option"],[4,"Cow"],[3,"Arc"],[3,"RefCell"],[3,"Cell"],[3,"Vec"],[3,"HashMap"],[3,"LinkedList"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"PhantomData"]]};
searchIndex['nodrop'] = {"items":[[3,"NoDrop","nodrop","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"nodrop"},{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"nodrop"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex['memchr'] = {"items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null]],"paths":[]};
searchIndex['odds'] = {"items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[5,"ref_eq","","Compare if **a** and **b** are equal *as pointers*.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if **a** and **b** are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,{"inputs":[],"output":null}],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"start","core::ops","",0,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",1,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"call","odds","",3,{"inputs":[{"name":"fix"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",3,{"inputs":[{"name":"fix"}],"output":{"name":"self"}}],[0,"string","","Extensions to `&str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",4,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","",4,{"inputs":[{"name":"strext"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",4,{"inputs":[{"name":"strext"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",4,{"inputs":[{"name":"strext"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",4,{"inputs":[{"name":"strext"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",4,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","**Panics** if `index` is out of bounds.",5,{"inputs":[{"name":"stringext"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"prefixes"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"prefixes"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"suffixes"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"suffixes"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"substrings"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"substrings"}],"output":{"name":"option"}}],[11,"insert_str","collections::string","**Panics** if `index` is out of bounds.",9,{"inputs":[{"name":"string"},{"name":"usize"},{"name":"str"}],"output":null}],[0,"vec","odds","Extensions to `Vec`",null,null],[8,"VecExt","odds::vec","Extra methods for `Vec<T>`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",10,{"inputs":[{"name":"vecext"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",10,{"inputs":[{"name":"vecext"},{"name":"f"}],"output":null}],[11,"splice","collections::vec","",11,{"inputs":[{"name":"vec"},{"name":"r"},{"name":"i"}],"output":null}],[11,"retain_mut","","",11,{"inputs":[{"name":"vec"},{"name":"f"}],"output":null}],[8,"IndexRange","odds","**IndexRange** is implemented by Rust's built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}]],"paths":[[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Fix"],[8,"StrExt"],[8,"StringExt"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"String"],[8,"VecExt"],[3,"Vec"],[8,"IndexRange"]]};
searchIndex['ethash'] = {"items":[[3,"ProofOfWork","ethash","Computation result",null,null],[12,"value","","Difficulty boundary",0,null],[12,"mix_hash","","Mix",0,null],[3,"EthashManager","","Lighy/Full cache manager",null,null],[5,"quick_get_difficulty","","Difficulty quick check for POW preverification",null,{"inputs":[{"name":"h256"},{"name":"u64"},{"name":"h256"}],"output":{"name":"h256"}}],[6,"H256","","",null,null],[17,"ETHASH_EPOCH_LENGTH","","",null,null],[11,"new","","Create a new new instance of ethash manager",1,{"inputs":[{"name":"ethashmanager"}],"output":{"name":"ethashmanager"}}],[11,"compute_light","","Calculate the light client data\n`block_number` - Block number to check\n`light` - The light client handler\n`header_hash` - The header hash to pack into the mix\n`nonce` - The nonce to pack into the mix",1,{"inputs":[{"name":"ethashmanager"},{"name":"u64"},{"name":"h256"},{"name":"u64"}],"output":{"name":"proofofwork"}}]],"paths":[[3,"ProofOfWork"],[3,"EthashManager"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['semver'] = {"items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version\nnumbers. Matching operations can then be done with the `VersionReq` against a particular\nversion to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that's solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each\nenumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",2,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",2,null],[13,"InvalidSigil","","The sigil you have written is not correct.",2,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",2,null],[13,"InvalidIdentifier","","There was an error parsing an identifier.",2,null],[13,"MajorVersionRequired","","At least a major version is required.",2,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",2,null],[11,"fmt","","",1,{"inputs":[{"name":"identifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"identifier"}],"output":{"name":"identifier"}}],[11,"fmt","","",1,{"inputs":[{"name":"identifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"parse","","Parse a string into a semver object.",0,{"inputs":[{"name":"version"},{"name":"str"}],"output":{"name":"result"}}],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,{"inputs":[{"name":"version"}],"output":null}],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,{"inputs":[{"name":"version"}],"output":null}],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,{"inputs":[{"name":"version"}],"output":null}],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,{"inputs":[{"name":"version"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"version"},{"name":"h"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"versionreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"versionreq"}],"output":{"name":"versionreq"}}],[11,"eq","","",3,{"inputs":[{"name":"versionreq"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"versionreq"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"reqparseerror"},{"name":"reqparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"reqparseerror"},{"name":"reqparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"reqparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"reqparseerror"}],"output":{"name":"reqparseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"reqparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"reqparseerror"}],"output":{"name":"str"}}],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other\nwords, any version will match against it.",3,{"inputs":[{"name":"versionreq"}],"output":{"name":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `\"^1.2.3\"`\nand turns it into a `VersionReq` that matches that particular constraint.",3,{"inputs":[{"name":"versionreq"},{"name":"str"}],"output":{"name":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",3,{"inputs":[{"name":"versionreq"},{"name":"version"}],"output":{"name":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",3,{"inputs":[{"name":"versionreq"},{"name":"version"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"versionreq"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Version"],[4,"Identifier"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex['libc'] = {"items":[[0,"types","libc","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",0,null],[12,"__unused1","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused2","","",0,null],[12,"gl_pathv","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[12,"__unused6","","",0,null],[12,"__unused7","","",0,null],[12,"__unused8","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_len","","",5,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",6,null],[12,"ss_family","","",6,null],[12,"__ss_pad1","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",7,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",9,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",14,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_dstaddr","","",15,null],[12,"ifa_data","","",15,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",6,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",8,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",9,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",10,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",12,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",16,null],[12,"st_mode","","",16,null],[12,"st_nlink","","",16,null],[12,"st_ino","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"st_rdev","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"st_birthtime","","",16,null],[12,"st_birthtime_nsec","","",16,null],[12,"st_size","","",16,null],[12,"st_blocks","","",16,null],[12,"st_blksize","","",16,null],[12,"st_flags","","",16,null],[12,"st_gen","","",16,null],[12,"st_lspare","","",16,null],[12,"st_qspare","","",16,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[3,"pthread_attr_t","","",null,null],[12,"__sig","","",18,null],[12,"__opaque","","",18,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",17,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",18,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"mach_timebase_info","libc::types::os::arch::extra","",null,null],[12,"numer","","",19,null],[12,"denom","","",19,null],[6,"mach_timebase_info_data_t","","",null,null],[11,"clone","","",19,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"posix08","libc::consts::os","",null,null],[17,"O_CLOEXEC","libc::consts::os::posix08","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"O_DSYNC","libc::consts::os::extra","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"MAP_STACK","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"PATH_MAX","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"ioctl","libc::funcs::bsd44","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"getdtablesize","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[0,"extra","libc::funcs","",null,null],[5,"_NSGetExecutablePath","libc::funcs::extra","",null,null]],"paths":[[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"mach_timebase_info"]]};
searchIndex['unicode_normalization'] = {"items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex['sha3'] = {"items":[[5,"sha3_256","sha3","",null,null],[5,"sha3_512","","",null,null]],"paths":[]};
searchIndex['lazy_static'] = {"items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
searchIndex['slab'] = {"items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","",0,{"inputs":[{"name":"index"},{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","",0,{"inputs":[{"name":"index"}],"output":{"name":"usize"}}],[11,"new","","",1,{"inputs":[{"name":"slab"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"has_remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","",1,{"inputs":[{"name":"slab"},{"name":"t"}],"output":{"name":"result"}}],[11,"insert_with","","Like `insert` but for objects that require newly allocated\nusize in their constructor.",1,{"inputs":[{"name":"slab"},{"name":"f"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"replace","","Replace the given slot, if the slot being replaced was empty,\nthen we increment the len of the slab",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"t"}],"output":{"name":"option"}}],[11,"replace_with","","Execute a function on the *value* in the slot and put the result of\nthe function back into the slot. If function returns None,\nslot is left empty on exit.",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[11,"retain","","Retain only the elements specified by the predicate.",1,{"inputs":[{"name":"slab"},{"name":"f"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabiter"}}],[11,"iter_mut","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabmutiter"}}],[11,"clear","","Empty the slab, by freeing all entries",1,{"inputs":[{"name":"slab"}],"output":null}],[11,"grow","","Grow the slab, by adding `entries_num`",1,{"inputs":[{"name":"slab"},{"name":"usize"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"slab"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"slabiter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"slabmutiter"}],"output":{"name":"option"}}]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
searchIndex['tiny_keccak'] = {"items":[[3,"Keccak","tiny_keccak","This structure should be used to create keccak/sha3 hash.",null,null],[5,"keccakf","","keccak-f[1600]",null,null],[11,"clone","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"self"}}],[11,"new_shake128","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_shake256","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_keccak224","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_keccak256","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_keccak384","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_keccak512","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_sha3_224","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_sha3_256","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_sha3_384","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"new_sha3_512","","",0,{"inputs":[{"name":"keccak"}],"output":{"name":"keccak"}}],[11,"update","","",0,null],[11,"finalize","","",0,null]],"paths":[[3,"Keccak"]]};
searchIndex['regex_syntax'] = {"items":[[3,"CharClass","regex_syntax","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",1,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",1,null],[12,"chars","regex_syntax::Expr","The characters.",1,null],[12,"casei","","Whether to match case insensitively.",1,null],[13,"AnyChar","regex_syntax","Match any character, excluding new line.",1,null],[13,"AnyCharNoNL","","Match any character.",1,null],[13,"Class","","A character class.",1,null],[13,"StartLine","","Match the start of a line or beginning of input.",1,null],[13,"EndLine","","Match the end of a line or end of input.",1,null],[13,"StartText","","Match the beginning of input.",1,null],[13,"EndText","","Match the end of input.",1,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",1,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",1,null],[13,"Group","","A group, possibly non-capturing.",1,null],[12,"e","regex_syntax::Expr","The expression inside the group.",1,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",1,null],[12,"name","","The capture name, only for capturing named groups.",1,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",1,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",1,null],[12,"r","","The type of repeat operator used.",1,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",1,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",1,null],[13,"Alternate","","An alternation of expressions. Only one must match.",1,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",2,null],[13,"ZeroOrMore","","Match zero or more (`*`).",2,null],[13,"OneOrMore","","Match one or more (`+`).",2,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",2,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",2,null],[12,"max","","Optional upper bound on the number of matches.",2,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",3,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P<a>.)(?P<a>.)`.",3,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",3,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",3,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",3,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",3,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",3,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",3,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",3,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",3,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",3,null],[12,"end","","The second character specified in the range.",3,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",3,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",3,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",3,null],[12,"max","","The second number specified in the repetition.",3,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",3,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",3,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",3,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",3,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",3,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",3,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",3,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",3,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",3,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",3,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",3,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",3,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",3,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",3,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",3,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",3,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",3,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",1,{"inputs":[{"name":"expr"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",5,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",5,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",5,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",5,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",5,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",5,null],[11,"as_slice","","Extracts a slice containing the entire vector.",5,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",5,null],[11,"set_len","","Sets the length of a vector.",5,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",5,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",5,null],[11,"push","","Appends an element to the back of a collection.",5,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",5,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",5,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",5,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",5,null],[11,"len","","Returns the number of elements in the vector.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",5,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",5,null],[11,"push_all","","",5,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",5,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",5,null],[11,"clone","collections::binary_heap","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",6,null],[11,"default","","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",6,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",6,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",6,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",6,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",6,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",6,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",6,null],[11,"drop","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",5,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",6,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",6,null],[11,"extend","","",6,null],[11,"new_leaf","collections::btree::node","",11,{"inputs":[{"name":"root"}],"output":{"name":"root"}}],[11,"as_ref","","",11,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",11,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",11,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",11,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",11,null],[11,"clone","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"len","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"keys","","",12,null],[11,"vals","","",12,null],[11,"ascend","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"keys_mut","","",12,null],[11,"vals_mut","","",12,null],[11,"into_slices","","",12,null],[11,"into_root_mut","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",12,null],[11,"push","","",12,null],[11,"push_front","","",12,null],[11,"push","","",12,null],[11,"push_front","","",12,null],[11,"pop","","",12,null],[11,"pop_front","","",12,null],[11,"force","","",12,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_node","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",13,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_edge","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",13,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"reborrow","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",13,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_kv","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert","","",13,null],[11,"insert","","",13,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",13,null],[11,"into_kv_mut","","",13,null],[11,"kv_mut","","",13,null],[11,"split","","",13,null],[11,"remove","","",13,null],[11,"split","","",13,null],[11,"can_merge","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"drop","collections::btree::map","",14,null],[11,"clone","","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",14,null],[11,"get","","Returns a reference to the value corresponding to the key.",14,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",14,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",14,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",14,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",14,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",14,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",15,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",15,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",16,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next_back","","",16,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",16,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",17,null],[11,"next","","",17,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",17,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",18,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",18,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",18,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",19,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",19,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",20,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",21,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",14,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",14,null],[11,"extend","","",14,null],[11,"hash","","",14,null],[11,"default","","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",14,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",14,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",14,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",22,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",22,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",23,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",24,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",24,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",24,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",24,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",24,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",25,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",25,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",25,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",25,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",25,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",25,null],[11,"contains","","Returns `true` if the set contains a value.",25,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",25,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",25,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",25,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",25,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",25,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",25,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",25,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",25,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",25,null],[11,"extend","","",25,null],[11,"default","","",25,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",25,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",26,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",28,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",28,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",29,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",30,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",31,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",32,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",33,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",33,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",33,null],[11,"into_owned","","Extracts the owned data.",33,null],[11,"deref","","",33,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",33,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",33,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"into_cow","","",33,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",33,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",34,null],[11,"cmp","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",34,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",34,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",34,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",34,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",34,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",34,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",34,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",34,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",34,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",34,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"from_iter","","",34,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",34,null],[11,"extend","","",34,null],[11,"clone","core::fmt::rt::v1","",36,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",37,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",38,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",39,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",40,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",41,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",42,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",43,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",43,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",44,null],[11,"iter","","Provides a forward iterator.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",44,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",44,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",44,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",44,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",44,null],[11,"next","","",41,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",45,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",45,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",45,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",42,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",44,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",44,null],[11,"extend","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",44,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",44,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",44,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"start","core::ops","",46,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",47,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",48,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",48,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",5,null],[11,"borrow_mut","","",5,null],[11,"clone","collections::str","",49,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",49,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"borrow","collections::string","",50,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",51,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",52,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",53,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",52,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",52,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",52,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",54,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",55,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",56,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",58,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",59,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",57,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",57,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",57,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",57,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",57,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",60,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",61,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",61,null],[11,"matching","","",61,null],[11,"use_early_reject","","",62,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",62,null],[11,"matching","","",62,null],[11,"cmp","collections::string","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",50,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",50,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",50,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",50,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",50,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",50,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",50,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",50,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",50,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",50,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",50,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",50,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",50,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",50,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",50,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",50,null],[11,"push","","Appends the given `char` to the end of this `String`.",50,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",50,null],[11,"truncate","","Shortens this `String` to the specified length.",50,null],[11,"pop","","Removes the last character from the string buffer and returns it.",50,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",50,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",50,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",50,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",50,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",50,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",50,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",50,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",50,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",63,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",63,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",63,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",50,null],[11,"from_iter","","",50,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",50,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",50,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",50,null],[11,"extend","","",50,null],[11,"extend","","",50,null],[11,"extend","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",33,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",50,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",50,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",50,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"add","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",50,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",50,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",50,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",50,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",50,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",50,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",50,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",50,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",50,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",65,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",50,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",50,null],[11,"from","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",33,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",33,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",50,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",50,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",50,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",50,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",66,null],[11,"next","","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",5,null],[11,"hash","","",5,null],[11,"index","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",5,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",5,null],[11,"extend","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","collections::borrow","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",5,null],[11,"default","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",5,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",33,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",67,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"count","","",67,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",67,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",67,null],[11,"next","","",68,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",68,null],[11,"clone","collections::vec_deque","",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",69,null],[11,"default","","",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",69,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",69,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",69,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",69,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",69,null],[11,"iter","","Returns a front-to-back iterator.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",69,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",69,null],[11,"len","","Returns the number of elements in the `VecDeque`.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",69,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",69,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",69,null],[11,"push_back","","Appends an element to the back of a buffer",69,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",69,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",69,null],[11,"retain","","Retains only the elements specified by the predicate.",69,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",69,null],[11,"clone","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",73,null],[11,"next","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",69,null],[11,"index","","",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",69,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",69,null],[11,"extend","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",74,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",75,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",76,null],[11,"make_place","","",76,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",76,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",77,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",75,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",76,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",77,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",77,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",77,null],[11,"default","","",77,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",77,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",77,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",77,null],[11,"clone","","",77,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",77,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",77,null],[11,"from","","",77,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",77,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",77,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",77,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",77,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",77,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",77,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",77,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",77,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",77,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",77,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",77,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",77,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","regex_syntax","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",4,{"inputs":[{"name":"charclass"},{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",4,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"negate","","Negates the character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",78,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",78,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",78,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",78,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"CharClass"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Error"]]};
searchIndex['ws2_32'] = {"items":[],"paths":[]};
searchIndex['advapi32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['nom'] = {"items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -> T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -> S, and a consumer C2 S -> T, and makes a consumer R -> T by applying C2 on C1's result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many1","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[4,"Err","","Contains the error that a parser can return",null,null],[13,"Code","","An error code, represented by an ErrorKind, which can contain a custom error code represented by E",1,null],[13,"Node","","An error code, and the next error",1,null],[13,"Position","","An error code, and the input position",1,null],[13,"NodePosition","","An error code, the input position and the next error",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"Input","","",null,null],[13,"Element","","",4,null],[13,"Empty","","",4,null],[13,"Eof","","",4,null],[4,"ConsumerState","","Stores a consumer's current computation state",null,null],[13,"Done","","A value pf type O has been produced",5,null],[13,"Error","","An error of type E has been encountered",5,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",5,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",6,null],[13,"Seek","","indicates where in the input the consumer must seek",6,null],[13,"Await","","indicates more data is needed",6,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",7,null],[13,"Error","","",7,null],[13,"Eof","","",7,null],[5,"error_to_list","","",null,{"inputs":[{"name":"err"}],"output":{"name":"vec"}}],[5,"compare_error_paths","","",null,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[5,"add_error_pattern","","",null,{"inputs":[{"name":"hashmap"},{"name":"iresult"},{"name":"str"}],"output":{"name":"bool"}}],[5,"slice_to_offsets","","",null,null],[5,"prepare_errors","","",null,null],[5,"print_error","","",null,null],[5,"generate_colors","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"print_offsets","","",null,null],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"not_line_ending","","",null,null],[5,"line_ending","","Recognizes a line feed",null,null],[5,"is_alphabetic","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"length_value","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"eof","","Recognizes empty input buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"newline","","",null,null],[5,"crlf","","",null,null],[5,"eol","","",null,null],[5,"tab","","",null,null],[5,"anychar","","",null,null],[5,"shift","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"err"}],"output":{"name":"err"}}],[11,"eq","","",1,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"err"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"needed"}],"output":{"name":"needed"}}],[11,"eq","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"needed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"iresult"}}],[11,"eq","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_err","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"input"}],"output":{"name":"input"}}],[11,"fmt","","",4,{"inputs":[{"name":"input"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"consumerstate"}],"output":{"name":"consumerstate"}}],[11,"fmt","","",5,{"inputs":[{"name":"consumerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map","","",5,{"inputs":[{"name":"consumerstate"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"flat_map","","",5,{"inputs":[{"name":"consumerstate"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"apply","","",8,{"inputs":[{"name":"producerrepeat"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",9,null],[11,"eq","","",6,{"inputs":[{"name":"move"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"move"},{"name":"move"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"move"}],"output":{"name":"move"}}],[11,"fmt","","",6,{"inputs":[{"name":"move"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"apply","","",9,{"inputs":[{"name":"memproducer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"eq","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"fileproducerstate"}],"output":{"name":"fileproducerstate"}}],[11,"fmt","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fileproducer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"fileproducer"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","",10,{"inputs":[{"name":"fileproducer"}],"output":{"name":"fileproducerstate"}}],[11,"refill","","",10,{"inputs":[{"name":"fileproducer"}],"output":{"name":"option"}}],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",10,{"inputs":[{"name":"fileproducer"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"apply","","",10,{"inputs":[{"name":"fileproducer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",11,{"inputs":[{"name":"mapconsumer"},{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",11,{"inputs":[{"name":"mapconsumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",11,{"inputs":[{"name":"mapconsumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",12,{"inputs":[{"name":"chainconsumer"},{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",12,{"inputs":[{"name":"chainconsumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",12,{"inputs":[{"name":"chainconsumer"}],"output":{"name":"consumerstate"}}],[8,"HexDisplay","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",13,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned\nstring.",13,{"inputs":[{"name":"hexdisplay"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\nstring.",13,{"inputs":[{"name":"hexdisplay"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"InputLength","","",null,null],[10,"input_len","","",14,{"inputs":[{"name":"inputlength"}],"output":{"name":"usize"}}],[8,"AsChar","","",null,null],[10,"as_char","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"char"}}],[10,"is_alpha","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_alphanum","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_0_to_9","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[8,"IterIndices","","",null,null],[16,"Item","","",16,null],[16,"Iter","","",16,null],[10,"iter_indices","","",16,{"inputs":[{"name":"iterindices"}],"output":{"name":"iter"}}],[8,"AsBytes","","",null,null],[10,"as_bytes","","",17,null],[8,"GetInput","","",null,null],[10,"remaining_input","","",18,{"inputs":[{"name":"getinput"}],"output":{"name":"option"}}],[8,"GetOutput","","",null,null],[10,"output","","",19,{"inputs":[{"name":"getoutput"}],"output":{"name":"option"}}],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement hndle for the current computation, returning the new state of the consumer",20,{"inputs":[{"name":"consumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[10,"state","","returns the current state",20,{"inputs":[{"name":"consumer"}],"output":{"name":"consumerstate"}}],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer's state",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"option"}}],[14,"dbg!","","Prints a message if the parser fails",null,null],[14,"dbg_dmp!","","Prints a message and the input if the parser fails",null,null],[14,"closure!","","Wraps a parser in a closure",null,null],[14,"named!","","Makes a function from a parser combination",null,null],[14,"call!","","Used to wrap common expressions and function as macros",null,null],[14,"apply!","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"error!","","Prevents backtracking if the child parser fails",null,null],[14,"add_error!","","Add an error if the child parser fails",null,null],[14,"fix_error!","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> woth a custom type",null,null],[14,"complete!","","replaces a `Incomplete` returned by the child parser\nwith an `Error`",null,null],[14,"try_parse!","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`,\nand will do an early return for `Error` and `Incomplete`\nthis can provide more flexibility than `chain!` if needed",null,null],[14,"flat_map!","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",null,null],[14,"map!","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>`\nmaps a function on the result of a parser",null,null],[14,"map_res!","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>`\nmaps a function returning a Result on the output of a parser",null,null],[14,"map_opt!","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>`\nmaps a function returning an Option on the output of a parser",null,null],[14,"value!","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",null,null],[14,"expr_res!","","`expr_res!(Result<E,O>) => I -> IResult<I, O>`\nevaluate an expression that returns a Result<T,E> and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt!","","`expr_opt!(Option<O>) => I -> IResult<I, O>`\nevaluate an expression that returns a Option<T> and returns a IResult::Done(I,T) if Ok",null,null],[14,"chain!","","`chain!(I->IResult<I,A> ~ I->IResult<I,B> ~ ... I->IResult<I,X> , || { return O } ) => I -> IResult<I, O>`\nchains parsers and assemble the results through a closure\nthe input type I must implement nom::InputLength\nthis combinator will count how much data is consumed by every child parser and take it into account if\nthere is not enough data",null,null],[14,"alt!","","`alt!(I -> IResult<I,O> | I -> IResult<I,O> | ... | I -> IResult<I,O> ) => I -> IResult<I, O>`\ntry a list of parsers, return the result of the first successful one",null,null],[14,"switch!","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>`\nchoose the next parser depending on the result of the first one, if successful,\nand returns the result of the second parser",null,null],[14,"opt!","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>`\nmake the underlying parser optional",null,null],[14,"opt_res!","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>`\nmake the underlying parser optional",null,null],[14,"cond!","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>`\nConditional combinator",null,null],[14,"cond_reduce!","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>`\nConditional combinator with error",null,null],[14,"peek!","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>`\nreturns a result without consuming the input",null,null],[14,"tap!","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>`\nallows access to the parser's result without affecting it",null,null],[14,"pair!","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>`\npair(X,Y), returns (x,y)",null,null],[14,"separated_pair!","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>`\nseparated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded!","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>`\npreceded(opening, X) returns X",null,null],[14,"terminated!","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>`\nterminated(X, closing) returns X",null,null],[14,"delimited!","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>`\ndelimited(opening, X, closing) returns X",null,null],[14,"separated_list!","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>`\nseparated_list(sep, X) returns Vec<X>",null,null],[14,"separated_nonempty_list!","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>`\nseparated_nonempty_list(sep, X) returns Vec<X>",null,null],[14,"many0!","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>`\nApplies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1!","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>`\nApplies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_m_n!","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>`\nApplies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count!","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>`\nApplies the child parser a specified number of times",null,null],[14,"count_fixed!","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>`\nApplies the child parser a fixed number of times and returns a fixed size array\nThe type must be specified and it must be `Copy`",null,null],[14,"length_value!","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>`\ngets a number from the first parser, then applies the second parser that many times",null,null],[14,"recognize!","","`recognize!(&[T] -> IResult<&[T], O> ) => &[T] -> IResult<&[T], &[T]>`\nif the child parser was successful, return the consumed input as produced value",null,null],[14,"tag!","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>`\ndeclares a byte array as a suite to recognize",null,null],[14,"tag_bytes!","","",null,null],[14,"is_not!","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>`\nreturns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_not_bytes!","","",null,null],[14,"is_a!","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>`\nreturns the longest list of bytes that appear in the provided array",null,null],[14,"is_a_bytes!","","",null,null],[14,"escaped!","","`escaped!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], &[T]>`\nmatches a byte string with escaped characters.",null,null],[14,"escaped_transform!","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>`\nmatches a byte string with escaped characters.",null,null],[14,"take_while!","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>`\nreturns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1!","","`take_while1!(&[T] -> bool) => &[T] -> IResult<&[T], &[T]>`\nreturns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till!","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>`\nreturns the longest list of bytes until the provided function succeeds",null,null],[14,"take!","","`take!(nb) => &[T] -> IResult<&[T], &[T]>`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"take_str!","","`take!(nb) => &[T] -> IResult<&[T], &str>`\nsame as take! but returning a &str",null,null],[14,"take_until_and_consume!","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>`\ngenerates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until_and_consume_bytes!","","",null,null],[14,"take_until!","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>`\nconsumes data until it finds the specified tag",null,null],[14,"take_until_bytes!","","",null,null],[14,"take_until_either_and_consume!","","`take_until_either_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>`\nconsumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either_and_consume_bytes!","","",null,null],[14,"take_until_either!","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>`",null,null],[14,"take_until_either_bytes!","","",null,null],[14,"length_bytes!","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>\ngets a number from the first parser, then extracts that many bytes from the\nremaining stream",null,null],[14,"bits!","","`bits!( parser ) => ( &[u8], (&[u8], usize) -> IResult<(&[u8], usize), T> ) -> IResult<&[u8], T>`\ntransforms its byte slice input in a bit stream for the underlying parsers",null,null],[14,"take_bits!","","`take_bits!(type, nb) => ( (&[T], usize), U, usize) -> IResult<(&[T], usize), U>`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"tag_bits!","","",null,null],[14,"u16!","","if parameter is true, parse a big endian u16 integer,\notherwise a little endian u16 integer",null,null],[14,"u32!","","if parameter is true, parse a big endian u32 integer,\notherwise a little endian u32 integer",null,null],[14,"u64!","","if parameter is true, parse a big endian u64 integer,\notherwise a little endian u64 integer",null,null],[14,"i16!","","if parameter is true, parse a big endian i16 integer,\notherwise a little endian i16 integer",null,null],[14,"i32!","","if parameter is true, parse a big endian i32 integer,\notherwise a little endian i32 integer",null,null],[14,"i64!","","if parameter is true, parse a big endian i64 integer,\notherwise a little endian i64 integer",null,null],[14,"one_of!","","matches one of the provided characters",null,null],[14,"one_of_bytes!","","",null,null],[14,"none_of!","","matches anything but the provided characters",null,null],[14,"none_of_bytes!","","",null,null],[14,"char!","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",null,null],[14,"consumer_from_parser!","","",null,null],[14,"tag_s!","","`tag_s!(&str) => &str -> IResult<&str, &str>`\ndeclares a string as a suite to recognize",null,null],[14,"take_s!","","`take_s!(nb) => &str -> IResult<&str, &str>`\ngenerates a parser consuming the specified number of characters",null,null],[14,"is_not_s!","","`is_not_s!(&str) => &str -> IResult<&str, &str>`\nreturns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s!","","`is_a_s!(&str) => &str -> IResult<&str, &str>`\nreturns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s!","","`take_while!(char -> bool) => &str -> IResult<&str, &str>`\nreturns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1_s!","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>`\nreturns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till_s!","","`take_till_s!(T -> bool) => &[T] -> IResult<&[T], &[T]>`\nreturns the longest list of bytes until the provided function succeeds",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"option"}}]],"paths":[[4,"ErrorKind"],[4,"Err"],[4,"Needed"],[4,"IResult"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"HexDisplay"],[8,"InputLength"],[8,"AsChar"],[8,"IterIndices"],[8,"AsBytes"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex['unreachable'] = {"items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,{"inputs":[],"output":null}],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"e"}}],[11,"unchecked_unwrap","core::option","",2,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_none","","",2,{"inputs":[{"name":"option"}],"output":null}],[11,"unchecked_unwrap_ok","core::result","",3,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_err","","",3,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"],[4,"Option"],[4,"Result"]]};
searchIndex['elastic_array'] = {"items":[[3,"ElasticArray2","elastic_array","",null,null],[3,"ElasticArray4","","",null,null],[3,"ElasticArray8","","",null,null],[3,"ElasticArray16","","",null,null],[3,"ElasticArray32","","",null,null],[3,"ElasticArray64","","",null,null],[3,"ElasticArray128","","",null,null],[3,"ElasticArray256","","",null,null],[3,"ElasticArray512","","",null,null],[3,"ElasticArray1024","","",null,null],[3,"ElasticArray2048","","",null,null],[11,"new","","",0,{"inputs":[{"name":"elasticarray2"}],"output":{"name":"elasticarray2"}}],[11,"push","","",0,{"inputs":[{"name":"elasticarray2"},{"name":"t"}],"output":null}],[11,"pop","","",0,{"inputs":[{"name":"elasticarray2"}],"output":{"name":"option"}}],[11,"clear","","",0,{"inputs":[{"name":"elasticarray2"}],"output":null}],[11,"append_slice","","",0,null],[11,"to_vec","","",0,{"inputs":[{"name":"elasticarray2"}],"output":{"name":"vec"}}],[11,"insert_slice","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"new","","",1,{"inputs":[{"name":"elasticarray4"}],"output":{"name":"elasticarray4"}}],[11,"push","","",1,{"inputs":[{"name":"elasticarray4"},{"name":"t"}],"output":null}],[11,"pop","","",1,{"inputs":[{"name":"elasticarray4"}],"output":{"name":"option"}}],[11,"clear","","",1,{"inputs":[{"name":"elasticarray4"}],"output":null}],[11,"append_slice","","",1,null],[11,"to_vec","","",1,{"inputs":[{"name":"elasticarray4"}],"output":{"name":"vec"}}],[11,"insert_slice","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"new","","",2,{"inputs":[{"name":"elasticarray8"}],"output":{"name":"elasticarray8"}}],[11,"push","","",2,{"inputs":[{"name":"elasticarray8"},{"name":"t"}],"output":null}],[11,"pop","","",2,{"inputs":[{"name":"elasticarray8"}],"output":{"name":"option"}}],[11,"clear","","",2,{"inputs":[{"name":"elasticarray8"}],"output":null}],[11,"append_slice","","",2,null],[11,"to_vec","","",2,{"inputs":[{"name":"elasticarray8"}],"output":{"name":"vec"}}],[11,"insert_slice","","",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"new","","",3,{"inputs":[{"name":"elasticarray16"}],"output":{"name":"elasticarray16"}}],[11,"push","","",3,{"inputs":[{"name":"elasticarray16"},{"name":"t"}],"output":null}],[11,"pop","","",3,{"inputs":[{"name":"elasticarray16"}],"output":{"name":"option"}}],[11,"clear","","",3,{"inputs":[{"name":"elasticarray16"}],"output":null}],[11,"append_slice","","",3,null],[11,"to_vec","","",3,{"inputs":[{"name":"elasticarray16"}],"output":{"name":"vec"}}],[11,"insert_slice","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"new","","",4,{"inputs":[{"name":"elasticarray32"}],"output":{"name":"elasticarray32"}}],[11,"push","","",4,{"inputs":[{"name":"elasticarray32"},{"name":"t"}],"output":null}],[11,"pop","","",4,{"inputs":[{"name":"elasticarray32"}],"output":{"name":"option"}}],[11,"clear","","",4,{"inputs":[{"name":"elasticarray32"}],"output":null}],[11,"append_slice","","",4,null],[11,"to_vec","","",4,{"inputs":[{"name":"elasticarray32"}],"output":{"name":"vec"}}],[11,"insert_slice","","",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"new","","",5,{"inputs":[{"name":"elasticarray64"}],"output":{"name":"elasticarray64"}}],[11,"push","","",5,{"inputs":[{"name":"elasticarray64"},{"name":"t"}],"output":null}],[11,"pop","","",5,{"inputs":[{"name":"elasticarray64"}],"output":{"name":"option"}}],[11,"clear","","",5,{"inputs":[{"name":"elasticarray64"}],"output":null}],[11,"append_slice","","",5,null],[11,"to_vec","","",5,{"inputs":[{"name":"elasticarray64"}],"output":{"name":"vec"}}],[11,"insert_slice","","",5,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","",6,{"inputs":[{"name":"elasticarray128"}],"output":{"name":"elasticarray128"}}],[11,"push","","",6,{"inputs":[{"name":"elasticarray128"},{"name":"t"}],"output":null}],[11,"pop","","",6,{"inputs":[{"name":"elasticarray128"}],"output":{"name":"option"}}],[11,"clear","","",6,{"inputs":[{"name":"elasticarray128"}],"output":null}],[11,"append_slice","","",6,null],[11,"to_vec","","",6,{"inputs":[{"name":"elasticarray128"}],"output":{"name":"vec"}}],[11,"insert_slice","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"new","","",7,{"inputs":[{"name":"elasticarray256"}],"output":{"name":"elasticarray256"}}],[11,"push","","",7,{"inputs":[{"name":"elasticarray256"},{"name":"t"}],"output":null}],[11,"pop","","",7,{"inputs":[{"name":"elasticarray256"}],"output":{"name":"option"}}],[11,"clear","","",7,{"inputs":[{"name":"elasticarray256"}],"output":null}],[11,"append_slice","","",7,null],[11,"to_vec","","",7,{"inputs":[{"name":"elasticarray256"}],"output":{"name":"vec"}}],[11,"insert_slice","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"new","","",8,{"inputs":[{"name":"elasticarray512"}],"output":{"name":"elasticarray512"}}],[11,"push","","",8,{"inputs":[{"name":"elasticarray512"},{"name":"t"}],"output":null}],[11,"pop","","",8,{"inputs":[{"name":"elasticarray512"}],"output":{"name":"option"}}],[11,"clear","","",8,{"inputs":[{"name":"elasticarray512"}],"output":null}],[11,"append_slice","","",8,null],[11,"to_vec","","",8,{"inputs":[{"name":"elasticarray512"}],"output":{"name":"vec"}}],[11,"insert_slice","","",8,null],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"new","","",9,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"elasticarray1024"}}],[11,"push","","",9,{"inputs":[{"name":"elasticarray1024"},{"name":"t"}],"output":null}],[11,"pop","","",9,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"option"}}],[11,"clear","","",9,{"inputs":[{"name":"elasticarray1024"}],"output":null}],[11,"append_slice","","",9,null],[11,"to_vec","","",9,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"vec"}}],[11,"insert_slice","","",9,null],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"new","","",10,{"inputs":[{"name":"elasticarray2048"}],"output":{"name":"elasticarray2048"}}],[11,"push","","",10,{"inputs":[{"name":"elasticarray2048"},{"name":"t"}],"output":null}],[11,"pop","","",10,{"inputs":[{"name":"elasticarray2048"}],"output":{"name":"option"}}],[11,"clear","","",10,{"inputs":[{"name":"elasticarray2048"}],"output":null}],[11,"append_slice","","",10,null],[11,"to_vec","","",10,{"inputs":[{"name":"elasticarray2048"}],"output":{"name":"vec"}}],[11,"insert_slice","","",10,null],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[14,"impl_elastic_array!","","",null,null]],"paths":[[3,"ElasticArray2"],[3,"ElasticArray4"],[3,"ElasticArray8"],[3,"ElasticArray16"],[3,"ElasticArray32"],[3,"ElasticArray64"],[3,"ElasticArray128"],[3,"ElasticArray256"],[3,"ElasticArray512"],[3,"ElasticArray1024"],[3,"ElasticArray2048"]]};
searchIndex['bytes'] = {"items":[[3,"ByteBuf","bytes","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[0,"alloc","","",null,null],[3,"Heap","bytes::alloc","",null,null],[3,"MemRef","","",null,null],[3,"Mem","","Memory allocated by an Allocator must be prefixed with Mem",null,null],[5,"heap","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"memref"}}],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[8,"Allocator","","Allocates memory to be used by Bufs or Bytes. Allows allocating memory\nusing alternate stratgies than the default Rust heap allocator. Also does\nnot require that allocations are continuous in memory.",null,null],[10,"allocate","","Allocate memory. May or may not be contiguous.",2,{"inputs":[{"name":"allocator"},{"name":"usize"}],"output":{"name":"memref"}}],[10,"deallocate","","Deallocate a chunk of memory",2,null],[11,"new","","",3,null],[11,"none","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"is_none","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"bool"}}],[11,"ptr","","",3,null],[11,"bytes","","",3,null],[11,"bytes_mut","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"drop","","",3,{"inputs":[{"name":"memref"}],"output":null}],[11,"new","","",4,null],[0,"buf","bytes","",null,null],[3,"ByteBuf","bytes::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[11,"from_slice","bytes","Create a new `ByteBuf` by copying the contents of the given slice.",5,null],[11,"mut_with_capacity","","",5,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",5,{"inputs":[{"name":"bytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position\nto the byte after the previous write.",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",5,null],[11,"to_seq_byte_str","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"remaining","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",5,null],[11,"advance","","",5,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_mem_ref","","",6,{"inputs":[{"name":"robytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"robytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"robytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"capacity","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":null}],[11,"write_slice","","",7,null],[11,"bytes","","",7,null],[11,"remaining","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",7,{"inputs":[{"name":"mutbytebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"mutbytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Allocates a new `RingBuf` with the specified capacity.",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"mark","","Marks the current read location.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"clear","","Resets all internal state to the initial state.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",8,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",8,null],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"result"}}],[11,"wrap","","",9,null],[11,"remaining","","",9,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",9,null],[11,"advance","","",9,{"inputs":[{"name":"slicebuf"},{"name":"usize"}],"output":null}],[11,"wrap","","",10,null],[11,"remaining","","",10,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",10,{"inputs":[{"name":"mutslicebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"take"},{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_ref","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_mut","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"limit","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"set_limit","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"read","","",11,null],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"mut_bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[8,"Buf","bytes::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",12,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",12,null],[10,"advance","","Advance the internal cursor of the Buf",12,{"inputs":[{"name":"buf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",12,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",12,null],[11,"read_byte","","Read a single byte from the `Buf`",12,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by\nthe number of bytes read.",13,{"inputs":[{"name":"bufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",14,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",14,{"inputs":[{"name":"mutbuf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",14,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",14,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",14,null],[11,"write_byte","","Write a single byte to the `MuBuf`",14,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance\nthe cursor by the number of bytes written.",15,{"inputs":[{"name":"mutbufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","","",16,null],[10,"sink","","",16,{"inputs":[{"name":"sink"},{"name":"b"}],"output":{"name":"result"}}],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","","",17,null],[10,"fill","","",17,{"inputs":[{"name":"source"},{"name":"b"}],"output":{"name":"result"}}],[11,"remaining","alloc::boxed","",18,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",18,null],[11,"advance","","",18,{"inputs":[{"name":"box"},{"name":"usize"}],"output":null}],[11,"read_slice","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","std::io::cursor","",19,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",19,null],[11,"advance","","",19,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"remaining","collections::vec","",20,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"advance","","",20,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",20,null],[11,"remaining","std::io::cursor","",19,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",19,null],[11,"advance","","",19,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"read","bytes","",5,null],[11,"read","","",6,null],[11,"read","","",21,null],[11,"read","alloc::boxed","",18,null],[11,"write","bytes","",7,null],[11,"flush","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[0,"str","","",null,null],[3,"Bytes","bytes::str","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[11,"from_slice","bytes","",22,null],[11,"of","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",22,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",22,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"buf","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",22,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",22,null],[11,"to_bytes","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"index","","",22,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",22,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",22,{"inputs":[{"name":"bytes"}],"output":null}],[11,"from_slice","","",23,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[11,"buf","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",23,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[11,"index","","",23,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[11,"remaining","","",21,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",21,null],[11,"advance","","",21,{"inputs":[{"name":"ropebuf"},{"name":"usize"}],"output":null}],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",24,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",24,{"inputs":[{"name":"seqbytestr"},{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",25,null],[11,"as_slice","","",25,null],[11,"buf","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",26,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",26,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",26,null],[11,"advance","","",26,{"inputs":[{"name":"smallbytestrbuf"},{"name":"usize"}],"output":null}],[8,"ByteStr","bytes::str","An immutable sequence of bytes. Operations will not mutate the original\nvalue. Since only immutable access is permitted, operations do not require\ncopying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",27,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the\n`ByteStr`.",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"buf"}}],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self`\nwith the given `Bytes`.",27,{"inputs":[{"name":"bytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin`\n(inclusive) and `end` (exclusive)",27,{"inputs":[{"name":"bytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",27,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",27,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",27,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing\nidentical bytes",28,{"inputs":[{"name":"tobytes"}],"output":{"name":"bytes"}}],[11,"eq","bytes","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"buferror"}],"output":{"name":"buferror"}}]],"paths":[[4,"BufError"],[3,"Heap"],[8,"Allocator"],[3,"MemRef"],[3,"Mem"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"Sink"],[8,"Source"],[3,"Box"],[3,"Cursor"],[3,"Vec"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[8,"ByteStr"],[8,"ToBytes"]]};
searchIndex['void'] = {"items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,{"inputs":[{"name":"void"}],"output":null}],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"resultvoidext"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"resultvoiderrext"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"void"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"option"}}],[11,"description","","",2,{"inputs":[{"name":"void"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"void"}],"output":{"name":"option"}}],[11,"void_unwrap","core::result","Get the value out of an always-ok Result.",3,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"void_unwrap_err","","Get the error out of an always-err Result.",3,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"],[4,"Result"]]};
searchIndex['cfg_if'] = {"items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
searchIndex['bitflags'] = {"items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
