initSidebarItems({"macro":[["flush!",""],["flushln!",""],["map!",""],["mapx!",""],["x!",""],["xjson!",""],["xx!",""]],"mod":[["bytes","Unified interfaces for bytes operations on basic types"],["chainfilter","Multilevel blockchain bloom filter."],["common","TODO [Gav Wood] Please document me"],["crypto","TODO [Gav Wood] Please document me"],["error","General error types for use in ethcore."],["from_json","TODO [Gav Wood] Please document me"],["hash","General hash types, a fixed-size raw-data type used as the output of hash functions."],["hashdb","Database of byte-slices keyed to their Keccak hash."],["heapsizeof","TODO [Gav Wood] Please document me"],["io","TODO [Gav Wood] Please document me"],["journaldb","Disk-backed HashDB implementation."],["json_aid","TODO [Gav Wood] Please document me"],["math","TODO [Gav Wood] Please document me"],["memorydb","Reference-counted memory-based HashDB implementation."],["misc","TODO [Gav Wood] Please document me"],["network","TODO [Gav Wood] Please document me"],["nibbleslice","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets."],["overlaydb","Disk-backed HashDB implementation."],["rlp","Rlp serialization module"],["semantic_version","TODO [Gav Wood] Please document me"],["sha3","Wrapper around tiny-keccak crate."],["squeeze","Helper module that should be used to randomly squeeze caches to a given size in bytes"],["standard","TODO [Gav Wood] Please document me"],["trie","TODO [Gav Wood] Please document me"],["triehash","Generetes trie root."],["uint","Big unsigned integer types"],["vector","vector util functions"]]});